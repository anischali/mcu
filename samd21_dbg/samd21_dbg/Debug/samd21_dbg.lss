
samd21_dbg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cb4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000006c  20000000  00002cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000120  2000006c  00002d20  0002006c  2**2
                  ALLOC
  3 .stack        00002004  2000018c  00002e40  0002006c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002d5d0  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e3d  00000000  00000000  0004d6bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006fb1  00000000  00000000  000514fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000520  00000000  00000000  000584ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000009e8  00000000  00000000  000589cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b206  00000000  00000000  000593b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e496  00000000  00000000  000745b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00089118  00000000  00000000  00082a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000137c  00000000  00000000  0010bb68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 21 00 20 9d 18 00 00 99 18 00 00 99 18 00 00     .!. ............
	...
      2c:	99 18 00 00 00 00 00 00 00 00 00 00 99 18 00 00     ................
      3c:	99 18 00 00 99 18 00 00 99 18 00 00 99 18 00 00     ................
      4c:	99 18 00 00 99 18 00 00 99 18 00 00 99 18 00 00     ................
      5c:	99 18 00 00 99 18 00 00 25 12 00 00 35 12 00 00     ........%...5...
      6c:	45 12 00 00 55 12 00 00 65 12 00 00 75 12 00 00     E...U...e...u...
      7c:	99 18 00 00 99 18 00 00 99 18 00 00 99 18 00 00     ................
      8c:	99 18 00 00 99 18 00 00 00 00 00 00 00 00 00 00     ................
      9c:	99 18 00 00 99 18 00 00 99 18 00 00 99 18 00 00     ................
      ac:	99 18 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000006c 	.word	0x2000006c
      d4:	00000000 	.word	0x00000000
      d8:	00002cb4 	.word	0x00002cb4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000070 	.word	0x20000070
     108:	00002cb4 	.word	0x00002cb4
     10c:	00002cb4 	.word	0x00002cb4
     110:	00000000 	.word	0x00000000

00000114 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	b082      	sub	sp, #8
     118:	0005      	movs	r5, r0
     11a:	000e      	movs	r6, r1
	uint16_t temp = 0;
     11c:	2200      	movs	r2, #0
     11e:	466b      	mov	r3, sp
     120:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     122:	4c06      	ldr	r4, [pc, #24]	; (13c <usart_serial_getchar+0x28>)
     124:	466b      	mov	r3, sp
     126:	1d99      	adds	r1, r3, #6
     128:	0028      	movs	r0, r5
     12a:	47a0      	blx	r4
     12c:	2800      	cmp	r0, #0
     12e:	d1f9      	bne.n	124 <usart_serial_getchar+0x10>

	*c = temp;
     130:	466b      	mov	r3, sp
     132:	3306      	adds	r3, #6
     134:	881b      	ldrh	r3, [r3, #0]
     136:	7033      	strb	r3, [r6, #0]
}
     138:	b002      	add	sp, #8
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00000b07 	.word	0x00000b07

00000140 <usart_serial_putchar>:
{
     140:	b570      	push	{r4, r5, r6, lr}
     142:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     144:	b28c      	uxth	r4, r1
     146:	4e03      	ldr	r6, [pc, #12]	; (154 <usart_serial_putchar+0x14>)
     148:	0021      	movs	r1, r4
     14a:	0028      	movs	r0, r5
     14c:	47b0      	blx	r6
     14e:	2800      	cmp	r0, #0
     150:	d1fa      	bne.n	148 <usart_serial_putchar+0x8>
}
     152:	bd70      	pop	{r4, r5, r6, pc}
     154:	00000ae1 	.word	0x00000ae1

00000158 <console_init>:
	usart_enable(&module);
 }


 void console_init(void)
 {
     158:	b5f0      	push	{r4, r5, r6, r7, lr}
     15a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     15c:	2380      	movs	r3, #128	; 0x80
     15e:	05db      	lsls	r3, r3, #23
     160:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     162:	2300      	movs	r3, #0
     164:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     166:	22ff      	movs	r2, #255	; 0xff
     168:	4669      	mov	r1, sp
     16a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     16c:	2200      	movs	r2, #0
     16e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     170:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     172:	2401      	movs	r4, #1
     174:	2124      	movs	r1, #36	; 0x24
     176:	4668      	mov	r0, sp
     178:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
     17a:	3101      	adds	r1, #1
     17c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
     17e:	3101      	adds	r1, #1
     180:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
     182:	3101      	adds	r1, #1
     184:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
     186:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     188:	3105      	adds	r1, #5
     18a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
     18c:	3101      	adds	r1, #1
     18e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     190:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     192:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     194:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     196:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     198:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     19a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
     19c:	2313      	movs	r3, #19
     19e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     1a0:	7742      	strb	r2, [r0, #29]
	cfg.baudrate = 115200;
     1a2:	23e1      	movs	r3, #225	; 0xe1
     1a4:	025b      	lsls	r3, r3, #9
     1a6:	9308      	str	r3, [sp, #32]
	cfg.pinmux_pad0 = PINMUX_UNUSED;
     1a8:	2301      	movs	r3, #1
     1aa:	425b      	negs	r3, r3
     1ac:	930c      	str	r3, [sp, #48]	; 0x30
	cfg.pinmux_pad1 = PINMUX_UNUSED;
     1ae:	930d      	str	r3, [sp, #52]	; 0x34
	cfg.pinmux_pad2 = PINMUX_PA10C_SERCOM0_PAD2;
     1b0:	4b1a      	ldr	r3, [pc, #104]	; (21c <console_init+0xc4>)
     1b2:	930e      	str	r3, [sp, #56]	; 0x38
	cfg.pinmux_pad3 = PINMUX_PA11C_SERCOM0_PAD3;
     1b4:	4b1a      	ldr	r3, [pc, #104]	; (220 <console_init+0xc8>)
     1b6:	930f      	str	r3, [sp, #60]	; 0x3c
	cfg.mux_setting = USART_RX_3_TX_2_XCK_3;
     1b8:	23c4      	movs	r3, #196	; 0xc4
     1ba:	039b      	lsls	r3, r3, #14
     1bc:	9303      	str	r3, [sp, #12]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     1be:	4d19      	ldr	r5, [pc, #100]	; (224 <console_init+0xcc>)
     1c0:	4b19      	ldr	r3, [pc, #100]	; (228 <console_init+0xd0>)
     1c2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     1c4:	4a19      	ldr	r2, [pc, #100]	; (22c <console_init+0xd4>)
     1c6:	4b1a      	ldr	r3, [pc, #104]	; (230 <console_init+0xd8>)
     1c8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     1ca:	4a1a      	ldr	r2, [pc, #104]	; (234 <console_init+0xdc>)
     1cc:	4b1a      	ldr	r3, [pc, #104]	; (238 <console_init+0xe0>)
     1ce:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     1d0:	466a      	mov	r2, sp
     1d2:	491a      	ldr	r1, [pc, #104]	; (23c <console_init+0xe4>)
     1d4:	0028      	movs	r0, r5
     1d6:	4b1a      	ldr	r3, [pc, #104]	; (240 <console_init+0xe8>)
     1d8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     1da:	4f1a      	ldr	r7, [pc, #104]	; (244 <console_init+0xec>)
     1dc:	683b      	ldr	r3, [r7, #0]
     1de:	6898      	ldr	r0, [r3, #8]
     1e0:	2100      	movs	r1, #0
     1e2:	4e19      	ldr	r6, [pc, #100]	; (248 <console_init+0xf0>)
     1e4:	47b0      	blx	r6
	setbuf(stdin, NULL);
     1e6:	683b      	ldr	r3, [r7, #0]
     1e8:	6858      	ldr	r0, [r3, #4]
     1ea:	2100      	movs	r1, #0
     1ec:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     1ee:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     1f0:	0030      	movs	r0, r6
     1f2:	4b16      	ldr	r3, [pc, #88]	; (24c <console_init+0xf4>)
     1f4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1f6:	231f      	movs	r3, #31
     1f8:	4018      	ands	r0, r3
     1fa:	4084      	lsls	r4, r0
     1fc:	4b14      	ldr	r3, [pc, #80]	; (250 <console_init+0xf8>)
     1fe:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     200:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     202:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     204:	2b00      	cmp	r3, #0
     206:	d1fc      	bne.n	202 <console_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     208:	6833      	ldr	r3, [r6, #0]
     20a:	2202      	movs	r2, #2
     20c:	4313      	orrs	r3, r2
     20e:	6033      	str	r3, [r6, #0]
	console_hardware_init();
	printf("Hello world !!!\n\r");
     210:	4810      	ldr	r0, [pc, #64]	; (254 <console_init+0xfc>)
     212:	4b11      	ldr	r3, [pc, #68]	; (258 <console_init+0x100>)
     214:	4798      	blx	r3
     216:	b011      	add	sp, #68	; 0x44
     218:	bdf0      	pop	{r4, r5, r6, r7, pc}
     21a:	46c0      	nop			; (mov r8, r8)
     21c:	000a0002 	.word	0x000a0002
     220:	000b0002 	.word	0x000b0002
     224:	20000088 	.word	0x20000088
     228:	20000168 	.word	0x20000168
     22c:	00000141 	.word	0x00000141
     230:	20000164 	.word	0x20000164
     234:	00000115 	.word	0x00000115
     238:	20000160 	.word	0x20000160
     23c:	42000800 	.word	0x42000800
     240:	000007a5 	.word	0x000007a5
     244:	20000008 	.word	0x20000008
     248:	00001bd1 	.word	0x00001bd1
     24c:	000011f5 	.word	0x000011f5
     250:	e000e100 	.word	0xe000e100
     254:	00002b80 	.word	0x00002b80
     258:	00001b9d 	.word	0x00001b9d

0000025c <spi_on_recv_callback>:

static struct spi_module module = {0};
static uint8_t rx_data[32];

static void spi_on_recv_callback(struct spi_module *const module)
{
     25c:	b530      	push	{r4, r5, lr}
     25e:	b083      	sub	sp, #12
     260:	9001      	str	r0, [sp, #4]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     262:	7e03      	ldrb	r3, [r0, #24]
	while (!spi_is_ready_to_read(&module))
     264:	075b      	lsls	r3, r3, #29
     266:	d407      	bmi.n	278 <spi_on_recv_callback+0x1c>
		delay_cycles_ms(1);
     268:	4d0a      	ldr	r5, [pc, #40]	; (294 <spi_on_recv_callback+0x38>)
	while (!spi_is_ready_to_read(&module))
     26a:	2404      	movs	r4, #4
		delay_cycles_ms(1);
     26c:	2001      	movs	r0, #1
     26e:	47a8      	blx	r5
     270:	9b01      	ldr	r3, [sp, #4]
     272:	7e1b      	ldrb	r3, [r3, #24]
	while (!spi_is_ready_to_read(&module))
     274:	4223      	tst	r3, r4
     276:	d0f9      	beq.n	26c <spi_on_recv_callback+0x10>

	spi_read_buffer_job(&module, rx_data, 32, 0);
     278:	4c07      	ldr	r4, [pc, #28]	; (298 <spi_on_recv_callback+0x3c>)
     27a:	2300      	movs	r3, #0
     27c:	2220      	movs	r2, #32
     27e:	0021      	movs	r1, r4
     280:	a801      	add	r0, sp, #4
     282:	4d06      	ldr	r5, [pc, #24]	; (29c <spi_on_recv_callback+0x40>)
     284:	47a8      	blx	r5
	
	printf("%s\n\r", rx_data);
     286:	0021      	movs	r1, r4
     288:	4805      	ldr	r0, [pc, #20]	; (2a0 <spi_on_recv_callback+0x44>)
     28a:	4b06      	ldr	r3, [pc, #24]	; (2a4 <spi_on_recv_callback+0x48>)
     28c:	4798      	blx	r3
}
     28e:	b003      	add	sp, #12
     290:	bd30      	pop	{r4, r5, pc}
     292:	46c0      	nop			; (mov r8, r8)
     294:	00000371 	.word	0x00000371
     298:	200000f8 	.word	0x200000f8
     29c:	00000f31 	.word	0x00000f31
     2a0:	00002b94 	.word	0x00002b94
     2a4:	00001b9d 	.word	0x00001b9d

000002a8 <spi_slave_hardware_init>:


void spi_slave_hardware_init(void)
{
     2a8:	b570      	push	{r4, r5, r6, lr}
     2aa:	b08e      	sub	sp, #56	; 0x38
	config->data_order       = SPI_DATA_ORDER_MSB;
     2ac:	2400      	movs	r4, #0
     2ae:	9401      	str	r4, [sp, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     2b0:	9402      	str	r4, [sp, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     2b2:	466b      	mov	r3, sp
     2b4:	741c      	strb	r4, [r3, #16]
	config->run_in_standby   = false;
     2b6:	745c      	strb	r4, [r3, #17]
	config->receiver_enable  = true;
     2b8:	2501      	movs	r5, #1
     2ba:	749d      	strb	r5, [r3, #18]
	config->select_slave_low_detect_enable= true;
     2bc:	74dd      	strb	r5, [r3, #19]
	config->master_slave_select_enable= false;
     2be:	751c      	strb	r4, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
     2c0:	2324      	movs	r3, #36	; 0x24
     2c2:	466a      	mov	r2, sp
     2c4:	54d4      	strb	r4, [r2, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     2c6:	220c      	movs	r2, #12
     2c8:	2100      	movs	r1, #0
     2ca:	a806      	add	r0, sp, #24
     2cc:	4b15      	ldr	r3, [pc, #84]	; (324 <spi_slave_hardware_init+0x7c>)
     2ce:	4798      	blx	r3
	
	struct spi_config cfg;
	
	spi_get_config_defaults(&cfg);

	cfg.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
     2d0:	4b15      	ldr	r3, [pc, #84]	; (328 <spi_slave_hardware_init+0x80>)
     2d2:	930a      	str	r3, [sp, #40]	; 0x28
	cfg.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
     2d4:	4b15      	ldr	r3, [pc, #84]	; (32c <spi_slave_hardware_init+0x84>)
     2d6:	930b      	str	r3, [sp, #44]	; 0x2c
	cfg.pinmux_pad2 = PINMUX_PA18C_SERCOM1_PAD2;
     2d8:	4b15      	ldr	r3, [pc, #84]	; (330 <spi_slave_hardware_init+0x88>)
     2da:	930c      	str	r3, [sp, #48]	; 0x30
	cfg.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
     2dc:	4b15      	ldr	r3, [pc, #84]	; (334 <spi_slave_hardware_init+0x8c>)
     2de:	930d      	str	r3, [sp, #52]	; 0x34
	cfg.mux_setting = SPI_SIGNAL_MUX_SETTING_I;
     2e0:	2380      	movs	r3, #128	; 0x80
     2e2:	029b      	lsls	r3, r3, #10
     2e4:	9303      	str	r3, [sp, #12]
	cfg.mode = SPI_MODE_SLAVE;
     2e6:	466b      	mov	r3, sp
     2e8:	701c      	strb	r4, [r3, #0]
	cfg.mode_specific.slave.frame_format = SPI_FRAME_FORMAT_SPI_FRAME;
     2ea:	9406      	str	r4, [sp, #24]
	cfg.mode_specific.slave.preload_enable = true;
     2ec:	2320      	movs	r3, #32
     2ee:	466a      	mov	r2, sp
     2f0:	54d5      	strb	r5, [r2, r3]
	
	spi_init(&module, SERCOM1, &cfg);
     2f2:	4e11      	ldr	r6, [pc, #68]	; (338 <spi_slave_hardware_init+0x90>)
     2f4:	4911      	ldr	r1, [pc, #68]	; (33c <spi_slave_hardware_init+0x94>)
     2f6:	0030      	movs	r0, r6
     2f8:	4b11      	ldr	r3, [pc, #68]	; (340 <spi_slave_hardware_init+0x98>)
     2fa:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
     2fc:	6834      	ldr	r4, [r6, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     2fe:	0020      	movs	r0, r4
     300:	4b10      	ldr	r3, [pc, #64]	; (344 <spi_slave_hardware_init+0x9c>)
     302:	4798      	blx	r3
     304:	231f      	movs	r3, #31
     306:	4018      	ands	r0, r3
     308:	4085      	lsls	r5, r0
     30a:	4b0f      	ldr	r3, [pc, #60]	; (348 <spi_slave_hardware_init+0xa0>)
     30c:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     30e:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
     310:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
     312:	2b00      	cmp	r3, #0
     314:	d1fc      	bne.n	310 <spi_slave_hardware_init+0x68>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     316:	6823      	ldr	r3, [r4, #0]
     318:	2202      	movs	r2, #2
     31a:	4313      	orrs	r3, r2
     31c:	6023      	str	r3, [r4, #0]

	spi_enable(&module);
}
     31e:	b00e      	add	sp, #56	; 0x38
     320:	bd70      	pop	{r4, r5, r6, pc}
     322:	46c0      	nop			; (mov r8, r8)
     324:	00001b8d 	.word	0x00001b8d
     328:	00100002 	.word	0x00100002
     32c:	00110002 	.word	0x00110002
     330:	00120002 	.word	0x00120002
     334:	00130002 	.word	0x00130002
     338:	200000bc 	.word	0x200000bc
     33c:	42000c00 	.word	0x42000c00
     340:	00000d05 	.word	0x00000d05
     344:	000011f5 	.word	0x000011f5
     348:	e000e100 	.word	0xe000e100

0000034c <spi_slave_init>:

void spi_slave_init(void)
{
     34c:	b510      	push	{r4, lr}
	spi_slave_hardware_init();
     34e:	4b04      	ldr	r3, [pc, #16]	; (360 <spi_slave_init+0x14>)
     350:	4798      	blx	r3
	
	spi_register_callback(&module, spi_on_recv_callback, SPI_CALLBACK_BUFFER_RECEIVED);
     352:	2201      	movs	r2, #1
     354:	4903      	ldr	r1, [pc, #12]	; (364 <spi_slave_init+0x18>)
     356:	4804      	ldr	r0, [pc, #16]	; (368 <spi_slave_init+0x1c>)
     358:	4b04      	ldr	r3, [pc, #16]	; (36c <spi_slave_init+0x20>)
     35a:	4798      	blx	r3
}
     35c:	bd10      	pop	{r4, pc}
     35e:	46c0      	nop			; (mov r8, r8)
     360:	000002a9 	.word	0x000002a9
     364:	0000025d 	.word	0x0000025d
     368:	200000bc 	.word	0x200000bc
     36c:	00000f19 	.word	0x00000f19

00000370 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     370:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     372:	4b08      	ldr	r3, [pc, #32]	; (394 <delay_cycles_ms+0x24>)
     374:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     376:	4a08      	ldr	r2, [pc, #32]	; (398 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     378:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     37a:	2180      	movs	r1, #128	; 0x80
     37c:	0249      	lsls	r1, r1, #9
	while (n--) {
     37e:	3801      	subs	r0, #1
     380:	d307      	bcc.n	392 <delay_cycles_ms+0x22>
	if (n > 0) {
     382:	2c00      	cmp	r4, #0
     384:	d0fb      	beq.n	37e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     386:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     388:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     38a:	6813      	ldr	r3, [r2, #0]
     38c:	420b      	tst	r3, r1
     38e:	d0fc      	beq.n	38a <delay_cycles_ms+0x1a>
     390:	e7f5      	b.n	37e <delay_cycles_ms+0xe>
	}
}
     392:	bd30      	pop	{r4, r5, pc}
     394:	20000000 	.word	0x20000000
     398:	e000e010 	.word	0xe000e010

0000039c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     39c:	b5f0      	push	{r4, r5, r6, r7, lr}
     39e:	46c6      	mov	lr, r8
     3a0:	b500      	push	{lr}
     3a2:	000c      	movs	r4, r1
     3a4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     3a6:	2800      	cmp	r0, #0
     3a8:	d10f      	bne.n	3ca <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
     3aa:	2a00      	cmp	r2, #0
     3ac:	dd11      	ble.n	3d2 <_read+0x36>
     3ae:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     3b0:	4e09      	ldr	r6, [pc, #36]	; (3d8 <_read+0x3c>)
     3b2:	4d0a      	ldr	r5, [pc, #40]	; (3dc <_read+0x40>)
     3b4:	6830      	ldr	r0, [r6, #0]
     3b6:	0021      	movs	r1, r4
     3b8:	682b      	ldr	r3, [r5, #0]
     3ba:	4798      	blx	r3
		ptr++;
     3bc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
     3be:	42bc      	cmp	r4, r7
     3c0:	d1f8      	bne.n	3b4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
     3c2:	4640      	mov	r0, r8
     3c4:	bc04      	pop	{r2}
     3c6:	4690      	mov	r8, r2
     3c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
     3ca:	2301      	movs	r3, #1
     3cc:	425b      	negs	r3, r3
     3ce:	4698      	mov	r8, r3
     3d0:	e7f7      	b.n	3c2 <_read+0x26>
	for (; len > 0; --len) {
     3d2:	4680      	mov	r8, r0
     3d4:	e7f5      	b.n	3c2 <_read+0x26>
     3d6:	46c0      	nop			; (mov r8, r8)
     3d8:	20000168 	.word	0x20000168
     3dc:	20000160 	.word	0x20000160

000003e0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3e2:	46c6      	mov	lr, r8
     3e4:	b500      	push	{lr}
     3e6:	000e      	movs	r6, r1
     3e8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     3ea:	3801      	subs	r0, #1
     3ec:	2802      	cmp	r0, #2
     3ee:	d810      	bhi.n	412 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     3f0:	2a00      	cmp	r2, #0
     3f2:	d011      	beq.n	418 <_write+0x38>
     3f4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     3f6:	4b0c      	ldr	r3, [pc, #48]	; (428 <_write+0x48>)
     3f8:	4698      	mov	r8, r3
     3fa:	4f0c      	ldr	r7, [pc, #48]	; (42c <_write+0x4c>)
     3fc:	4643      	mov	r3, r8
     3fe:	6818      	ldr	r0, [r3, #0]
     400:	5d31      	ldrb	r1, [r6, r4]
     402:	683b      	ldr	r3, [r7, #0]
     404:	4798      	blx	r3
     406:	2800      	cmp	r0, #0
     408:	db08      	blt.n	41c <_write+0x3c>
			return -1;
		}
		++nChars;
     40a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
     40c:	42a5      	cmp	r5, r4
     40e:	d1f5      	bne.n	3fc <_write+0x1c>
     410:	e006      	b.n	420 <_write+0x40>
		return -1;
     412:	2401      	movs	r4, #1
     414:	4264      	negs	r4, r4
     416:	e003      	b.n	420 <_write+0x40>
	for (; len != 0; --len) {
     418:	0014      	movs	r4, r2
     41a:	e001      	b.n	420 <_write+0x40>
			return -1;
     41c:	2401      	movs	r4, #1
     41e:	4264      	negs	r4, r4
	}
	return nChars;
}
     420:	0020      	movs	r0, r4
     422:	bc04      	pop	{r2}
     424:	4690      	mov	r8, r2
     426:	bdf0      	pop	{r4, r5, r6, r7, pc}
     428:	20000168 	.word	0x20000168
     42c:	20000164 	.word	0x20000164

00000430 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     430:	b5f0      	push	{r4, r5, r6, r7, lr}
     432:	46de      	mov	lr, fp
     434:	4657      	mov	r7, sl
     436:	464e      	mov	r6, r9
     438:	4645      	mov	r5, r8
     43a:	b5e0      	push	{r5, r6, r7, lr}
     43c:	b087      	sub	sp, #28
     43e:	4680      	mov	r8, r0
     440:	9104      	str	r1, [sp, #16]
     442:	0016      	movs	r6, r2
     444:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     446:	2200      	movs	r2, #0
     448:	2300      	movs	r3, #0
     44a:	2100      	movs	r1, #0
     44c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     44e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     450:	2001      	movs	r0, #1
     452:	0021      	movs	r1, r4
     454:	9600      	str	r6, [sp, #0]
     456:	9701      	str	r7, [sp, #4]
     458:	465c      	mov	r4, fp
     45a:	9403      	str	r4, [sp, #12]
     45c:	4644      	mov	r4, r8
     45e:	9405      	str	r4, [sp, #20]
     460:	e013      	b.n	48a <long_division+0x5a>
     462:	2420      	movs	r4, #32
     464:	1a64      	subs	r4, r4, r1
     466:	0005      	movs	r5, r0
     468:	40e5      	lsrs	r5, r4
     46a:	46a8      	mov	r8, r5
     46c:	e014      	b.n	498 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     46e:	9c00      	ldr	r4, [sp, #0]
     470:	9d01      	ldr	r5, [sp, #4]
     472:	1b12      	subs	r2, r2, r4
     474:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     476:	465c      	mov	r4, fp
     478:	464d      	mov	r5, r9
     47a:	432c      	orrs	r4, r5
     47c:	46a3      	mov	fp, r4
     47e:	9c03      	ldr	r4, [sp, #12]
     480:	4645      	mov	r5, r8
     482:	432c      	orrs	r4, r5
     484:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     486:	3901      	subs	r1, #1
     488:	d325      	bcc.n	4d6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     48a:	2420      	movs	r4, #32
     48c:	4264      	negs	r4, r4
     48e:	190c      	adds	r4, r1, r4
     490:	d4e7      	bmi.n	462 <long_division+0x32>
     492:	0005      	movs	r5, r0
     494:	40a5      	lsls	r5, r4
     496:	46a8      	mov	r8, r5
     498:	0004      	movs	r4, r0
     49a:	408c      	lsls	r4, r1
     49c:	46a1      	mov	r9, r4
		r = r << 1;
     49e:	1892      	adds	r2, r2, r2
     4a0:	415b      	adcs	r3, r3
     4a2:	0014      	movs	r4, r2
     4a4:	001d      	movs	r5, r3
		if (n & bit_shift) {
     4a6:	9e05      	ldr	r6, [sp, #20]
     4a8:	464f      	mov	r7, r9
     4aa:	403e      	ands	r6, r7
     4ac:	46b4      	mov	ip, r6
     4ae:	9e04      	ldr	r6, [sp, #16]
     4b0:	4647      	mov	r7, r8
     4b2:	403e      	ands	r6, r7
     4b4:	46b2      	mov	sl, r6
     4b6:	4666      	mov	r6, ip
     4b8:	4657      	mov	r7, sl
     4ba:	433e      	orrs	r6, r7
     4bc:	d003      	beq.n	4c6 <long_division+0x96>
			r |= 0x01;
     4be:	0006      	movs	r6, r0
     4c0:	4326      	orrs	r6, r4
     4c2:	0032      	movs	r2, r6
     4c4:	002b      	movs	r3, r5
		if (r >= d) {
     4c6:	9c00      	ldr	r4, [sp, #0]
     4c8:	9d01      	ldr	r5, [sp, #4]
     4ca:	429d      	cmp	r5, r3
     4cc:	d8db      	bhi.n	486 <long_division+0x56>
     4ce:	d1ce      	bne.n	46e <long_division+0x3e>
     4d0:	4294      	cmp	r4, r2
     4d2:	d8d8      	bhi.n	486 <long_division+0x56>
     4d4:	e7cb      	b.n	46e <long_division+0x3e>
     4d6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     4d8:	4658      	mov	r0, fp
     4da:	0019      	movs	r1, r3
     4dc:	b007      	add	sp, #28
     4de:	bc3c      	pop	{r2, r3, r4, r5}
     4e0:	4690      	mov	r8, r2
     4e2:	4699      	mov	r9, r3
     4e4:	46a2      	mov	sl, r4
     4e6:	46ab      	mov	fp, r5
     4e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000004ea <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     4ea:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     4ec:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4ee:	2340      	movs	r3, #64	; 0x40
     4f0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     4f2:	4281      	cmp	r1, r0
     4f4:	d202      	bcs.n	4fc <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     4f6:	0018      	movs	r0, r3
     4f8:	bd10      	pop	{r4, pc}
		baud_calculated++;
     4fa:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     4fc:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     4fe:	1c63      	adds	r3, r4, #1
     500:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     502:	4288      	cmp	r0, r1
     504:	d9f9      	bls.n	4fa <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     506:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     508:	2cff      	cmp	r4, #255	; 0xff
     50a:	d8f4      	bhi.n	4f6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     50c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     50e:	2300      	movs	r3, #0
     510:	e7f1      	b.n	4f6 <_sercom_get_sync_baud_val+0xc>
	...

00000514 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     514:	b5f0      	push	{r4, r5, r6, r7, lr}
     516:	b083      	sub	sp, #12
     518:	000f      	movs	r7, r1
     51a:	0016      	movs	r6, r2
     51c:	aa08      	add	r2, sp, #32
     51e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     520:	0004      	movs	r4, r0
     522:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     524:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     526:	42bc      	cmp	r4, r7
     528:	d902      	bls.n	530 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     52a:	0010      	movs	r0, r2
     52c:	b003      	add	sp, #12
     52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     530:	2b00      	cmp	r3, #0
     532:	d114      	bne.n	55e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     534:	0002      	movs	r2, r0
     536:	0008      	movs	r0, r1
     538:	2100      	movs	r1, #0
     53a:	4c19      	ldr	r4, [pc, #100]	; (5a0 <_sercom_get_async_baud_val+0x8c>)
     53c:	47a0      	blx	r4
     53e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     540:	003a      	movs	r2, r7
     542:	2300      	movs	r3, #0
     544:	2000      	movs	r0, #0
     546:	4c17      	ldr	r4, [pc, #92]	; (5a4 <_sercom_get_async_baud_val+0x90>)
     548:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     54a:	2200      	movs	r2, #0
     54c:	2301      	movs	r3, #1
     54e:	1a12      	subs	r2, r2, r0
     550:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     552:	0c12      	lsrs	r2, r2, #16
     554:	041b      	lsls	r3, r3, #16
     556:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     558:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     55a:	2200      	movs	r2, #0
     55c:	e7e5      	b.n	52a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     55e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     560:	2b01      	cmp	r3, #1
     562:	d1f9      	bne.n	558 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     564:	000a      	movs	r2, r1
     566:	2300      	movs	r3, #0
     568:	2100      	movs	r1, #0
     56a:	4c0d      	ldr	r4, [pc, #52]	; (5a0 <_sercom_get_async_baud_val+0x8c>)
     56c:	47a0      	blx	r4
     56e:	0002      	movs	r2, r0
     570:	000b      	movs	r3, r1
     572:	9200      	str	r2, [sp, #0]
     574:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     576:	0038      	movs	r0, r7
     578:	2100      	movs	r1, #0
     57a:	4c0a      	ldr	r4, [pc, #40]	; (5a4 <_sercom_get_async_baud_val+0x90>)
     57c:	47a0      	blx	r4
     57e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     580:	2380      	movs	r3, #128	; 0x80
     582:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     584:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     586:	4298      	cmp	r0, r3
     588:	d8cf      	bhi.n	52a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     58a:	0f79      	lsrs	r1, r7, #29
     58c:	00f8      	lsls	r0, r7, #3
     58e:	9a00      	ldr	r2, [sp, #0]
     590:	9b01      	ldr	r3, [sp, #4]
     592:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     594:	00ea      	lsls	r2, r5, #3
     596:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     598:	b2d2      	uxtb	r2, r2
     59a:	0352      	lsls	r2, r2, #13
     59c:	432a      	orrs	r2, r5
     59e:	e7db      	b.n	558 <_sercom_get_async_baud_val+0x44>
     5a0:	00001af1 	.word	0x00001af1
     5a4:	00000431 	.word	0x00000431

000005a8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     5a8:	b510      	push	{r4, lr}
     5aa:	b082      	sub	sp, #8
     5ac:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     5ae:	4b0e      	ldr	r3, [pc, #56]	; (5e8 <sercom_set_gclk_generator+0x40>)
     5b0:	781b      	ldrb	r3, [r3, #0]
     5b2:	2b00      	cmp	r3, #0
     5b4:	d007      	beq.n	5c6 <sercom_set_gclk_generator+0x1e>
     5b6:	2900      	cmp	r1, #0
     5b8:	d105      	bne.n	5c6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     5ba:	4b0b      	ldr	r3, [pc, #44]	; (5e8 <sercom_set_gclk_generator+0x40>)
     5bc:	785b      	ldrb	r3, [r3, #1]
     5be:	4283      	cmp	r3, r0
     5c0:	d010      	beq.n	5e4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     5c2:	201d      	movs	r0, #29
     5c4:	e00c      	b.n	5e0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     5c6:	a901      	add	r1, sp, #4
     5c8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     5ca:	2013      	movs	r0, #19
     5cc:	4b07      	ldr	r3, [pc, #28]	; (5ec <sercom_set_gclk_generator+0x44>)
     5ce:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     5d0:	2013      	movs	r0, #19
     5d2:	4b07      	ldr	r3, [pc, #28]	; (5f0 <sercom_set_gclk_generator+0x48>)
     5d4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     5d6:	4b04      	ldr	r3, [pc, #16]	; (5e8 <sercom_set_gclk_generator+0x40>)
     5d8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     5da:	2201      	movs	r2, #1
     5dc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     5de:	2000      	movs	r0, #0
}
     5e0:	b002      	add	sp, #8
     5e2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     5e4:	2000      	movs	r0, #0
     5e6:	e7fb      	b.n	5e0 <sercom_set_gclk_generator+0x38>
     5e8:	20000118 	.word	0x20000118
     5ec:	00001741 	.word	0x00001741
     5f0:	000016b5 	.word	0x000016b5

000005f4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     5f4:	4b40      	ldr	r3, [pc, #256]	; (6f8 <_sercom_get_default_pad+0x104>)
     5f6:	4298      	cmp	r0, r3
     5f8:	d031      	beq.n	65e <_sercom_get_default_pad+0x6a>
     5fa:	d90a      	bls.n	612 <_sercom_get_default_pad+0x1e>
     5fc:	4b3f      	ldr	r3, [pc, #252]	; (6fc <_sercom_get_default_pad+0x108>)
     5fe:	4298      	cmp	r0, r3
     600:	d04d      	beq.n	69e <_sercom_get_default_pad+0xaa>
     602:	4b3f      	ldr	r3, [pc, #252]	; (700 <_sercom_get_default_pad+0x10c>)
     604:	4298      	cmp	r0, r3
     606:	d05a      	beq.n	6be <_sercom_get_default_pad+0xca>
     608:	4b3e      	ldr	r3, [pc, #248]	; (704 <_sercom_get_default_pad+0x110>)
     60a:	4298      	cmp	r0, r3
     60c:	d037      	beq.n	67e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     60e:	2000      	movs	r0, #0
}
     610:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     612:	4b3d      	ldr	r3, [pc, #244]	; (708 <_sercom_get_default_pad+0x114>)
     614:	4298      	cmp	r0, r3
     616:	d00c      	beq.n	632 <_sercom_get_default_pad+0x3e>
     618:	4b3c      	ldr	r3, [pc, #240]	; (70c <_sercom_get_default_pad+0x118>)
     61a:	4298      	cmp	r0, r3
     61c:	d1f7      	bne.n	60e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     61e:	2901      	cmp	r1, #1
     620:	d017      	beq.n	652 <_sercom_get_default_pad+0x5e>
     622:	2900      	cmp	r1, #0
     624:	d05d      	beq.n	6e2 <_sercom_get_default_pad+0xee>
     626:	2902      	cmp	r1, #2
     628:	d015      	beq.n	656 <_sercom_get_default_pad+0x62>
     62a:	2903      	cmp	r1, #3
     62c:	d015      	beq.n	65a <_sercom_get_default_pad+0x66>
	return 0;
     62e:	2000      	movs	r0, #0
     630:	e7ee      	b.n	610 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     632:	2901      	cmp	r1, #1
     634:	d007      	beq.n	646 <_sercom_get_default_pad+0x52>
     636:	2900      	cmp	r1, #0
     638:	d051      	beq.n	6de <_sercom_get_default_pad+0xea>
     63a:	2902      	cmp	r1, #2
     63c:	d005      	beq.n	64a <_sercom_get_default_pad+0x56>
     63e:	2903      	cmp	r1, #3
     640:	d005      	beq.n	64e <_sercom_get_default_pad+0x5a>
	return 0;
     642:	2000      	movs	r0, #0
     644:	e7e4      	b.n	610 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     646:	4832      	ldr	r0, [pc, #200]	; (710 <_sercom_get_default_pad+0x11c>)
     648:	e7e2      	b.n	610 <_sercom_get_default_pad+0x1c>
     64a:	4832      	ldr	r0, [pc, #200]	; (714 <_sercom_get_default_pad+0x120>)
     64c:	e7e0      	b.n	610 <_sercom_get_default_pad+0x1c>
     64e:	4832      	ldr	r0, [pc, #200]	; (718 <_sercom_get_default_pad+0x124>)
     650:	e7de      	b.n	610 <_sercom_get_default_pad+0x1c>
     652:	4832      	ldr	r0, [pc, #200]	; (71c <_sercom_get_default_pad+0x128>)
     654:	e7dc      	b.n	610 <_sercom_get_default_pad+0x1c>
     656:	4832      	ldr	r0, [pc, #200]	; (720 <_sercom_get_default_pad+0x12c>)
     658:	e7da      	b.n	610 <_sercom_get_default_pad+0x1c>
     65a:	4832      	ldr	r0, [pc, #200]	; (724 <_sercom_get_default_pad+0x130>)
     65c:	e7d8      	b.n	610 <_sercom_get_default_pad+0x1c>
     65e:	2901      	cmp	r1, #1
     660:	d007      	beq.n	672 <_sercom_get_default_pad+0x7e>
     662:	2900      	cmp	r1, #0
     664:	d03f      	beq.n	6e6 <_sercom_get_default_pad+0xf2>
     666:	2902      	cmp	r1, #2
     668:	d005      	beq.n	676 <_sercom_get_default_pad+0x82>
     66a:	2903      	cmp	r1, #3
     66c:	d005      	beq.n	67a <_sercom_get_default_pad+0x86>
	return 0;
     66e:	2000      	movs	r0, #0
     670:	e7ce      	b.n	610 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     672:	482d      	ldr	r0, [pc, #180]	; (728 <_sercom_get_default_pad+0x134>)
     674:	e7cc      	b.n	610 <_sercom_get_default_pad+0x1c>
     676:	482d      	ldr	r0, [pc, #180]	; (72c <_sercom_get_default_pad+0x138>)
     678:	e7ca      	b.n	610 <_sercom_get_default_pad+0x1c>
     67a:	482d      	ldr	r0, [pc, #180]	; (730 <_sercom_get_default_pad+0x13c>)
     67c:	e7c8      	b.n	610 <_sercom_get_default_pad+0x1c>
     67e:	2901      	cmp	r1, #1
     680:	d007      	beq.n	692 <_sercom_get_default_pad+0x9e>
     682:	2900      	cmp	r1, #0
     684:	d031      	beq.n	6ea <_sercom_get_default_pad+0xf6>
     686:	2902      	cmp	r1, #2
     688:	d005      	beq.n	696 <_sercom_get_default_pad+0xa2>
     68a:	2903      	cmp	r1, #3
     68c:	d005      	beq.n	69a <_sercom_get_default_pad+0xa6>
	return 0;
     68e:	2000      	movs	r0, #0
     690:	e7be      	b.n	610 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     692:	4828      	ldr	r0, [pc, #160]	; (734 <_sercom_get_default_pad+0x140>)
     694:	e7bc      	b.n	610 <_sercom_get_default_pad+0x1c>
     696:	4828      	ldr	r0, [pc, #160]	; (738 <_sercom_get_default_pad+0x144>)
     698:	e7ba      	b.n	610 <_sercom_get_default_pad+0x1c>
     69a:	4828      	ldr	r0, [pc, #160]	; (73c <_sercom_get_default_pad+0x148>)
     69c:	e7b8      	b.n	610 <_sercom_get_default_pad+0x1c>
     69e:	2901      	cmp	r1, #1
     6a0:	d007      	beq.n	6b2 <_sercom_get_default_pad+0xbe>
     6a2:	2900      	cmp	r1, #0
     6a4:	d023      	beq.n	6ee <_sercom_get_default_pad+0xfa>
     6a6:	2902      	cmp	r1, #2
     6a8:	d005      	beq.n	6b6 <_sercom_get_default_pad+0xc2>
     6aa:	2903      	cmp	r1, #3
     6ac:	d005      	beq.n	6ba <_sercom_get_default_pad+0xc6>
	return 0;
     6ae:	2000      	movs	r0, #0
     6b0:	e7ae      	b.n	610 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6b2:	4823      	ldr	r0, [pc, #140]	; (740 <_sercom_get_default_pad+0x14c>)
     6b4:	e7ac      	b.n	610 <_sercom_get_default_pad+0x1c>
     6b6:	4823      	ldr	r0, [pc, #140]	; (744 <_sercom_get_default_pad+0x150>)
     6b8:	e7aa      	b.n	610 <_sercom_get_default_pad+0x1c>
     6ba:	4823      	ldr	r0, [pc, #140]	; (748 <_sercom_get_default_pad+0x154>)
     6bc:	e7a8      	b.n	610 <_sercom_get_default_pad+0x1c>
     6be:	2901      	cmp	r1, #1
     6c0:	d007      	beq.n	6d2 <_sercom_get_default_pad+0xde>
     6c2:	2900      	cmp	r1, #0
     6c4:	d015      	beq.n	6f2 <_sercom_get_default_pad+0xfe>
     6c6:	2902      	cmp	r1, #2
     6c8:	d005      	beq.n	6d6 <_sercom_get_default_pad+0xe2>
     6ca:	2903      	cmp	r1, #3
     6cc:	d005      	beq.n	6da <_sercom_get_default_pad+0xe6>
	return 0;
     6ce:	2000      	movs	r0, #0
     6d0:	e79e      	b.n	610 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6d2:	481e      	ldr	r0, [pc, #120]	; (74c <_sercom_get_default_pad+0x158>)
     6d4:	e79c      	b.n	610 <_sercom_get_default_pad+0x1c>
     6d6:	481e      	ldr	r0, [pc, #120]	; (750 <_sercom_get_default_pad+0x15c>)
     6d8:	e79a      	b.n	610 <_sercom_get_default_pad+0x1c>
     6da:	481e      	ldr	r0, [pc, #120]	; (754 <_sercom_get_default_pad+0x160>)
     6dc:	e798      	b.n	610 <_sercom_get_default_pad+0x1c>
     6de:	481e      	ldr	r0, [pc, #120]	; (758 <_sercom_get_default_pad+0x164>)
     6e0:	e796      	b.n	610 <_sercom_get_default_pad+0x1c>
     6e2:	2003      	movs	r0, #3
     6e4:	e794      	b.n	610 <_sercom_get_default_pad+0x1c>
     6e6:	481d      	ldr	r0, [pc, #116]	; (75c <_sercom_get_default_pad+0x168>)
     6e8:	e792      	b.n	610 <_sercom_get_default_pad+0x1c>
     6ea:	481d      	ldr	r0, [pc, #116]	; (760 <_sercom_get_default_pad+0x16c>)
     6ec:	e790      	b.n	610 <_sercom_get_default_pad+0x1c>
     6ee:	481d      	ldr	r0, [pc, #116]	; (764 <_sercom_get_default_pad+0x170>)
     6f0:	e78e      	b.n	610 <_sercom_get_default_pad+0x1c>
     6f2:	481d      	ldr	r0, [pc, #116]	; (768 <_sercom_get_default_pad+0x174>)
     6f4:	e78c      	b.n	610 <_sercom_get_default_pad+0x1c>
     6f6:	46c0      	nop			; (mov r8, r8)
     6f8:	42001000 	.word	0x42001000
     6fc:	42001800 	.word	0x42001800
     700:	42001c00 	.word	0x42001c00
     704:	42001400 	.word	0x42001400
     708:	42000800 	.word	0x42000800
     70c:	42000c00 	.word	0x42000c00
     710:	00050003 	.word	0x00050003
     714:	00060003 	.word	0x00060003
     718:	00070003 	.word	0x00070003
     71c:	00010003 	.word	0x00010003
     720:	001e0003 	.word	0x001e0003
     724:	001f0003 	.word	0x001f0003
     728:	00090003 	.word	0x00090003
     72c:	000a0003 	.word	0x000a0003
     730:	000b0003 	.word	0x000b0003
     734:	00110003 	.word	0x00110003
     738:	00120003 	.word	0x00120003
     73c:	00130003 	.word	0x00130003
     740:	000d0003 	.word	0x000d0003
     744:	000e0003 	.word	0x000e0003
     748:	000f0003 	.word	0x000f0003
     74c:	00170003 	.word	0x00170003
     750:	00180003 	.word	0x00180003
     754:	00190003 	.word	0x00190003
     758:	00040003 	.word	0x00040003
     75c:	00080003 	.word	0x00080003
     760:	00100003 	.word	0x00100003
     764:	000c0003 	.word	0x000c0003
     768:	00160003 	.word	0x00160003

0000076c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     76c:	b530      	push	{r4, r5, lr}
     76e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     770:	4b0b      	ldr	r3, [pc, #44]	; (7a0 <_sercom_get_sercom_inst_index+0x34>)
     772:	466a      	mov	r2, sp
     774:	cb32      	ldmia	r3!, {r1, r4, r5}
     776:	c232      	stmia	r2!, {r1, r4, r5}
     778:	cb32      	ldmia	r3!, {r1, r4, r5}
     77a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     77c:	9b00      	ldr	r3, [sp, #0]
     77e:	4283      	cmp	r3, r0
     780:	d00b      	beq.n	79a <_sercom_get_sercom_inst_index+0x2e>
     782:	2301      	movs	r3, #1
     784:	009a      	lsls	r2, r3, #2
     786:	4669      	mov	r1, sp
     788:	5852      	ldr	r2, [r2, r1]
     78a:	4282      	cmp	r2, r0
     78c:	d006      	beq.n	79c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     78e:	3301      	adds	r3, #1
     790:	2b06      	cmp	r3, #6
     792:	d1f7      	bne.n	784 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     794:	2000      	movs	r0, #0
}
     796:	b007      	add	sp, #28
     798:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     79a:	2300      	movs	r3, #0
			return i;
     79c:	b2d8      	uxtb	r0, r3
     79e:	e7fa      	b.n	796 <_sercom_get_sercom_inst_index+0x2a>
     7a0:	00002b9c 	.word	0x00002b9c

000007a4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7a6:	46de      	mov	lr, fp
     7a8:	4657      	mov	r7, sl
     7aa:	464e      	mov	r6, r9
     7ac:	4645      	mov	r5, r8
     7ae:	b5e0      	push	{r5, r6, r7, lr}
     7b0:	b091      	sub	sp, #68	; 0x44
     7b2:	0005      	movs	r5, r0
     7b4:	000c      	movs	r4, r1
     7b6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     7b8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     7ba:	0008      	movs	r0, r1
     7bc:	4bba      	ldr	r3, [pc, #744]	; (aa8 <usart_init+0x304>)
     7be:	4798      	blx	r3
     7c0:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     7c2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     7c4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     7c6:	07db      	lsls	r3, r3, #31
     7c8:	d506      	bpl.n	7d8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     7ca:	b011      	add	sp, #68	; 0x44
     7cc:	bc3c      	pop	{r2, r3, r4, r5}
     7ce:	4690      	mov	r8, r2
     7d0:	4699      	mov	r9, r3
     7d2:	46a2      	mov	sl, r4
     7d4:	46ab      	mov	fp, r5
     7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     7d8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     7da:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     7dc:	079b      	lsls	r3, r3, #30
     7de:	d4f4      	bmi.n	7ca <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     7e0:	49b2      	ldr	r1, [pc, #712]	; (aac <usart_init+0x308>)
     7e2:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     7e4:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     7e6:	2301      	movs	r3, #1
     7e8:	40bb      	lsls	r3, r7
     7ea:	4303      	orrs	r3, r0
     7ec:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     7ee:	a90f      	add	r1, sp, #60	; 0x3c
     7f0:	272d      	movs	r7, #45	; 0x2d
     7f2:	5df3      	ldrb	r3, [r6, r7]
     7f4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     7f6:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     7f8:	b2d3      	uxtb	r3, r2
     7fa:	9302      	str	r3, [sp, #8]
     7fc:	0018      	movs	r0, r3
     7fe:	4bac      	ldr	r3, [pc, #688]	; (ab0 <usart_init+0x30c>)
     800:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     802:	9802      	ldr	r0, [sp, #8]
     804:	4bab      	ldr	r3, [pc, #684]	; (ab4 <usart_init+0x310>)
     806:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     808:	5df0      	ldrb	r0, [r6, r7]
     80a:	2100      	movs	r1, #0
     80c:	4baa      	ldr	r3, [pc, #680]	; (ab8 <usart_init+0x314>)
     80e:	4798      	blx	r3
	module->character_size = config->character_size;
     810:	7af3      	ldrb	r3, [r6, #11]
     812:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     814:	2324      	movs	r3, #36	; 0x24
     816:	5cf3      	ldrb	r3, [r6, r3]
     818:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     81a:	2325      	movs	r3, #37	; 0x25
     81c:	5cf3      	ldrb	r3, [r6, r3]
     81e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     820:	7ef3      	ldrb	r3, [r6, #27]
     822:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     824:	7f33      	ldrb	r3, [r6, #28]
     826:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     828:	682b      	ldr	r3, [r5, #0]
     82a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     82c:	0018      	movs	r0, r3
     82e:	4b9e      	ldr	r3, [pc, #632]	; (aa8 <usart_init+0x304>)
     830:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     832:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     834:	2200      	movs	r2, #0
     836:	230e      	movs	r3, #14
     838:	a906      	add	r1, sp, #24
     83a:	468c      	mov	ip, r1
     83c:	4463      	add	r3, ip
     83e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     840:	8a32      	ldrh	r2, [r6, #16]
     842:	9202      	str	r2, [sp, #8]
     844:	2380      	movs	r3, #128	; 0x80
     846:	01db      	lsls	r3, r3, #7
     848:	429a      	cmp	r2, r3
     84a:	d100      	bne.n	84e <usart_init+0xaa>
     84c:	e09a      	b.n	984 <usart_init+0x1e0>
     84e:	d90f      	bls.n	870 <usart_init+0xcc>
     850:	23c0      	movs	r3, #192	; 0xc0
     852:	01db      	lsls	r3, r3, #7
     854:	9a02      	ldr	r2, [sp, #8]
     856:	429a      	cmp	r2, r3
     858:	d100      	bne.n	85c <usart_init+0xb8>
     85a:	e08e      	b.n	97a <usart_init+0x1d6>
     85c:	2380      	movs	r3, #128	; 0x80
     85e:	021b      	lsls	r3, r3, #8
     860:	429a      	cmp	r2, r3
     862:	d000      	beq.n	866 <usart_init+0xc2>
     864:	e11b      	b.n	a9e <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     866:	2303      	movs	r3, #3
     868:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     86a:	2300      	movs	r3, #0
     86c:	9307      	str	r3, [sp, #28]
     86e:	e008      	b.n	882 <usart_init+0xde>
	switch (config->sample_rate) {
     870:	2380      	movs	r3, #128	; 0x80
     872:	019b      	lsls	r3, r3, #6
     874:	429a      	cmp	r2, r3
     876:	d000      	beq.n	87a <usart_init+0xd6>
     878:	e111      	b.n	a9e <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     87a:	2310      	movs	r3, #16
     87c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     87e:	3b0f      	subs	r3, #15
     880:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     882:	6833      	ldr	r3, [r6, #0]
     884:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     886:	68f3      	ldr	r3, [r6, #12]
     888:	469b      	mov	fp, r3
		config->sample_adjustment |
     88a:	6973      	ldr	r3, [r6, #20]
     88c:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     88e:	7e33      	ldrb	r3, [r6, #24]
     890:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     892:	2326      	movs	r3, #38	; 0x26
     894:	5cf3      	ldrb	r3, [r6, r3]
     896:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     898:	6873      	ldr	r3, [r6, #4]
     89a:	4699      	mov	r9, r3
	switch (transfer_mode)
     89c:	2b00      	cmp	r3, #0
     89e:	d100      	bne.n	8a2 <usart_init+0xfe>
     8a0:	e09c      	b.n	9dc <usart_init+0x238>
     8a2:	2380      	movs	r3, #128	; 0x80
     8a4:	055b      	lsls	r3, r3, #21
     8a6:	4599      	cmp	r9, r3
     8a8:	d100      	bne.n	8ac <usart_init+0x108>
     8aa:	e080      	b.n	9ae <usart_init+0x20a>
	if(config->encoding_format_enable) {
     8ac:	7e73      	ldrb	r3, [r6, #25]
     8ae:	2b00      	cmp	r3, #0
     8b0:	d002      	beq.n	8b8 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     8b2:	7eb3      	ldrb	r3, [r6, #26]
     8b4:	4642      	mov	r2, r8
     8b6:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     8b8:	230e      	movs	r3, #14
     8ba:	aa06      	add	r2, sp, #24
     8bc:	4694      	mov	ip, r2
     8be:	4463      	add	r3, ip
     8c0:	881b      	ldrh	r3, [r3, #0]
     8c2:	4642      	mov	r2, r8
     8c4:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     8c6:	9b05      	ldr	r3, [sp, #20]
     8c8:	465a      	mov	r2, fp
     8ca:	4313      	orrs	r3, r2
     8cc:	9a03      	ldr	r2, [sp, #12]
     8ce:	4313      	orrs	r3, r2
     8d0:	464a      	mov	r2, r9
     8d2:	4313      	orrs	r3, r2
     8d4:	9f02      	ldr	r7, [sp, #8]
     8d6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     8d8:	9b04      	ldr	r3, [sp, #16]
     8da:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     8dc:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     8de:	4653      	mov	r3, sl
     8e0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     8e2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     8e4:	2327      	movs	r3, #39	; 0x27
     8e6:	5cf3      	ldrb	r3, [r6, r3]
     8e8:	2b00      	cmp	r3, #0
     8ea:	d101      	bne.n	8f0 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     8ec:	3304      	adds	r3, #4
     8ee:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     8f0:	7e73      	ldrb	r3, [r6, #25]
     8f2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     8f4:	7f32      	ldrb	r2, [r6, #28]
     8f6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     8f8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     8fa:	7f72      	ldrb	r2, [r6, #29]
     8fc:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     8fe:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     900:	2224      	movs	r2, #36	; 0x24
     902:	5cb2      	ldrb	r2, [r6, r2]
     904:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     906:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     908:	2225      	movs	r2, #37	; 0x25
     90a:	5cb2      	ldrb	r2, [r6, r2]
     90c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     90e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     910:	7ab1      	ldrb	r1, [r6, #10]
     912:	7af2      	ldrb	r2, [r6, #11]
     914:	4311      	orrs	r1, r2
     916:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     918:	8933      	ldrh	r3, [r6, #8]
     91a:	2bff      	cmp	r3, #255	; 0xff
     91c:	d100      	bne.n	920 <usart_init+0x17c>
     91e:	e081      	b.n	a24 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     920:	2280      	movs	r2, #128	; 0x80
     922:	0452      	lsls	r2, r2, #17
     924:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     926:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     928:	232c      	movs	r3, #44	; 0x2c
     92a:	5cf3      	ldrb	r3, [r6, r3]
     92c:	2b00      	cmp	r3, #0
     92e:	d103      	bne.n	938 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     930:	4b62      	ldr	r3, [pc, #392]	; (abc <usart_init+0x318>)
     932:	789b      	ldrb	r3, [r3, #2]
     934:	079b      	lsls	r3, r3, #30
     936:	d501      	bpl.n	93c <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     938:	2380      	movs	r3, #128	; 0x80
     93a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     93c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     93e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     940:	2b00      	cmp	r3, #0
     942:	d1fc      	bne.n	93e <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
     944:	4643      	mov	r3, r8
     946:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     948:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     94a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     94c:	2b00      	cmp	r3, #0
     94e:	d1fc      	bne.n	94a <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
     950:	4643      	mov	r3, r8
     952:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     954:	ab0e      	add	r3, sp, #56	; 0x38
     956:	2280      	movs	r2, #128	; 0x80
     958:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     95a:	2200      	movs	r2, #0
     95c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     95e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     960:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     962:	6b33      	ldr	r3, [r6, #48]	; 0x30
     964:	930a      	str	r3, [sp, #40]	; 0x28
     966:	6b73      	ldr	r3, [r6, #52]	; 0x34
     968:	930b      	str	r3, [sp, #44]	; 0x2c
     96a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     96c:	930c      	str	r3, [sp, #48]	; 0x30
     96e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     970:	9302      	str	r3, [sp, #8]
     972:	930d      	str	r3, [sp, #52]	; 0x34
     974:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     976:	ae0a      	add	r6, sp, #40	; 0x28
     978:	e063      	b.n	a42 <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     97a:	2308      	movs	r3, #8
     97c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     97e:	3b07      	subs	r3, #7
     980:	9307      	str	r3, [sp, #28]
     982:	e77e      	b.n	882 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     984:	6833      	ldr	r3, [r6, #0]
     986:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     988:	68f3      	ldr	r3, [r6, #12]
     98a:	469b      	mov	fp, r3
		config->sample_adjustment |
     98c:	6973      	ldr	r3, [r6, #20]
     98e:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     990:	7e33      	ldrb	r3, [r6, #24]
     992:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     994:	2326      	movs	r3, #38	; 0x26
     996:	5cf3      	ldrb	r3, [r6, r3]
     998:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     99a:	6873      	ldr	r3, [r6, #4]
     99c:	4699      	mov	r9, r3
	switch (transfer_mode)
     99e:	2b00      	cmp	r3, #0
     9a0:	d018      	beq.n	9d4 <usart_init+0x230>
     9a2:	2380      	movs	r3, #128	; 0x80
     9a4:	055b      	lsls	r3, r3, #21
     9a6:	4599      	cmp	r9, r3
     9a8:	d001      	beq.n	9ae <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
     9aa:	2000      	movs	r0, #0
     9ac:	e025      	b.n	9fa <usart_init+0x256>
			if (!config->use_external_clock) {
     9ae:	2327      	movs	r3, #39	; 0x27
     9b0:	5cf3      	ldrb	r3, [r6, r3]
     9b2:	2b00      	cmp	r3, #0
     9b4:	d000      	beq.n	9b8 <usart_init+0x214>
     9b6:	e779      	b.n	8ac <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     9b8:	6a33      	ldr	r3, [r6, #32]
     9ba:	001f      	movs	r7, r3
     9bc:	b2c0      	uxtb	r0, r0
     9be:	4b40      	ldr	r3, [pc, #256]	; (ac0 <usart_init+0x31c>)
     9c0:	4798      	blx	r3
     9c2:	0001      	movs	r1, r0
     9c4:	220e      	movs	r2, #14
     9c6:	ab06      	add	r3, sp, #24
     9c8:	469c      	mov	ip, r3
     9ca:	4462      	add	r2, ip
     9cc:	0038      	movs	r0, r7
     9ce:	4b3d      	ldr	r3, [pc, #244]	; (ac4 <usart_init+0x320>)
     9d0:	4798      	blx	r3
     9d2:	e012      	b.n	9fa <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     9d4:	2308      	movs	r3, #8
     9d6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     9d8:	2300      	movs	r3, #0
     9da:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     9dc:	2327      	movs	r3, #39	; 0x27
     9de:	5cf3      	ldrb	r3, [r6, r3]
     9e0:	2b00      	cmp	r3, #0
     9e2:	d00e      	beq.n	a02 <usart_init+0x25e>
				status_code =
     9e4:	9b06      	ldr	r3, [sp, #24]
     9e6:	9300      	str	r3, [sp, #0]
     9e8:	9b07      	ldr	r3, [sp, #28]
     9ea:	220e      	movs	r2, #14
     9ec:	a906      	add	r1, sp, #24
     9ee:	468c      	mov	ip, r1
     9f0:	4462      	add	r2, ip
     9f2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     9f4:	6a30      	ldr	r0, [r6, #32]
     9f6:	4f34      	ldr	r7, [pc, #208]	; (ac8 <usart_init+0x324>)
     9f8:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     9fa:	2800      	cmp	r0, #0
     9fc:	d000      	beq.n	a00 <usart_init+0x25c>
     9fe:	e6e4      	b.n	7ca <usart_init+0x26>
     a00:	e754      	b.n	8ac <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     a02:	6a33      	ldr	r3, [r6, #32]
     a04:	001f      	movs	r7, r3
     a06:	b2c0      	uxtb	r0, r0
     a08:	4b2d      	ldr	r3, [pc, #180]	; (ac0 <usart_init+0x31c>)
     a0a:	4798      	blx	r3
     a0c:	0001      	movs	r1, r0
				status_code =
     a0e:	9b06      	ldr	r3, [sp, #24]
     a10:	9300      	str	r3, [sp, #0]
     a12:	9b07      	ldr	r3, [sp, #28]
     a14:	220e      	movs	r2, #14
     a16:	a806      	add	r0, sp, #24
     a18:	4684      	mov	ip, r0
     a1a:	4462      	add	r2, ip
     a1c:	0038      	movs	r0, r7
     a1e:	4f2a      	ldr	r7, [pc, #168]	; (ac8 <usart_init+0x324>)
     a20:	47b8      	blx	r7
     a22:	e7ea      	b.n	9fa <usart_init+0x256>
		if(config->lin_slave_enable) {
     a24:	7ef3      	ldrb	r3, [r6, #27]
     a26:	2b00      	cmp	r3, #0
     a28:	d100      	bne.n	a2c <usart_init+0x288>
     a2a:	e77d      	b.n	928 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     a2c:	2380      	movs	r3, #128	; 0x80
     a2e:	04db      	lsls	r3, r3, #19
     a30:	431f      	orrs	r7, r3
     a32:	e779      	b.n	928 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     a34:	0020      	movs	r0, r4
     a36:	4b25      	ldr	r3, [pc, #148]	; (acc <usart_init+0x328>)
     a38:	4798      	blx	r3
     a3a:	e007      	b.n	a4c <usart_init+0x2a8>
     a3c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     a3e:	2f04      	cmp	r7, #4
     a40:	d00d      	beq.n	a5e <usart_init+0x2ba>
     a42:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a44:	00bb      	lsls	r3, r7, #2
     a46:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     a48:	2800      	cmp	r0, #0
     a4a:	d0f3      	beq.n	a34 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
     a4c:	1c43      	adds	r3, r0, #1
     a4e:	d0f5      	beq.n	a3c <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     a50:	a90e      	add	r1, sp, #56	; 0x38
     a52:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     a54:	0c00      	lsrs	r0, r0, #16
     a56:	b2c0      	uxtb	r0, r0
     a58:	4b1d      	ldr	r3, [pc, #116]	; (ad0 <usart_init+0x32c>)
     a5a:	4798      	blx	r3
     a5c:	e7ee      	b.n	a3c <usart_init+0x298>
		module->callback[i]            = NULL;
     a5e:	2300      	movs	r3, #0
     a60:	60eb      	str	r3, [r5, #12]
     a62:	612b      	str	r3, [r5, #16]
     a64:	616b      	str	r3, [r5, #20]
     a66:	61ab      	str	r3, [r5, #24]
     a68:	61eb      	str	r3, [r5, #28]
     a6a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     a6c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     a6e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     a70:	2200      	movs	r2, #0
     a72:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     a74:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     a76:	3330      	adds	r3, #48	; 0x30
     a78:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     a7a:	3301      	adds	r3, #1
     a7c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     a7e:	3301      	adds	r3, #1
     a80:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     a82:	3301      	adds	r3, #1
     a84:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     a86:	6828      	ldr	r0, [r5, #0]
     a88:	4b07      	ldr	r3, [pc, #28]	; (aa8 <usart_init+0x304>)
     a8a:	4798      	blx	r3
     a8c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     a8e:	4911      	ldr	r1, [pc, #68]	; (ad4 <usart_init+0x330>)
     a90:	4b11      	ldr	r3, [pc, #68]	; (ad8 <usart_init+0x334>)
     a92:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     a94:	00a4      	lsls	r4, r4, #2
     a96:	4b11      	ldr	r3, [pc, #68]	; (adc <usart_init+0x338>)
     a98:	50e5      	str	r5, [r4, r3]
	return status_code;
     a9a:	2000      	movs	r0, #0
     a9c:	e695      	b.n	7ca <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     a9e:	2310      	movs	r3, #16
     aa0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     aa2:	2300      	movs	r3, #0
     aa4:	9307      	str	r3, [sp, #28]
     aa6:	e6ec      	b.n	882 <usart_init+0xde>
     aa8:	0000076d 	.word	0x0000076d
     aac:	40000400 	.word	0x40000400
     ab0:	00001741 	.word	0x00001741
     ab4:	000016b5 	.word	0x000016b5
     ab8:	000005a9 	.word	0x000005a9
     abc:	41002000 	.word	0x41002000
     ac0:	0000175d 	.word	0x0000175d
     ac4:	000004eb 	.word	0x000004eb
     ac8:	00000515 	.word	0x00000515
     acc:	000005f5 	.word	0x000005f5
     ad0:	00001839 	.word	0x00001839
     ad4:	00000b71 	.word	0x00000b71
     ad8:	000011b9 	.word	0x000011b9
     adc:	20000170 	.word	0x20000170

00000ae0 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     ae0:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     ae2:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     ae4:	2a00      	cmp	r2, #0
     ae6:	d101      	bne.n	aec <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     ae8:	0018      	movs	r0, r3
     aea:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     aec:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     aee:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     af0:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     af2:	2a00      	cmp	r2, #0
     af4:	d1f8      	bne.n	ae8 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     af6:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
     af8:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     afa:	2102      	movs	r1, #2
     afc:	7e13      	ldrb	r3, [r2, #24]
     afe:	420b      	tst	r3, r1
     b00:	d0fc      	beq.n	afc <usart_write_wait+0x1c>
	return STATUS_OK;
     b02:	2300      	movs	r3, #0
     b04:	e7f0      	b.n	ae8 <usart_write_wait+0x8>

00000b06 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     b06:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     b08:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     b0a:	2a00      	cmp	r2, #0
     b0c:	d101      	bne.n	b12 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     b0e:	0018      	movs	r0, r3
     b10:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     b12:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     b14:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     b16:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     b18:	2a00      	cmp	r2, #0
     b1a:	d1f8      	bne.n	b0e <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     b1c:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     b1e:	7e10      	ldrb	r0, [r2, #24]
     b20:	0740      	lsls	r0, r0, #29
     b22:	d5f4      	bpl.n	b0e <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     b24:	8b53      	ldrh	r3, [r2, #26]
     b26:	b2db      	uxtb	r3, r3
	if (error_code) {
     b28:	0698      	lsls	r0, r3, #26
     b2a:	d01d      	beq.n	b68 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     b2c:	0798      	lsls	r0, r3, #30
     b2e:	d503      	bpl.n	b38 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     b30:	2302      	movs	r3, #2
     b32:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     b34:	3318      	adds	r3, #24
     b36:	e7ea      	b.n	b0e <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     b38:	0758      	lsls	r0, r3, #29
     b3a:	d503      	bpl.n	b44 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     b3c:	2304      	movs	r3, #4
     b3e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     b40:	331a      	adds	r3, #26
     b42:	e7e4      	b.n	b0e <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     b44:	07d8      	lsls	r0, r3, #31
     b46:	d503      	bpl.n	b50 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     b48:	2301      	movs	r3, #1
     b4a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     b4c:	3312      	adds	r3, #18
     b4e:	e7de      	b.n	b0e <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     b50:	06d8      	lsls	r0, r3, #27
     b52:	d503      	bpl.n	b5c <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     b54:	2310      	movs	r3, #16
     b56:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     b58:	3332      	adds	r3, #50	; 0x32
     b5a:	e7d8      	b.n	b0e <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     b5c:	069b      	lsls	r3, r3, #26
     b5e:	d503      	bpl.n	b68 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     b60:	2320      	movs	r3, #32
     b62:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     b64:	3321      	adds	r3, #33	; 0x21
     b66:	e7d2      	b.n	b0e <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     b68:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     b6a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     b6c:	2300      	movs	r3, #0
     b6e:	e7ce      	b.n	b0e <usart_read_wait+0x8>

00000b70 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     b72:	0080      	lsls	r0, r0, #2
     b74:	4b62      	ldr	r3, [pc, #392]	; (d00 <_usart_interrupt_handler+0x190>)
     b76:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     b78:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     b7a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     b7c:	2b00      	cmp	r3, #0
     b7e:	d1fc      	bne.n	b7a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     b80:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     b82:	7da6      	ldrb	r6, [r4, #22]
     b84:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     b86:	2330      	movs	r3, #48	; 0x30
     b88:	5ceb      	ldrb	r3, [r5, r3]
     b8a:	2231      	movs	r2, #49	; 0x31
     b8c:	5caf      	ldrb	r7, [r5, r2]
     b8e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     b90:	07f3      	lsls	r3, r6, #31
     b92:	d522      	bpl.n	bda <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     b94:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     b96:	b29b      	uxth	r3, r3
     b98:	2b00      	cmp	r3, #0
     b9a:	d01c      	beq.n	bd6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     b9c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     b9e:	7813      	ldrb	r3, [r2, #0]
     ba0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     ba2:	1c51      	adds	r1, r2, #1
     ba4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     ba6:	7969      	ldrb	r1, [r5, #5]
     ba8:	2901      	cmp	r1, #1
     baa:	d00e      	beq.n	bca <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     bac:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     bae:	05db      	lsls	r3, r3, #23
     bb0:	0ddb      	lsrs	r3, r3, #23
     bb2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     bb4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     bb6:	3b01      	subs	r3, #1
     bb8:	b29b      	uxth	r3, r3
     bba:	85eb      	strh	r3, [r5, #46]	; 0x2e
     bbc:	2b00      	cmp	r3, #0
     bbe:	d10c      	bne.n	bda <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     bc0:	3301      	adds	r3, #1
     bc2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     bc4:	3301      	adds	r3, #1
     bc6:	75a3      	strb	r3, [r4, #22]
     bc8:	e007      	b.n	bda <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     bca:	7851      	ldrb	r1, [r2, #1]
     bcc:	0209      	lsls	r1, r1, #8
     bce:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     bd0:	3202      	adds	r2, #2
     bd2:	62aa      	str	r2, [r5, #40]	; 0x28
     bd4:	e7eb      	b.n	bae <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     bd6:	2301      	movs	r3, #1
     bd8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     bda:	07b3      	lsls	r3, r6, #30
     bdc:	d506      	bpl.n	bec <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     bde:	2302      	movs	r3, #2
     be0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     be2:	2200      	movs	r2, #0
     be4:	3331      	adds	r3, #49	; 0x31
     be6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     be8:	07fb      	lsls	r3, r7, #31
     bea:	d41a      	bmi.n	c22 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     bec:	0773      	lsls	r3, r6, #29
     bee:	d565      	bpl.n	cbc <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     bf0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     bf2:	b29b      	uxth	r3, r3
     bf4:	2b00      	cmp	r3, #0
     bf6:	d05f      	beq.n	cb8 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     bf8:	8b63      	ldrh	r3, [r4, #26]
     bfa:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     bfc:	071a      	lsls	r2, r3, #28
     bfe:	d414      	bmi.n	c2a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     c00:	223f      	movs	r2, #63	; 0x3f
     c02:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     c04:	2b00      	cmp	r3, #0
     c06:	d034      	beq.n	c72 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     c08:	079a      	lsls	r2, r3, #30
     c0a:	d511      	bpl.n	c30 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     c0c:	221a      	movs	r2, #26
     c0e:	2332      	movs	r3, #50	; 0x32
     c10:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     c12:	3b30      	subs	r3, #48	; 0x30
     c14:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     c16:	077b      	lsls	r3, r7, #29
     c18:	d550      	bpl.n	cbc <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     c1a:	0028      	movs	r0, r5
     c1c:	696b      	ldr	r3, [r5, #20]
     c1e:	4798      	blx	r3
     c20:	e04c      	b.n	cbc <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     c22:	0028      	movs	r0, r5
     c24:	68eb      	ldr	r3, [r5, #12]
     c26:	4798      	blx	r3
     c28:	e7e0      	b.n	bec <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     c2a:	2237      	movs	r2, #55	; 0x37
     c2c:	4013      	ands	r3, r2
     c2e:	e7e9      	b.n	c04 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     c30:	075a      	lsls	r2, r3, #29
     c32:	d505      	bpl.n	c40 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     c34:	221e      	movs	r2, #30
     c36:	2332      	movs	r3, #50	; 0x32
     c38:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     c3a:	3b2e      	subs	r3, #46	; 0x2e
     c3c:	8363      	strh	r3, [r4, #26]
     c3e:	e7ea      	b.n	c16 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     c40:	07da      	lsls	r2, r3, #31
     c42:	d505      	bpl.n	c50 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     c44:	2213      	movs	r2, #19
     c46:	2332      	movs	r3, #50	; 0x32
     c48:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     c4a:	3b31      	subs	r3, #49	; 0x31
     c4c:	8363      	strh	r3, [r4, #26]
     c4e:	e7e2      	b.n	c16 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     c50:	06da      	lsls	r2, r3, #27
     c52:	d505      	bpl.n	c60 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     c54:	2242      	movs	r2, #66	; 0x42
     c56:	2332      	movs	r3, #50	; 0x32
     c58:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     c5a:	3b22      	subs	r3, #34	; 0x22
     c5c:	8363      	strh	r3, [r4, #26]
     c5e:	e7da      	b.n	c16 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     c60:	2220      	movs	r2, #32
     c62:	421a      	tst	r2, r3
     c64:	d0d7      	beq.n	c16 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     c66:	3221      	adds	r2, #33	; 0x21
     c68:	2332      	movs	r3, #50	; 0x32
     c6a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     c6c:	3b12      	subs	r3, #18
     c6e:	8363      	strh	r3, [r4, #26]
     c70:	e7d1      	b.n	c16 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     c72:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     c74:	05db      	lsls	r3, r3, #23
     c76:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     c78:	b2da      	uxtb	r2, r3
     c7a:	6a69      	ldr	r1, [r5, #36]	; 0x24
     c7c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     c7e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     c80:	1c51      	adds	r1, r2, #1
     c82:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     c84:	7969      	ldrb	r1, [r5, #5]
     c86:	2901      	cmp	r1, #1
     c88:	d010      	beq.n	cac <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     c8a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     c8c:	3b01      	subs	r3, #1
     c8e:	b29b      	uxth	r3, r3
     c90:	85ab      	strh	r3, [r5, #44]	; 0x2c
     c92:	2b00      	cmp	r3, #0
     c94:	d112      	bne.n	cbc <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     c96:	3304      	adds	r3, #4
     c98:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     c9a:	2200      	movs	r2, #0
     c9c:	332e      	adds	r3, #46	; 0x2e
     c9e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     ca0:	07bb      	lsls	r3, r7, #30
     ca2:	d50b      	bpl.n	cbc <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     ca4:	0028      	movs	r0, r5
     ca6:	692b      	ldr	r3, [r5, #16]
     ca8:	4798      	blx	r3
     caa:	e007      	b.n	cbc <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     cac:	0a1b      	lsrs	r3, r3, #8
     cae:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     cb0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     cb2:	3301      	adds	r3, #1
     cb4:	626b      	str	r3, [r5, #36]	; 0x24
     cb6:	e7e8      	b.n	c8a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     cb8:	2304      	movs	r3, #4
     cba:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     cbc:	06f3      	lsls	r3, r6, #27
     cbe:	d504      	bpl.n	cca <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     cc0:	2310      	movs	r3, #16
     cc2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     cc4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     cc6:	06fb      	lsls	r3, r7, #27
     cc8:	d40e      	bmi.n	ce8 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     cca:	06b3      	lsls	r3, r6, #26
     ccc:	d504      	bpl.n	cd8 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     cce:	2320      	movs	r3, #32
     cd0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     cd2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     cd4:	073b      	lsls	r3, r7, #28
     cd6:	d40b      	bmi.n	cf0 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     cd8:	0733      	lsls	r3, r6, #28
     cda:	d504      	bpl.n	ce6 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     cdc:	2308      	movs	r3, #8
     cde:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     ce0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     ce2:	06bb      	lsls	r3, r7, #26
     ce4:	d408      	bmi.n	cf8 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     ce8:	0028      	movs	r0, r5
     cea:	69eb      	ldr	r3, [r5, #28]
     cec:	4798      	blx	r3
     cee:	e7ec      	b.n	cca <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     cf0:	0028      	movs	r0, r5
     cf2:	69ab      	ldr	r3, [r5, #24]
     cf4:	4798      	blx	r3
     cf6:	e7ef      	b.n	cd8 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     cf8:	6a2b      	ldr	r3, [r5, #32]
     cfa:	0028      	movs	r0, r5
     cfc:	4798      	blx	r3
}
     cfe:	e7f2      	b.n	ce6 <_usart_interrupt_handler+0x176>
     d00:	20000170 	.word	0x20000170

00000d04 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     d04:	b5f0      	push	{r4, r5, r6, r7, lr}
     d06:	b08b      	sub	sp, #44	; 0x2c
     d08:	0005      	movs	r5, r0
     d0a:	000c      	movs	r4, r1
     d0c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     d0e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     d10:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     d12:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     d14:	079b      	lsls	r3, r3, #30
     d16:	d501      	bpl.n	d1c <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     d18:	b00b      	add	sp, #44	; 0x2c
     d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     d1c:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     d1e:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     d20:	07db      	lsls	r3, r3, #31
     d22:	d4f9      	bmi.n	d18 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d24:	0008      	movs	r0, r1
     d26:	4b6f      	ldr	r3, [pc, #444]	; (ee4 <spi_init+0x1e0>)
     d28:	4798      	blx	r3
     d2a:	4a6f      	ldr	r2, [pc, #444]	; (ee8 <spi_init+0x1e4>)
     d2c:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     d2e:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     d30:	2301      	movs	r3, #1
     d32:	40bb      	lsls	r3, r7
     d34:	430b      	orrs	r3, r1
     d36:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     d38:	a909      	add	r1, sp, #36	; 0x24
     d3a:	2724      	movs	r7, #36	; 0x24
     d3c:	5df3      	ldrb	r3, [r6, r7]
     d3e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d40:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     d42:	b2c3      	uxtb	r3, r0
     d44:	9301      	str	r3, [sp, #4]
     d46:	0018      	movs	r0, r3
     d48:	4b68      	ldr	r3, [pc, #416]	; (eec <spi_init+0x1e8>)
     d4a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     d4c:	9801      	ldr	r0, [sp, #4]
     d4e:	4b68      	ldr	r3, [pc, #416]	; (ef0 <spi_init+0x1ec>)
     d50:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     d52:	5df0      	ldrb	r0, [r6, r7]
     d54:	2100      	movs	r1, #0
     d56:	4b67      	ldr	r3, [pc, #412]	; (ef4 <spi_init+0x1f0>)
     d58:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     d5a:	7833      	ldrb	r3, [r6, #0]
     d5c:	2b01      	cmp	r3, #1
     d5e:	d03f      	beq.n	de0 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
     d60:	7833      	ldrb	r3, [r6, #0]
     d62:	2b00      	cmp	r3, #0
     d64:	d103      	bne.n	d6e <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     d66:	6823      	ldr	r3, [r4, #0]
     d68:	2208      	movs	r2, #8
     d6a:	4313      	orrs	r3, r2
     d6c:	6023      	str	r3, [r4, #0]
     d6e:	002b      	movs	r3, r5
     d70:	330c      	adds	r3, #12
     d72:	0029      	movs	r1, r5
     d74:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
     d76:	2200      	movs	r2, #0
     d78:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     d7a:	428b      	cmp	r3, r1
     d7c:	d1fc      	bne.n	d78 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
     d7e:	2300      	movs	r3, #0
     d80:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     d82:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     d84:	2400      	movs	r4, #0
     d86:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     d88:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     d8a:	3336      	adds	r3, #54	; 0x36
     d8c:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
     d8e:	3301      	adds	r3, #1
     d90:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
     d92:	3301      	adds	r3, #1
     d94:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
     d96:	3b35      	subs	r3, #53	; 0x35
     d98:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
     d9a:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     d9c:	6828      	ldr	r0, [r5, #0]
     d9e:	4b51      	ldr	r3, [pc, #324]	; (ee4 <spi_init+0x1e0>)
     da0:	4798      	blx	r3
     da2:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     da4:	4954      	ldr	r1, [pc, #336]	; (ef8 <spi_init+0x1f4>)
     da6:	4b55      	ldr	r3, [pc, #340]	; (efc <spi_init+0x1f8>)
     da8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     daa:	00bf      	lsls	r7, r7, #2
     dac:	4b54      	ldr	r3, [pc, #336]	; (f00 <spi_init+0x1fc>)
     dae:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
     db0:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     db2:	ab04      	add	r3, sp, #16
     db4:	2280      	movs	r2, #128	; 0x80
     db6:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     db8:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     dba:	3a7f      	subs	r2, #127	; 0x7f
     dbc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     dbe:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     dc0:	7833      	ldrb	r3, [r6, #0]
     dc2:	2b00      	cmp	r3, #0
     dc4:	d102      	bne.n	dcc <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     dc6:	2200      	movs	r2, #0
     dc8:	ab04      	add	r3, sp, #16
     dca:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     dcc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     dce:	9305      	str	r3, [sp, #20]
     dd0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     dd2:	9306      	str	r3, [sp, #24]
     dd4:	6b33      	ldr	r3, [r6, #48]	; 0x30
     dd6:	9307      	str	r3, [sp, #28]
     dd8:	6b73      	ldr	r3, [r6, #52]	; 0x34
     dda:	9308      	str	r3, [sp, #32]
     ddc:	2400      	movs	r4, #0
     dde:	e00b      	b.n	df8 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     de0:	6823      	ldr	r3, [r4, #0]
     de2:	220c      	movs	r2, #12
     de4:	4313      	orrs	r3, r2
     de6:	6023      	str	r3, [r4, #0]
     de8:	e7ba      	b.n	d60 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     dea:	0038      	movs	r0, r7
     dec:	4b45      	ldr	r3, [pc, #276]	; (f04 <spi_init+0x200>)
     dee:	4798      	blx	r3
     df0:	e00a      	b.n	e08 <spi_init+0x104>
     df2:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     df4:	2c04      	cmp	r4, #4
     df6:	d010      	beq.n	e1a <spi_init+0x116>
     df8:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
     dfa:	00a3      	lsls	r3, r4, #2
     dfc:	aa02      	add	r2, sp, #8
     dfe:	200c      	movs	r0, #12
     e00:	1812      	adds	r2, r2, r0
     e02:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
     e04:	2800      	cmp	r0, #0
     e06:	d0f0      	beq.n	dea <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
     e08:	1c43      	adds	r3, r0, #1
     e0a:	d0f2      	beq.n	df2 <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     e0c:	a904      	add	r1, sp, #16
     e0e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     e10:	0c00      	lsrs	r0, r0, #16
     e12:	b2c0      	uxtb	r0, r0
     e14:	4b3c      	ldr	r3, [pc, #240]	; (f08 <spi_init+0x204>)
     e16:	4798      	blx	r3
     e18:	e7eb      	b.n	df2 <spi_init+0xee>
	module->mode             = config->mode;
     e1a:	7833      	ldrb	r3, [r6, #0]
     e1c:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     e1e:	7c33      	ldrb	r3, [r6, #16]
     e20:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     e22:	7cb3      	ldrb	r3, [r6, #18]
     e24:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     e26:	7d33      	ldrb	r3, [r6, #20]
     e28:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
     e2a:	2200      	movs	r2, #0
     e2c:	ab02      	add	r3, sp, #8
     e2e:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
     e30:	7833      	ldrb	r3, [r6, #0]
     e32:	2b01      	cmp	r3, #1
     e34:	d012      	beq.n	e5c <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
     e36:	7833      	ldrb	r3, [r6, #0]
     e38:	2b00      	cmp	r3, #0
     e3a:	d126      	bne.n	e8a <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
     e3c:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
     e3e:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
     e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     e42:	7ff1      	ldrb	r1, [r6, #31]
     e44:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     e46:	7fb4      	ldrb	r4, [r6, #30]
     e48:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
     e4a:	4319      	orrs	r1, r3
     e4c:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
     e4e:	2320      	movs	r3, #32
     e50:	5cf3      	ldrb	r3, [r6, r3]
     e52:	2b00      	cmp	r3, #0
     e54:	d01b      	beq.n	e8e <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     e56:	2340      	movs	r3, #64	; 0x40
     e58:	431a      	orrs	r2, r3
     e5a:	e018      	b.n	e8e <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e5c:	6828      	ldr	r0, [r5, #0]
     e5e:	4b21      	ldr	r3, [pc, #132]	; (ee4 <spi_init+0x1e0>)
     e60:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     e62:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     e64:	b2c0      	uxtb	r0, r0
     e66:	4b29      	ldr	r3, [pc, #164]	; (f0c <spi_init+0x208>)
     e68:	4798      	blx	r3
     e6a:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     e6c:	ab02      	add	r3, sp, #8
     e6e:	1d9a      	adds	r2, r3, #6
     e70:	69b0      	ldr	r0, [r6, #24]
     e72:	4b27      	ldr	r3, [pc, #156]	; (f10 <spi_init+0x20c>)
     e74:	4798      	blx	r3
     e76:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     e78:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     e7a:	2b00      	cmp	r3, #0
     e7c:	d000      	beq.n	e80 <spi_init+0x17c>
     e7e:	e74b      	b.n	d18 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
     e80:	ab02      	add	r3, sp, #8
     e82:	3306      	adds	r3, #6
     e84:	781b      	ldrb	r3, [r3, #0]
     e86:	733b      	strb	r3, [r7, #12]
     e88:	e7d5      	b.n	e36 <spi_init+0x132>
	uint32_t ctrlb = 0;
     e8a:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
     e8c:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
     e8e:	6873      	ldr	r3, [r6, #4]
     e90:	68b1      	ldr	r1, [r6, #8]
     e92:	430b      	orrs	r3, r1
     e94:	68f1      	ldr	r1, [r6, #12]
     e96:	430b      	orrs	r3, r1
     e98:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
     e9a:	7c31      	ldrb	r1, [r6, #16]
     e9c:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
     e9e:	7c71      	ldrb	r1, [r6, #17]
     ea0:	2900      	cmp	r1, #0
     ea2:	d103      	bne.n	eac <spi_init+0x1a8>
     ea4:	491b      	ldr	r1, [pc, #108]	; (f14 <spi_init+0x210>)
     ea6:	7889      	ldrb	r1, [r1, #2]
     ea8:	0789      	lsls	r1, r1, #30
     eaa:	d501      	bpl.n	eb0 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     eac:	2180      	movs	r1, #128	; 0x80
     eae:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
     eb0:	7cb1      	ldrb	r1, [r6, #18]
     eb2:	2900      	cmp	r1, #0
     eb4:	d002      	beq.n	ebc <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     eb6:	2180      	movs	r1, #128	; 0x80
     eb8:	0289      	lsls	r1, r1, #10
     eba:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
     ebc:	7cf1      	ldrb	r1, [r6, #19]
     ebe:	2900      	cmp	r1, #0
     ec0:	d002      	beq.n	ec8 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     ec2:	2180      	movs	r1, #128	; 0x80
     ec4:	0089      	lsls	r1, r1, #2
     ec6:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
     ec8:	7d31      	ldrb	r1, [r6, #20]
     eca:	2900      	cmp	r1, #0
     ecc:	d002      	beq.n	ed4 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     ece:	2180      	movs	r1, #128	; 0x80
     ed0:	0189      	lsls	r1, r1, #6
     ed2:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
     ed4:	6839      	ldr	r1, [r7, #0]
     ed6:	430b      	orrs	r3, r1
     ed8:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
     eda:	687b      	ldr	r3, [r7, #4]
     edc:	431a      	orrs	r2, r3
     ede:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
     ee0:	2000      	movs	r0, #0
     ee2:	e719      	b.n	d18 <spi_init+0x14>
     ee4:	0000076d 	.word	0x0000076d
     ee8:	40000400 	.word	0x40000400
     eec:	00001741 	.word	0x00001741
     ef0:	000016b5 	.word	0x000016b5
     ef4:	000005a9 	.word	0x000005a9
     ef8:	00000f91 	.word	0x00000f91
     efc:	000011b9 	.word	0x000011b9
     f00:	20000170 	.word	0x20000170
     f04:	000005f5 	.word	0x000005f5
     f08:	00001839 	.word	0x00001839
     f0c:	0000175d 	.word	0x0000175d
     f10:	000004eb 	.word	0x000004eb
     f14:	41002000 	.word	0x41002000

00000f18 <spi_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     f18:	1c93      	adds	r3, r2, #2
     f1a:	009b      	lsls	r3, r3, #2
     f1c:	18c3      	adds	r3, r0, r3
     f1e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
     f20:	2136      	movs	r1, #54	; 0x36
     f22:	2301      	movs	r3, #1
     f24:	4093      	lsls	r3, r2
     f26:	001a      	movs	r2, r3
     f28:	5c43      	ldrb	r3, [r0, r1]
     f2a:	4313      	orrs	r3, r2
     f2c:	5443      	strb	r3, [r0, r1]
}
     f2e:	4770      	bx	lr

00000f30 <spi_read_buffer_job>:
enum status_code spi_read_buffer_job(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     f30:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     f32:	2417      	movs	r4, #23
	if (length == 0) {
     f34:	2a00      	cmp	r2, #0
     f36:	d101      	bne.n	f3c <spi_read_buffer_job+0xc>

	dummy_write = dummy;
	/* Issue internal read */
	_spi_read_buffer(module, rx_data, length);
	return STATUS_OK;
}
     f38:	0020      	movs	r0, r4
     f3a:	bd30      	pop	{r4, r5, pc}
	if (!(module->receiver_enabled)) {
     f3c:	79c5      	ldrb	r5, [r0, #7]
		return STATUS_ERR_DENIED;
     f3e:	3405      	adds	r4, #5
	if (!(module->receiver_enabled)) {
     f40:	2d00      	cmp	r5, #0
     f42:	d0f9      	beq.n	f38 <spi_read_buffer_job+0x8>
	if (module->status == STATUS_BUSY) {
     f44:	341c      	adds	r4, #28
     f46:	5d05      	ldrb	r5, [r0, r4]
		return STATUS_BUSY;
     f48:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
     f4a:	2d05      	cmp	r5, #5
     f4c:	d0f4      	beq.n	f38 <spi_read_buffer_job+0x8>
	dummy_write = dummy;
     f4e:	4c0f      	ldr	r4, [pc, #60]	; (f8c <spi_read_buffer_job+0x5c>)
     f50:	8023      	strh	r3, [r4, #0]
	module->remaining_rx_buffer_length = length;
     f52:	8602      	strh	r2, [r0, #48]	; 0x30
	module->remaining_dummy_buffer_length = length;
     f54:	8642      	strh	r2, [r0, #50]	; 0x32
	module->rx_buffer_ptr = rx_data;
     f56:	6281      	str	r1, [r0, #40]	; 0x28
	module->status = STATUS_BUSY;
     f58:	2205      	movs	r2, #5
     f5a:	2338      	movs	r3, #56	; 0x38
     f5c:	54c2      	strb	r2, [r0, r3]
	module->dir = SPI_DIRECTION_READ;
     f5e:	2300      	movs	r3, #0
     f60:	7243      	strb	r3, [r0, #9]
	SercomSpi *const hw = &(module->hw->SPI);
     f62:	6803      	ldr	r3, [r0, #0]
	if (module->mode == SPI_MODE_MASTER && module->dir == SPI_DIRECTION_READ) {
     f64:	7942      	ldrb	r2, [r0, #5]
     f66:	2a01      	cmp	r2, #1
     f68:	d009      	beq.n	f7e <spi_read_buffer_job+0x4e>
	if (module->mode == SPI_MODE_SLAVE) {
     f6a:	2a00      	cmp	r2, #0
     f6c:	d10c      	bne.n	f88 <spi_read_buffer_job+0x58>
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     f6e:	3202      	adds	r2, #2
     f70:	761a      	strb	r2, [r3, #24]
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     f72:	3206      	adds	r2, #6
     f74:	761a      	strb	r2, [r3, #24]
		tmp_intenset |= SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     f76:	3206      	adds	r2, #6
	hw->INTENSET.reg = tmp_intenset;
     f78:	759a      	strb	r2, [r3, #22]
	return STATUS_OK;
     f7a:	2400      	movs	r4, #0
     f7c:	e7dc      	b.n	f38 <spi_read_buffer_job+0x8>
	if (module->mode == SPI_MODE_MASTER && module->dir == SPI_DIRECTION_READ) {
     f7e:	7a42      	ldrb	r2, [r0, #9]
		tmp_intenset |= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     f80:	4251      	negs	r1, r2
     f82:	414a      	adcs	r2, r1
     f84:	3204      	adds	r2, #4
     f86:	e7f7      	b.n	f78 <spi_read_buffer_job+0x48>
	tmp_intenset = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     f88:	2204      	movs	r2, #4
     f8a:	e7f5      	b.n	f78 <spi_read_buffer_job+0x48>
     f8c:	2000016c 	.word	0x2000016c

00000f90 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     f92:	0080      	lsls	r0, r0, #2
     f94:	4b85      	ldr	r3, [pc, #532]	; (11ac <_spi_interrupt_handler+0x21c>)
     f96:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     f98:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     f9a:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
     f9c:	5ce3      	ldrb	r3, [r4, r3]
     f9e:	2236      	movs	r2, #54	; 0x36
     fa0:	5ca7      	ldrb	r7, [r4, r2]
     fa2:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     fa4:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     fa6:	7db5      	ldrb	r5, [r6, #22]
     fa8:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     faa:	07eb      	lsls	r3, r5, #31
     fac:	d52e      	bpl.n	100c <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     fae:	7963      	ldrb	r3, [r4, #5]
     fb0:	2b01      	cmp	r3, #1
     fb2:	d025      	beq.n	1000 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     fb4:	2b00      	cmp	r3, #0
     fb6:	d129      	bne.n	100c <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
     fb8:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
     fba:	2b00      	cmp	r3, #0
     fbc:	d026      	beq.n	100c <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     fbe:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     fc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     fc2:	7813      	ldrb	r3, [r2, #0]
     fc4:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
     fc6:	1c50      	adds	r0, r2, #1
     fc8:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     fca:	79a0      	ldrb	r0, [r4, #6]
     fcc:	2801      	cmp	r0, #1
     fce:	d100      	bne.n	fd2 <_spi_interrupt_handler+0x42>
     fd0:	e069      	b.n	10a6 <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     fd2:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     fd4:	05db      	lsls	r3, r3, #23
     fd6:	0ddb      	lsrs	r3, r3, #23
     fd8:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
     fda:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     fdc:	3b01      	subs	r3, #1
     fde:	b29b      	uxth	r3, r3
     fe0:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
     fe2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     fe4:	b29b      	uxth	r3, r3
     fe6:	2b00      	cmp	r3, #0
     fe8:	d110      	bne.n	100c <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     fea:	3301      	adds	r3, #1
     fec:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     fee:	7a63      	ldrb	r3, [r4, #9]
     ff0:	2b01      	cmp	r3, #1
     ff2:	d10b      	bne.n	100c <_spi_interrupt_handler+0x7c>
     ff4:	79e3      	ldrb	r3, [r4, #7]
     ff6:	2b00      	cmp	r3, #0
     ff8:	d108      	bne.n	100c <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     ffa:	3302      	adds	r3, #2
     ffc:	75b3      	strb	r3, [r6, #22]
     ffe:	e005      	b.n	100c <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    1000:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1002:	2b00      	cmp	r3, #0
    1004:	d03e      	beq.n	1084 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    1006:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1008:	2b00      	cmp	r3, #0
    100a:	d1d8      	bne.n	fbe <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    100c:	076b      	lsls	r3, r5, #29
    100e:	d511      	bpl.n	1034 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1010:	8b73      	ldrh	r3, [r6, #26]
    1012:	075b      	lsls	r3, r3, #29
    1014:	d551      	bpl.n	10ba <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1016:	7a63      	ldrb	r3, [r4, #9]
    1018:	2b01      	cmp	r3, #1
    101a:	d008      	beq.n	102e <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    101c:	221e      	movs	r2, #30
    101e:	2338      	movs	r3, #56	; 0x38
    1020:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1022:	3b35      	subs	r3, #53	; 0x35
    1024:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1026:	3302      	adds	r3, #2
    1028:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    102a:	073b      	lsls	r3, r7, #28
    102c:	d441      	bmi.n	10b2 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    102e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1030:	2304      	movs	r3, #4
    1032:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1034:	07ab      	lsls	r3, r5, #30
    1036:	d515      	bpl.n	1064 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    1038:	7963      	ldrb	r3, [r4, #5]
    103a:	2b00      	cmp	r3, #0
    103c:	d10e      	bne.n	105c <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    103e:	3307      	adds	r3, #7
    1040:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1042:	3b05      	subs	r3, #5
    1044:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    1046:	3301      	adds	r3, #1
    1048:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    104a:	2300      	movs	r3, #0
    104c:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    104e:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    1050:	3338      	adds	r3, #56	; 0x38
    1052:	2200      	movs	r2, #0
    1054:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    1056:	06fb      	lsls	r3, r7, #27
    1058:	d500      	bpl.n	105c <_spi_interrupt_handler+0xcc>
    105a:	e07f      	b.n	115c <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    105c:	7963      	ldrb	r3, [r4, #5]
    105e:	2b01      	cmp	r3, #1
    1060:	d100      	bne.n	1064 <_spi_interrupt_handler+0xd4>
    1062:	e07f      	b.n	1164 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1064:	072b      	lsls	r3, r5, #28
    1066:	d508      	bpl.n	107a <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    1068:	7963      	ldrb	r3, [r4, #5]
    106a:	2b00      	cmp	r3, #0
    106c:	d105      	bne.n	107a <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    106e:	3308      	adds	r3, #8
    1070:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1072:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1074:	06bb      	lsls	r3, r7, #26
    1076:	d500      	bpl.n	107a <_spi_interrupt_handler+0xea>
    1078:	e08a      	b.n	1190 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    107a:	b26d      	sxtb	r5, r5
    107c:	2d00      	cmp	r5, #0
    107e:	da00      	bge.n	1082 <_spi_interrupt_handler+0xf2>
    1080:	e08a      	b.n	1198 <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    1082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    1084:	4b4a      	ldr	r3, [pc, #296]	; (11b0 <_spi_interrupt_handler+0x220>)
    1086:	881b      	ldrh	r3, [r3, #0]
    1088:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    108a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    108c:	3b01      	subs	r3, #1
    108e:	b29b      	uxth	r3, r3
    1090:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    1092:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1094:	b29b      	uxth	r3, r3
    1096:	2b00      	cmp	r3, #0
    1098:	d101      	bne.n	109e <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    109a:	3301      	adds	r3, #1
    109c:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    109e:	7963      	ldrb	r3, [r4, #5]
		if (0
    10a0:	2b01      	cmp	r3, #1
    10a2:	d0b0      	beq.n	1006 <_spi_interrupt_handler+0x76>
    10a4:	e786      	b.n	fb4 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    10a6:	7850      	ldrb	r0, [r2, #1]
    10a8:	0200      	lsls	r0, r0, #8
    10aa:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    10ac:	3202      	adds	r2, #2
    10ae:	62e2      	str	r2, [r4, #44]	; 0x2c
    10b0:	e790      	b.n	fd4 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    10b2:	0020      	movs	r0, r4
    10b4:	69a3      	ldr	r3, [r4, #24]
    10b6:	4798      	blx	r3
    10b8:	e7b9      	b.n	102e <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    10ba:	7a63      	ldrb	r3, [r4, #9]
    10bc:	2b01      	cmp	r3, #1
    10be:	d027      	beq.n	1110 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    10c0:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    10c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    10c4:	05db      	lsls	r3, r3, #23
    10c6:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    10c8:	b2da      	uxtb	r2, r3
    10ca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    10cc:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    10ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    10d0:	1c51      	adds	r1, r2, #1
    10d2:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    10d4:	79a1      	ldrb	r1, [r4, #6]
    10d6:	2901      	cmp	r1, #1
    10d8:	d033      	beq.n	1142 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    10da:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    10dc:	3b01      	subs	r3, #1
    10de:	b29b      	uxth	r3, r3
    10e0:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    10e2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    10e4:	b29b      	uxth	r3, r3
    10e6:	2b00      	cmp	r3, #0
    10e8:	d1a4      	bne.n	1034 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    10ea:	2200      	movs	r2, #0
    10ec:	3338      	adds	r3, #56	; 0x38
    10ee:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    10f0:	3b34      	subs	r3, #52	; 0x34
    10f2:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    10f4:	7a63      	ldrb	r3, [r4, #9]
    10f6:	2b02      	cmp	r3, #2
    10f8:	d029      	beq.n	114e <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    10fa:	7a63      	ldrb	r3, [r4, #9]
    10fc:	2b00      	cmp	r3, #0
    10fe:	d000      	beq.n	1102 <_spi_interrupt_handler+0x172>
    1100:	e798      	b.n	1034 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1102:	07bb      	lsls	r3, r7, #30
    1104:	d400      	bmi.n	1108 <_spi_interrupt_handler+0x178>
    1106:	e795      	b.n	1034 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1108:	0020      	movs	r0, r4
    110a:	6923      	ldr	r3, [r4, #16]
    110c:	4798      	blx	r3
    110e:	e791      	b.n	1034 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1110:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    1112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1114:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1116:	3b01      	subs	r3, #1
    1118:	b29b      	uxth	r3, r3
    111a:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    111c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    111e:	b29b      	uxth	r3, r3
    1120:	2b00      	cmp	r3, #0
    1122:	d000      	beq.n	1126 <_spi_interrupt_handler+0x196>
    1124:	e786      	b.n	1034 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1126:	3304      	adds	r3, #4
    1128:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    112a:	2200      	movs	r2, #0
    112c:	3334      	adds	r3, #52	; 0x34
    112e:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1130:	3b35      	subs	r3, #53	; 0x35
    1132:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    1134:	07fb      	lsls	r3, r7, #31
    1136:	d400      	bmi.n	113a <_spi_interrupt_handler+0x1aa>
    1138:	e77c      	b.n	1034 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    113a:	0020      	movs	r0, r4
    113c:	68e3      	ldr	r3, [r4, #12]
    113e:	4798      	blx	r3
    1140:	e778      	b.n	1034 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1142:	0a1b      	lsrs	r3, r3, #8
    1144:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    1146:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1148:	3301      	adds	r3, #1
    114a:	62a3      	str	r3, [r4, #40]	; 0x28
    114c:	e7c5      	b.n	10da <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    114e:	077b      	lsls	r3, r7, #29
    1150:	d400      	bmi.n	1154 <_spi_interrupt_handler+0x1c4>
    1152:	e76f      	b.n	1034 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1154:	0020      	movs	r0, r4
    1156:	6963      	ldr	r3, [r4, #20]
    1158:	4798      	blx	r3
    115a:	e76b      	b.n	1034 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    115c:	0020      	movs	r0, r4
    115e:	69e3      	ldr	r3, [r4, #28]
    1160:	4798      	blx	r3
    1162:	e77b      	b.n	105c <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1164:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1166:	2b01      	cmp	r3, #1
    1168:	d000      	beq.n	116c <_spi_interrupt_handler+0x1dc>
    116a:	e786      	b.n	107a <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    116c:	79e3      	ldrb	r3, [r4, #7]
    116e:	2b00      	cmp	r3, #0
    1170:	d000      	beq.n	1174 <_spi_interrupt_handler+0x1e4>
    1172:	e782      	b.n	107a <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1174:	3302      	adds	r3, #2
    1176:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    1178:	3301      	adds	r3, #1
    117a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    117c:	2200      	movs	r2, #0
    117e:	3335      	adds	r3, #53	; 0x35
    1180:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1182:	07fb      	lsls	r3, r7, #31
    1184:	d400      	bmi.n	1188 <_spi_interrupt_handler+0x1f8>
    1186:	e76d      	b.n	1064 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1188:	0020      	movs	r0, r4
    118a:	68e3      	ldr	r3, [r4, #12]
    118c:	4798      	blx	r3
    118e:	e769      	b.n	1064 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1190:	0020      	movs	r0, r4
    1192:	6a23      	ldr	r3, [r4, #32]
    1194:	4798      	blx	r3
    1196:	e770      	b.n	107a <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1198:	2380      	movs	r3, #128	; 0x80
    119a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    119c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    119e:	067b      	lsls	r3, r7, #25
    11a0:	d400      	bmi.n	11a4 <_spi_interrupt_handler+0x214>
    11a2:	e76e      	b.n	1082 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    11a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    11a6:	0020      	movs	r0, r4
    11a8:	4798      	blx	r3
}
    11aa:	e76a      	b.n	1082 <_spi_interrupt_handler+0xf2>
    11ac:	20000170 	.word	0x20000170
    11b0:	2000016c 	.word	0x2000016c

000011b4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    11b4:	4770      	bx	lr
	...

000011b8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    11b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    11ba:	4b0a      	ldr	r3, [pc, #40]	; (11e4 <_sercom_set_handler+0x2c>)
    11bc:	781b      	ldrb	r3, [r3, #0]
    11be:	2b00      	cmp	r3, #0
    11c0:	d10c      	bne.n	11dc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    11c2:	4f09      	ldr	r7, [pc, #36]	; (11e8 <_sercom_set_handler+0x30>)
    11c4:	4e09      	ldr	r6, [pc, #36]	; (11ec <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    11c6:	4d0a      	ldr	r5, [pc, #40]	; (11f0 <_sercom_set_handler+0x38>)
    11c8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    11ca:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    11cc:	195a      	adds	r2, r3, r5
    11ce:	6014      	str	r4, [r2, #0]
    11d0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11d2:	2b18      	cmp	r3, #24
    11d4:	d1f9      	bne.n	11ca <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    11d6:	2201      	movs	r2, #1
    11d8:	4b02      	ldr	r3, [pc, #8]	; (11e4 <_sercom_set_handler+0x2c>)
    11da:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    11dc:	0080      	lsls	r0, r0, #2
    11de:	4b02      	ldr	r3, [pc, #8]	; (11e8 <_sercom_set_handler+0x30>)
    11e0:	50c1      	str	r1, [r0, r3]
}
    11e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11e4:	2000011a 	.word	0x2000011a
    11e8:	2000011c 	.word	0x2000011c
    11ec:	000011b5 	.word	0x000011b5
    11f0:	20000170 	.word	0x20000170

000011f4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    11f4:	b500      	push	{lr}
    11f6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    11f8:	2309      	movs	r3, #9
    11fa:	466a      	mov	r2, sp
    11fc:	7013      	strb	r3, [r2, #0]
    11fe:	3301      	adds	r3, #1
    1200:	7053      	strb	r3, [r2, #1]
    1202:	3301      	adds	r3, #1
    1204:	7093      	strb	r3, [r2, #2]
    1206:	3301      	adds	r3, #1
    1208:	70d3      	strb	r3, [r2, #3]
    120a:	3301      	adds	r3, #1
    120c:	7113      	strb	r3, [r2, #4]
    120e:	3301      	adds	r3, #1
    1210:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1212:	4b03      	ldr	r3, [pc, #12]	; (1220 <_sercom_get_interrupt_vector+0x2c>)
    1214:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1216:	466b      	mov	r3, sp
    1218:	5618      	ldrsb	r0, [r3, r0]
}
    121a:	b003      	add	sp, #12
    121c:	bd00      	pop	{pc}
    121e:	46c0      	nop			; (mov r8, r8)
    1220:	0000076d 	.word	0x0000076d

00001224 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1224:	b510      	push	{r4, lr}
    1226:	4b02      	ldr	r3, [pc, #8]	; (1230 <SERCOM0_Handler+0xc>)
    1228:	681b      	ldr	r3, [r3, #0]
    122a:	2000      	movs	r0, #0
    122c:	4798      	blx	r3
    122e:	bd10      	pop	{r4, pc}
    1230:	2000011c 	.word	0x2000011c

00001234 <SERCOM1_Handler>:
    1234:	b510      	push	{r4, lr}
    1236:	4b02      	ldr	r3, [pc, #8]	; (1240 <SERCOM1_Handler+0xc>)
    1238:	685b      	ldr	r3, [r3, #4]
    123a:	2001      	movs	r0, #1
    123c:	4798      	blx	r3
    123e:	bd10      	pop	{r4, pc}
    1240:	2000011c 	.word	0x2000011c

00001244 <SERCOM2_Handler>:
    1244:	b510      	push	{r4, lr}
    1246:	4b02      	ldr	r3, [pc, #8]	; (1250 <SERCOM2_Handler+0xc>)
    1248:	689b      	ldr	r3, [r3, #8]
    124a:	2002      	movs	r0, #2
    124c:	4798      	blx	r3
    124e:	bd10      	pop	{r4, pc}
    1250:	2000011c 	.word	0x2000011c

00001254 <SERCOM3_Handler>:
    1254:	b510      	push	{r4, lr}
    1256:	4b02      	ldr	r3, [pc, #8]	; (1260 <SERCOM3_Handler+0xc>)
    1258:	68db      	ldr	r3, [r3, #12]
    125a:	2003      	movs	r0, #3
    125c:	4798      	blx	r3
    125e:	bd10      	pop	{r4, pc}
    1260:	2000011c 	.word	0x2000011c

00001264 <SERCOM4_Handler>:
    1264:	b510      	push	{r4, lr}
    1266:	4b02      	ldr	r3, [pc, #8]	; (1270 <SERCOM4_Handler+0xc>)
    1268:	691b      	ldr	r3, [r3, #16]
    126a:	2004      	movs	r0, #4
    126c:	4798      	blx	r3
    126e:	bd10      	pop	{r4, pc}
    1270:	2000011c 	.word	0x2000011c

00001274 <SERCOM5_Handler>:
    1274:	b510      	push	{r4, lr}
    1276:	4b02      	ldr	r3, [pc, #8]	; (1280 <SERCOM5_Handler+0xc>)
    1278:	695b      	ldr	r3, [r3, #20]
    127a:	2005      	movs	r0, #5
    127c:	4798      	blx	r3
    127e:	bd10      	pop	{r4, pc}
    1280:	2000011c 	.word	0x2000011c

00001284 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1284:	4770      	bx	lr
	...

00001288 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1288:	4b0c      	ldr	r3, [pc, #48]	; (12bc <cpu_irq_enter_critical+0x34>)
    128a:	681b      	ldr	r3, [r3, #0]
    128c:	2b00      	cmp	r3, #0
    128e:	d106      	bne.n	129e <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1290:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1294:	2b00      	cmp	r3, #0
    1296:	d007      	beq.n	12a8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1298:	2200      	movs	r2, #0
    129a:	4b09      	ldr	r3, [pc, #36]	; (12c0 <cpu_irq_enter_critical+0x38>)
    129c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    129e:	4a07      	ldr	r2, [pc, #28]	; (12bc <cpu_irq_enter_critical+0x34>)
    12a0:	6813      	ldr	r3, [r2, #0]
    12a2:	3301      	adds	r3, #1
    12a4:	6013      	str	r3, [r2, #0]
}
    12a6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    12a8:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    12aa:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    12ae:	2200      	movs	r2, #0
    12b0:	4b04      	ldr	r3, [pc, #16]	; (12c4 <cpu_irq_enter_critical+0x3c>)
    12b2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    12b4:	3201      	adds	r2, #1
    12b6:	4b02      	ldr	r3, [pc, #8]	; (12c0 <cpu_irq_enter_critical+0x38>)
    12b8:	701a      	strb	r2, [r3, #0]
    12ba:	e7f0      	b.n	129e <cpu_irq_enter_critical+0x16>
    12bc:	20000134 	.word	0x20000134
    12c0:	20000138 	.word	0x20000138
    12c4:	20000004 	.word	0x20000004

000012c8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    12c8:	4b08      	ldr	r3, [pc, #32]	; (12ec <cpu_irq_leave_critical+0x24>)
    12ca:	681a      	ldr	r2, [r3, #0]
    12cc:	3a01      	subs	r2, #1
    12ce:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    12d0:	681b      	ldr	r3, [r3, #0]
    12d2:	2b00      	cmp	r3, #0
    12d4:	d109      	bne.n	12ea <cpu_irq_leave_critical+0x22>
    12d6:	4b06      	ldr	r3, [pc, #24]	; (12f0 <cpu_irq_leave_critical+0x28>)
    12d8:	781b      	ldrb	r3, [r3, #0]
    12da:	2b00      	cmp	r3, #0
    12dc:	d005      	beq.n	12ea <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    12de:	2201      	movs	r2, #1
    12e0:	4b04      	ldr	r3, [pc, #16]	; (12f4 <cpu_irq_leave_critical+0x2c>)
    12e2:	701a      	strb	r2, [r3, #0]
    12e4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    12e8:	b662      	cpsie	i
	}
}
    12ea:	4770      	bx	lr
    12ec:	20000134 	.word	0x20000134
    12f0:	20000138 	.word	0x20000138
    12f4:	20000004 	.word	0x20000004

000012f8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    12f8:	b510      	push	{r4, lr}
	switch (clock_source) {
    12fa:	2808      	cmp	r0, #8
    12fc:	d803      	bhi.n	1306 <system_clock_source_get_hz+0xe>
    12fe:	0080      	lsls	r0, r0, #2
    1300:	4b1c      	ldr	r3, [pc, #112]	; (1374 <system_clock_source_get_hz+0x7c>)
    1302:	581b      	ldr	r3, [r3, r0]
    1304:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1306:	2000      	movs	r0, #0
    1308:	e032      	b.n	1370 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    130a:	4b1b      	ldr	r3, [pc, #108]	; (1378 <system_clock_source_get_hz+0x80>)
    130c:	6918      	ldr	r0, [r3, #16]
    130e:	e02f      	b.n	1370 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1310:	4b1a      	ldr	r3, [pc, #104]	; (137c <system_clock_source_get_hz+0x84>)
    1312:	6a1b      	ldr	r3, [r3, #32]
    1314:	059b      	lsls	r3, r3, #22
    1316:	0f9b      	lsrs	r3, r3, #30
    1318:	4819      	ldr	r0, [pc, #100]	; (1380 <system_clock_source_get_hz+0x88>)
    131a:	40d8      	lsrs	r0, r3
    131c:	e028      	b.n	1370 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    131e:	4b16      	ldr	r3, [pc, #88]	; (1378 <system_clock_source_get_hz+0x80>)
    1320:	6958      	ldr	r0, [r3, #20]
    1322:	e025      	b.n	1370 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1324:	4b14      	ldr	r3, [pc, #80]	; (1378 <system_clock_source_get_hz+0x80>)
    1326:	681b      	ldr	r3, [r3, #0]
			return 0;
    1328:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    132a:	079b      	lsls	r3, r3, #30
    132c:	d520      	bpl.n	1370 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    132e:	4913      	ldr	r1, [pc, #76]	; (137c <system_clock_source_get_hz+0x84>)
    1330:	2210      	movs	r2, #16
    1332:	68cb      	ldr	r3, [r1, #12]
    1334:	421a      	tst	r2, r3
    1336:	d0fc      	beq.n	1332 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1338:	4b0f      	ldr	r3, [pc, #60]	; (1378 <system_clock_source_get_hz+0x80>)
    133a:	681a      	ldr	r2, [r3, #0]
    133c:	2324      	movs	r3, #36	; 0x24
    133e:	4013      	ands	r3, r2
    1340:	2b04      	cmp	r3, #4
    1342:	d001      	beq.n	1348 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1344:	480f      	ldr	r0, [pc, #60]	; (1384 <system_clock_source_get_hz+0x8c>)
    1346:	e013      	b.n	1370 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1348:	2000      	movs	r0, #0
    134a:	4b0f      	ldr	r3, [pc, #60]	; (1388 <system_clock_source_get_hz+0x90>)
    134c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    134e:	4b0a      	ldr	r3, [pc, #40]	; (1378 <system_clock_source_get_hz+0x80>)
    1350:	689b      	ldr	r3, [r3, #8]
    1352:	041b      	lsls	r3, r3, #16
    1354:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1356:	4358      	muls	r0, r3
    1358:	e00a      	b.n	1370 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    135a:	2350      	movs	r3, #80	; 0x50
    135c:	4a07      	ldr	r2, [pc, #28]	; (137c <system_clock_source_get_hz+0x84>)
    135e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1360:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1362:	075b      	lsls	r3, r3, #29
    1364:	d504      	bpl.n	1370 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    1366:	4b04      	ldr	r3, [pc, #16]	; (1378 <system_clock_source_get_hz+0x80>)
    1368:	68d8      	ldr	r0, [r3, #12]
    136a:	e001      	b.n	1370 <system_clock_source_get_hz+0x78>
		return 32768UL;
    136c:	2080      	movs	r0, #128	; 0x80
    136e:	0200      	lsls	r0, r0, #8
	}
}
    1370:	bd10      	pop	{r4, pc}
    1372:	46c0      	nop			; (mov r8, r8)
    1374:	00002bb4 	.word	0x00002bb4
    1378:	2000013c 	.word	0x2000013c
    137c:	40000800 	.word	0x40000800
    1380:	007a1200 	.word	0x007a1200
    1384:	02dc6c00 	.word	0x02dc6c00
    1388:	0000175d 	.word	0x0000175d

0000138c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    138c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    138e:	490c      	ldr	r1, [pc, #48]	; (13c0 <system_clock_source_osc8m_set_config+0x34>)
    1390:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1392:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1394:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1396:	7840      	ldrb	r0, [r0, #1]
    1398:	2201      	movs	r2, #1
    139a:	4010      	ands	r0, r2
    139c:	0180      	lsls	r0, r0, #6
    139e:	2640      	movs	r6, #64	; 0x40
    13a0:	43b3      	bics	r3, r6
    13a2:	4303      	orrs	r3, r0
    13a4:	402a      	ands	r2, r5
    13a6:	01d2      	lsls	r2, r2, #7
    13a8:	2080      	movs	r0, #128	; 0x80
    13aa:	4383      	bics	r3, r0
    13ac:	4313      	orrs	r3, r2
    13ae:	2203      	movs	r2, #3
    13b0:	4022      	ands	r2, r4
    13b2:	0212      	lsls	r2, r2, #8
    13b4:	4803      	ldr	r0, [pc, #12]	; (13c4 <system_clock_source_osc8m_set_config+0x38>)
    13b6:	4003      	ands	r3, r0
    13b8:	4313      	orrs	r3, r2
    13ba:	620b      	str	r3, [r1, #32]
}
    13bc:	bd70      	pop	{r4, r5, r6, pc}
    13be:	46c0      	nop			; (mov r8, r8)
    13c0:	40000800 	.word	0x40000800
    13c4:	fffffcff 	.word	0xfffffcff

000013c8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    13c8:	2808      	cmp	r0, #8
    13ca:	d803      	bhi.n	13d4 <system_clock_source_enable+0xc>
    13cc:	0080      	lsls	r0, r0, #2
    13ce:	4b25      	ldr	r3, [pc, #148]	; (1464 <system_clock_source_enable+0x9c>)
    13d0:	581b      	ldr	r3, [r3, r0]
    13d2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    13d4:	2017      	movs	r0, #23
    13d6:	e044      	b.n	1462 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    13d8:	4a23      	ldr	r2, [pc, #140]	; (1468 <system_clock_source_enable+0xa0>)
    13da:	6a13      	ldr	r3, [r2, #32]
    13dc:	2102      	movs	r1, #2
    13de:	430b      	orrs	r3, r1
    13e0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    13e2:	2000      	movs	r0, #0
    13e4:	e03d      	b.n	1462 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    13e6:	4a20      	ldr	r2, [pc, #128]	; (1468 <system_clock_source_enable+0xa0>)
    13e8:	6993      	ldr	r3, [r2, #24]
    13ea:	2102      	movs	r1, #2
    13ec:	430b      	orrs	r3, r1
    13ee:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    13f0:	2000      	movs	r0, #0
		break;
    13f2:	e036      	b.n	1462 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    13f4:	4a1c      	ldr	r2, [pc, #112]	; (1468 <system_clock_source_enable+0xa0>)
    13f6:	8a13      	ldrh	r3, [r2, #16]
    13f8:	2102      	movs	r1, #2
    13fa:	430b      	orrs	r3, r1
    13fc:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    13fe:	2000      	movs	r0, #0
		break;
    1400:	e02f      	b.n	1462 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1402:	4a19      	ldr	r2, [pc, #100]	; (1468 <system_clock_source_enable+0xa0>)
    1404:	8a93      	ldrh	r3, [r2, #20]
    1406:	2102      	movs	r1, #2
    1408:	430b      	orrs	r3, r1
    140a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    140c:	2000      	movs	r0, #0
		break;
    140e:	e028      	b.n	1462 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1410:	4916      	ldr	r1, [pc, #88]	; (146c <system_clock_source_enable+0xa4>)
    1412:	680b      	ldr	r3, [r1, #0]
    1414:	2202      	movs	r2, #2
    1416:	4313      	orrs	r3, r2
    1418:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    141a:	4b13      	ldr	r3, [pc, #76]	; (1468 <system_clock_source_enable+0xa0>)
    141c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    141e:	0019      	movs	r1, r3
    1420:	320e      	adds	r2, #14
    1422:	68cb      	ldr	r3, [r1, #12]
    1424:	421a      	tst	r2, r3
    1426:	d0fc      	beq.n	1422 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1428:	4a10      	ldr	r2, [pc, #64]	; (146c <system_clock_source_enable+0xa4>)
    142a:	6891      	ldr	r1, [r2, #8]
    142c:	4b0e      	ldr	r3, [pc, #56]	; (1468 <system_clock_source_enable+0xa0>)
    142e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1430:	6852      	ldr	r2, [r2, #4]
    1432:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1434:	2200      	movs	r2, #0
    1436:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1438:	0019      	movs	r1, r3
    143a:	3210      	adds	r2, #16
    143c:	68cb      	ldr	r3, [r1, #12]
    143e:	421a      	tst	r2, r3
    1440:	d0fc      	beq.n	143c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1442:	4b0a      	ldr	r3, [pc, #40]	; (146c <system_clock_source_enable+0xa4>)
    1444:	681b      	ldr	r3, [r3, #0]
    1446:	b29b      	uxth	r3, r3
    1448:	4a07      	ldr	r2, [pc, #28]	; (1468 <system_clock_source_enable+0xa0>)
    144a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    144c:	2000      	movs	r0, #0
    144e:	e008      	b.n	1462 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1450:	4905      	ldr	r1, [pc, #20]	; (1468 <system_clock_source_enable+0xa0>)
    1452:	2244      	movs	r2, #68	; 0x44
    1454:	5c8b      	ldrb	r3, [r1, r2]
    1456:	2002      	movs	r0, #2
    1458:	4303      	orrs	r3, r0
    145a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    145c:	2000      	movs	r0, #0
		break;
    145e:	e000      	b.n	1462 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1460:	2000      	movs	r0, #0
}
    1462:	4770      	bx	lr
    1464:	00002bd8 	.word	0x00002bd8
    1468:	40000800 	.word	0x40000800
    146c:	2000013c 	.word	0x2000013c

00001470 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1470:	b530      	push	{r4, r5, lr}
    1472:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1474:	22c2      	movs	r2, #194	; 0xc2
    1476:	00d2      	lsls	r2, r2, #3
    1478:	4b1a      	ldr	r3, [pc, #104]	; (14e4 <system_clock_init+0x74>)
    147a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    147c:	4a1a      	ldr	r2, [pc, #104]	; (14e8 <system_clock_init+0x78>)
    147e:	6853      	ldr	r3, [r2, #4]
    1480:	211e      	movs	r1, #30
    1482:	438b      	bics	r3, r1
    1484:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1486:	2301      	movs	r3, #1
    1488:	466a      	mov	r2, sp
    148a:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    148c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    148e:	4d17      	ldr	r5, [pc, #92]	; (14ec <system_clock_init+0x7c>)
    1490:	b2e0      	uxtb	r0, r4
    1492:	4669      	mov	r1, sp
    1494:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1496:	3401      	adds	r4, #1
    1498:	2c25      	cmp	r4, #37	; 0x25
    149a:	d1f9      	bne.n	1490 <system_clock_init+0x20>
	config->run_in_standby  = false;
    149c:	a803      	add	r0, sp, #12
    149e:	2400      	movs	r4, #0
    14a0:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    14a2:	2501      	movs	r5, #1
    14a4:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    14a6:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    14a8:	4b11      	ldr	r3, [pc, #68]	; (14f0 <system_clock_init+0x80>)
    14aa:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    14ac:	2006      	movs	r0, #6
    14ae:	4b11      	ldr	r3, [pc, #68]	; (14f4 <system_clock_init+0x84>)
    14b0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    14b2:	4b11      	ldr	r3, [pc, #68]	; (14f8 <system_clock_init+0x88>)
    14b4:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    14b6:	4b11      	ldr	r3, [pc, #68]	; (14fc <system_clock_init+0x8c>)
    14b8:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    14ba:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    14bc:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    14be:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    14c0:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    14c2:	466b      	mov	r3, sp
    14c4:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35 || (WLR089)
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    14c6:	2306      	movs	r3, #6
    14c8:	466a      	mov	r2, sp
    14ca:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    14cc:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    14ce:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    14d0:	4669      	mov	r1, sp
    14d2:	2000      	movs	r0, #0
    14d4:	4b0a      	ldr	r3, [pc, #40]	; (1500 <system_clock_init+0x90>)
    14d6:	4798      	blx	r3
    14d8:	2000      	movs	r0, #0
    14da:	4b0a      	ldr	r3, [pc, #40]	; (1504 <system_clock_init+0x94>)
    14dc:	4798      	blx	r3
#endif
}
    14de:	b005      	add	sp, #20
    14e0:	bd30      	pop	{r4, r5, pc}
    14e2:	46c0      	nop			; (mov r8, r8)
    14e4:	40000800 	.word	0x40000800
    14e8:	41004000 	.word	0x41004000
    14ec:	00001741 	.word	0x00001741
    14f0:	0000138d 	.word	0x0000138d
    14f4:	000013c9 	.word	0x000013c9
    14f8:	00001509 	.word	0x00001509
    14fc:	40000400 	.word	0x40000400
    1500:	0000152d 	.word	0x0000152d
    1504:	000015e5 	.word	0x000015e5

00001508 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1508:	4a06      	ldr	r2, [pc, #24]	; (1524 <system_gclk_init+0x1c>)
    150a:	6993      	ldr	r3, [r2, #24]
    150c:	2108      	movs	r1, #8
    150e:	430b      	orrs	r3, r1
    1510:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1512:	2201      	movs	r2, #1
    1514:	4b04      	ldr	r3, [pc, #16]	; (1528 <system_gclk_init+0x20>)
    1516:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1518:	0019      	movs	r1, r3
    151a:	780b      	ldrb	r3, [r1, #0]
    151c:	4213      	tst	r3, r2
    151e:	d1fc      	bne.n	151a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1520:	4770      	bx	lr
    1522:	46c0      	nop			; (mov r8, r8)
    1524:	40000400 	.word	0x40000400
    1528:	40000c00 	.word	0x40000c00

0000152c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    152c:	b570      	push	{r4, r5, r6, lr}
    152e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1530:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1532:	780d      	ldrb	r5, [r1, #0]
    1534:	022d      	lsls	r5, r5, #8
    1536:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1538:	784b      	ldrb	r3, [r1, #1]
    153a:	2b00      	cmp	r3, #0
    153c:	d002      	beq.n	1544 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    153e:	2380      	movs	r3, #128	; 0x80
    1540:	02db      	lsls	r3, r3, #11
    1542:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1544:	7a4b      	ldrb	r3, [r1, #9]
    1546:	2b00      	cmp	r3, #0
    1548:	d002      	beq.n	1550 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    154a:	2380      	movs	r3, #128	; 0x80
    154c:	031b      	lsls	r3, r3, #12
    154e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1550:	6848      	ldr	r0, [r1, #4]
    1552:	2801      	cmp	r0, #1
    1554:	d910      	bls.n	1578 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1556:	1e43      	subs	r3, r0, #1
    1558:	4218      	tst	r0, r3
    155a:	d134      	bne.n	15c6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    155c:	2802      	cmp	r0, #2
    155e:	d930      	bls.n	15c2 <system_gclk_gen_set_config+0x96>
    1560:	2302      	movs	r3, #2
    1562:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1564:	3201      	adds	r2, #1
						mask <<= 1) {
    1566:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1568:	4298      	cmp	r0, r3
    156a:	d8fb      	bhi.n	1564 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    156c:	0212      	lsls	r2, r2, #8
    156e:	4332      	orrs	r2, r6
    1570:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1572:	2380      	movs	r3, #128	; 0x80
    1574:	035b      	lsls	r3, r3, #13
    1576:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1578:	7a0b      	ldrb	r3, [r1, #8]
    157a:	2b00      	cmp	r3, #0
    157c:	d002      	beq.n	1584 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    157e:	2380      	movs	r3, #128	; 0x80
    1580:	039b      	lsls	r3, r3, #14
    1582:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1584:	4a13      	ldr	r2, [pc, #76]	; (15d4 <system_gclk_gen_set_config+0xa8>)
    1586:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1588:	b25b      	sxtb	r3, r3
    158a:	2b00      	cmp	r3, #0
    158c:	dbfb      	blt.n	1586 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    158e:	4b12      	ldr	r3, [pc, #72]	; (15d8 <system_gclk_gen_set_config+0xac>)
    1590:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1592:	4b12      	ldr	r3, [pc, #72]	; (15dc <system_gclk_gen_set_config+0xb0>)
    1594:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1596:	4a0f      	ldr	r2, [pc, #60]	; (15d4 <system_gclk_gen_set_config+0xa8>)
    1598:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    159a:	b25b      	sxtb	r3, r3
    159c:	2b00      	cmp	r3, #0
    159e:	dbfb      	blt.n	1598 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    15a0:	4b0c      	ldr	r3, [pc, #48]	; (15d4 <system_gclk_gen_set_config+0xa8>)
    15a2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15a4:	001a      	movs	r2, r3
    15a6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    15a8:	b25b      	sxtb	r3, r3
    15aa:	2b00      	cmp	r3, #0
    15ac:	dbfb      	blt.n	15a6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    15ae:	4a09      	ldr	r2, [pc, #36]	; (15d4 <system_gclk_gen_set_config+0xa8>)
    15b0:	6853      	ldr	r3, [r2, #4]
    15b2:	2180      	movs	r1, #128	; 0x80
    15b4:	0249      	lsls	r1, r1, #9
    15b6:	400b      	ands	r3, r1
    15b8:	431d      	orrs	r5, r3
    15ba:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    15bc:	4b08      	ldr	r3, [pc, #32]	; (15e0 <system_gclk_gen_set_config+0xb4>)
    15be:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    15c0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    15c2:	2200      	movs	r2, #0
    15c4:	e7d2      	b.n	156c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    15c6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    15c8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    15ca:	2380      	movs	r3, #128	; 0x80
    15cc:	029b      	lsls	r3, r3, #10
    15ce:	431d      	orrs	r5, r3
    15d0:	e7d2      	b.n	1578 <system_gclk_gen_set_config+0x4c>
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	40000c00 	.word	0x40000c00
    15d8:	00001289 	.word	0x00001289
    15dc:	40000c08 	.word	0x40000c08
    15e0:	000012c9 	.word	0x000012c9

000015e4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    15e4:	b510      	push	{r4, lr}
    15e6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15e8:	4a0b      	ldr	r2, [pc, #44]	; (1618 <system_gclk_gen_enable+0x34>)
    15ea:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    15ec:	b25b      	sxtb	r3, r3
    15ee:	2b00      	cmp	r3, #0
    15f0:	dbfb      	blt.n	15ea <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    15f2:	4b0a      	ldr	r3, [pc, #40]	; (161c <system_gclk_gen_enable+0x38>)
    15f4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    15f6:	4b0a      	ldr	r3, [pc, #40]	; (1620 <system_gclk_gen_enable+0x3c>)
    15f8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15fa:	4a07      	ldr	r2, [pc, #28]	; (1618 <system_gclk_gen_enable+0x34>)
    15fc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    15fe:	b25b      	sxtb	r3, r3
    1600:	2b00      	cmp	r3, #0
    1602:	dbfb      	blt.n	15fc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1604:	4a04      	ldr	r2, [pc, #16]	; (1618 <system_gclk_gen_enable+0x34>)
    1606:	6851      	ldr	r1, [r2, #4]
    1608:	2380      	movs	r3, #128	; 0x80
    160a:	025b      	lsls	r3, r3, #9
    160c:	430b      	orrs	r3, r1
    160e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1610:	4b04      	ldr	r3, [pc, #16]	; (1624 <system_gclk_gen_enable+0x40>)
    1612:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1614:	bd10      	pop	{r4, pc}
    1616:	46c0      	nop			; (mov r8, r8)
    1618:	40000c00 	.word	0x40000c00
    161c:	00001289 	.word	0x00001289
    1620:	40000c04 	.word	0x40000c04
    1624:	000012c9 	.word	0x000012c9

00001628 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1628:	b570      	push	{r4, r5, r6, lr}
    162a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    162c:	4a1a      	ldr	r2, [pc, #104]	; (1698 <system_gclk_gen_get_hz+0x70>)
    162e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1630:	b25b      	sxtb	r3, r3
    1632:	2b00      	cmp	r3, #0
    1634:	dbfb      	blt.n	162e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1636:	4b19      	ldr	r3, [pc, #100]	; (169c <system_gclk_gen_get_hz+0x74>)
    1638:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    163a:	4b19      	ldr	r3, [pc, #100]	; (16a0 <system_gclk_gen_get_hz+0x78>)
    163c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    163e:	4a16      	ldr	r2, [pc, #88]	; (1698 <system_gclk_gen_get_hz+0x70>)
    1640:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1642:	b25b      	sxtb	r3, r3
    1644:	2b00      	cmp	r3, #0
    1646:	dbfb      	blt.n	1640 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1648:	4e13      	ldr	r6, [pc, #76]	; (1698 <system_gclk_gen_get_hz+0x70>)
    164a:	6870      	ldr	r0, [r6, #4]
    164c:	04c0      	lsls	r0, r0, #19
    164e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1650:	4b14      	ldr	r3, [pc, #80]	; (16a4 <system_gclk_gen_get_hz+0x7c>)
    1652:	4798      	blx	r3
    1654:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1656:	4b12      	ldr	r3, [pc, #72]	; (16a0 <system_gclk_gen_get_hz+0x78>)
    1658:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    165a:	6876      	ldr	r6, [r6, #4]
    165c:	02f6      	lsls	r6, r6, #11
    165e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1660:	4b11      	ldr	r3, [pc, #68]	; (16a8 <system_gclk_gen_get_hz+0x80>)
    1662:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1664:	4a0c      	ldr	r2, [pc, #48]	; (1698 <system_gclk_gen_get_hz+0x70>)
    1666:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1668:	b25b      	sxtb	r3, r3
    166a:	2b00      	cmp	r3, #0
    166c:	dbfb      	blt.n	1666 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    166e:	4b0a      	ldr	r3, [pc, #40]	; (1698 <system_gclk_gen_get_hz+0x70>)
    1670:	689c      	ldr	r4, [r3, #8]
    1672:	0224      	lsls	r4, r4, #8
    1674:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1676:	4b0d      	ldr	r3, [pc, #52]	; (16ac <system_gclk_gen_get_hz+0x84>)
    1678:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    167a:	2e00      	cmp	r6, #0
    167c:	d107      	bne.n	168e <system_gclk_gen_get_hz+0x66>
    167e:	2c01      	cmp	r4, #1
    1680:	d907      	bls.n	1692 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1682:	0021      	movs	r1, r4
    1684:	0028      	movs	r0, r5
    1686:	4b0a      	ldr	r3, [pc, #40]	; (16b0 <system_gclk_gen_get_hz+0x88>)
    1688:	4798      	blx	r3
    168a:	0005      	movs	r5, r0
    168c:	e001      	b.n	1692 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    168e:	3401      	adds	r4, #1
    1690:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1692:	0028      	movs	r0, r5
    1694:	bd70      	pop	{r4, r5, r6, pc}
    1696:	46c0      	nop			; (mov r8, r8)
    1698:	40000c00 	.word	0x40000c00
    169c:	00001289 	.word	0x00001289
    16a0:	40000c04 	.word	0x40000c04
    16a4:	000012f9 	.word	0x000012f9
    16a8:	40000c08 	.word	0x40000c08
    16ac:	000012c9 	.word	0x000012c9
    16b0:	000019d9 	.word	0x000019d9

000016b4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    16b4:	b510      	push	{r4, lr}
    16b6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    16b8:	4b06      	ldr	r3, [pc, #24]	; (16d4 <system_gclk_chan_enable+0x20>)
    16ba:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    16bc:	4b06      	ldr	r3, [pc, #24]	; (16d8 <system_gclk_chan_enable+0x24>)
    16be:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    16c0:	4a06      	ldr	r2, [pc, #24]	; (16dc <system_gclk_chan_enable+0x28>)
    16c2:	8853      	ldrh	r3, [r2, #2]
    16c4:	2180      	movs	r1, #128	; 0x80
    16c6:	01c9      	lsls	r1, r1, #7
    16c8:	430b      	orrs	r3, r1
    16ca:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    16cc:	4b04      	ldr	r3, [pc, #16]	; (16e0 <system_gclk_chan_enable+0x2c>)
    16ce:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    16d0:	bd10      	pop	{r4, pc}
    16d2:	46c0      	nop			; (mov r8, r8)
    16d4:	00001289 	.word	0x00001289
    16d8:	40000c02 	.word	0x40000c02
    16dc:	40000c00 	.word	0x40000c00
    16e0:	000012c9 	.word	0x000012c9

000016e4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    16e4:	b510      	push	{r4, lr}
    16e6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    16e8:	4b0f      	ldr	r3, [pc, #60]	; (1728 <system_gclk_chan_disable+0x44>)
    16ea:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    16ec:	4b0f      	ldr	r3, [pc, #60]	; (172c <system_gclk_chan_disable+0x48>)
    16ee:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    16f0:	4a0f      	ldr	r2, [pc, #60]	; (1730 <system_gclk_chan_disable+0x4c>)
    16f2:	8853      	ldrh	r3, [r2, #2]
    16f4:	051b      	lsls	r3, r3, #20
    16f6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    16f8:	8853      	ldrh	r3, [r2, #2]
    16fa:	490e      	ldr	r1, [pc, #56]	; (1734 <system_gclk_chan_disable+0x50>)
    16fc:	400b      	ands	r3, r1
    16fe:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1700:	8853      	ldrh	r3, [r2, #2]
    1702:	490d      	ldr	r1, [pc, #52]	; (1738 <system_gclk_chan_disable+0x54>)
    1704:	400b      	ands	r3, r1
    1706:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1708:	0011      	movs	r1, r2
    170a:	2280      	movs	r2, #128	; 0x80
    170c:	01d2      	lsls	r2, r2, #7
    170e:	884b      	ldrh	r3, [r1, #2]
    1710:	4213      	tst	r3, r2
    1712:	d1fc      	bne.n	170e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1714:	4906      	ldr	r1, [pc, #24]	; (1730 <system_gclk_chan_disable+0x4c>)
    1716:	884a      	ldrh	r2, [r1, #2]
    1718:	0203      	lsls	r3, r0, #8
    171a:	4806      	ldr	r0, [pc, #24]	; (1734 <system_gclk_chan_disable+0x50>)
    171c:	4002      	ands	r2, r0
    171e:	4313      	orrs	r3, r2
    1720:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1722:	4b06      	ldr	r3, [pc, #24]	; (173c <system_gclk_chan_disable+0x58>)
    1724:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1726:	bd10      	pop	{r4, pc}
    1728:	00001289 	.word	0x00001289
    172c:	40000c02 	.word	0x40000c02
    1730:	40000c00 	.word	0x40000c00
    1734:	fffff0ff 	.word	0xfffff0ff
    1738:	ffffbfff 	.word	0xffffbfff
    173c:	000012c9 	.word	0x000012c9

00001740 <system_gclk_chan_set_config>:
{
    1740:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1742:	780c      	ldrb	r4, [r1, #0]
    1744:	0224      	lsls	r4, r4, #8
    1746:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1748:	4b02      	ldr	r3, [pc, #8]	; (1754 <system_gclk_chan_set_config+0x14>)
    174a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    174c:	b2a4      	uxth	r4, r4
    174e:	4b02      	ldr	r3, [pc, #8]	; (1758 <system_gclk_chan_set_config+0x18>)
    1750:	805c      	strh	r4, [r3, #2]
}
    1752:	bd10      	pop	{r4, pc}
    1754:	000016e5 	.word	0x000016e5
    1758:	40000c00 	.word	0x40000c00

0000175c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    175c:	b510      	push	{r4, lr}
    175e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1760:	4b06      	ldr	r3, [pc, #24]	; (177c <system_gclk_chan_get_hz+0x20>)
    1762:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1764:	4b06      	ldr	r3, [pc, #24]	; (1780 <system_gclk_chan_get_hz+0x24>)
    1766:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1768:	4b06      	ldr	r3, [pc, #24]	; (1784 <system_gclk_chan_get_hz+0x28>)
    176a:	885c      	ldrh	r4, [r3, #2]
    176c:	0524      	lsls	r4, r4, #20
    176e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1770:	4b05      	ldr	r3, [pc, #20]	; (1788 <system_gclk_chan_get_hz+0x2c>)
    1772:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1774:	0020      	movs	r0, r4
    1776:	4b05      	ldr	r3, [pc, #20]	; (178c <system_gclk_chan_get_hz+0x30>)
    1778:	4798      	blx	r3
}
    177a:	bd10      	pop	{r4, pc}
    177c:	00001289 	.word	0x00001289
    1780:	40000c02 	.word	0x40000c02
    1784:	40000c00 	.word	0x40000c00
    1788:	000012c9 	.word	0x000012c9
    178c:	00001629 	.word	0x00001629

00001790 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1790:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1792:	78d3      	ldrb	r3, [r2, #3]
    1794:	2b00      	cmp	r3, #0
    1796:	d135      	bne.n	1804 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1798:	7813      	ldrb	r3, [r2, #0]
    179a:	2b80      	cmp	r3, #128	; 0x80
    179c:	d029      	beq.n	17f2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    179e:	061b      	lsls	r3, r3, #24
    17a0:	2480      	movs	r4, #128	; 0x80
    17a2:	0264      	lsls	r4, r4, #9
    17a4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    17a6:	7854      	ldrb	r4, [r2, #1]
    17a8:	2502      	movs	r5, #2
    17aa:	43ac      	bics	r4, r5
    17ac:	d106      	bne.n	17bc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    17ae:	7894      	ldrb	r4, [r2, #2]
    17b0:	2c00      	cmp	r4, #0
    17b2:	d120      	bne.n	17f6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    17b4:	2480      	movs	r4, #128	; 0x80
    17b6:	02a4      	lsls	r4, r4, #10
    17b8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    17ba:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    17bc:	7854      	ldrb	r4, [r2, #1]
    17be:	3c01      	subs	r4, #1
    17c0:	2c01      	cmp	r4, #1
    17c2:	d91c      	bls.n	17fe <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    17c4:	040d      	lsls	r5, r1, #16
    17c6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    17c8:	24a0      	movs	r4, #160	; 0xa0
    17ca:	05e4      	lsls	r4, r4, #23
    17cc:	432c      	orrs	r4, r5
    17ce:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    17d0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    17d2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    17d4:	24d0      	movs	r4, #208	; 0xd0
    17d6:	0624      	lsls	r4, r4, #24
    17d8:	432c      	orrs	r4, r5
    17da:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    17dc:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    17de:	78d4      	ldrb	r4, [r2, #3]
    17e0:	2c00      	cmp	r4, #0
    17e2:	d122      	bne.n	182a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    17e4:	035b      	lsls	r3, r3, #13
    17e6:	d51c      	bpl.n	1822 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    17e8:	7893      	ldrb	r3, [r2, #2]
    17ea:	2b01      	cmp	r3, #1
    17ec:	d01e      	beq.n	182c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    17ee:	6141      	str	r1, [r0, #20]
    17f0:	e017      	b.n	1822 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    17f2:	2300      	movs	r3, #0
    17f4:	e7d7      	b.n	17a6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    17f6:	24c0      	movs	r4, #192	; 0xc0
    17f8:	02e4      	lsls	r4, r4, #11
    17fa:	4323      	orrs	r3, r4
    17fc:	e7dd      	b.n	17ba <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    17fe:	4c0d      	ldr	r4, [pc, #52]	; (1834 <_system_pinmux_config+0xa4>)
    1800:	4023      	ands	r3, r4
    1802:	e7df      	b.n	17c4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1804:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1806:	040c      	lsls	r4, r1, #16
    1808:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    180a:	23a0      	movs	r3, #160	; 0xa0
    180c:	05db      	lsls	r3, r3, #23
    180e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1810:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1812:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1814:	23d0      	movs	r3, #208	; 0xd0
    1816:	061b      	lsls	r3, r3, #24
    1818:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    181a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    181c:	78d3      	ldrb	r3, [r2, #3]
    181e:	2b00      	cmp	r3, #0
    1820:	d103      	bne.n	182a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1822:	7853      	ldrb	r3, [r2, #1]
    1824:	3b01      	subs	r3, #1
    1826:	2b01      	cmp	r3, #1
    1828:	d902      	bls.n	1830 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    182a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    182c:	6181      	str	r1, [r0, #24]
    182e:	e7f8      	b.n	1822 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1830:	6081      	str	r1, [r0, #8]
}
    1832:	e7fa      	b.n	182a <_system_pinmux_config+0x9a>
    1834:	fffbffff 	.word	0xfffbffff

00001838 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1838:	b510      	push	{r4, lr}
    183a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    183c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    183e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1840:	2900      	cmp	r1, #0
    1842:	d104      	bne.n	184e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1844:	0943      	lsrs	r3, r0, #5
    1846:	01db      	lsls	r3, r3, #7
    1848:	4905      	ldr	r1, [pc, #20]	; (1860 <system_pinmux_pin_set_config+0x28>)
    184a:	468c      	mov	ip, r1
    184c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    184e:	241f      	movs	r4, #31
    1850:	4020      	ands	r0, r4
    1852:	2101      	movs	r1, #1
    1854:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1856:	0018      	movs	r0, r3
    1858:	4b02      	ldr	r3, [pc, #8]	; (1864 <system_pinmux_pin_set_config+0x2c>)
    185a:	4798      	blx	r3
}
    185c:	bd10      	pop	{r4, pc}
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	41004400 	.word	0x41004400
    1864:	00001791 	.word	0x00001791

00001868 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1868:	4770      	bx	lr
	...

0000186c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    186c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    186e:	4b05      	ldr	r3, [pc, #20]	; (1884 <system_init+0x18>)
    1870:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1872:	4b05      	ldr	r3, [pc, #20]	; (1888 <system_init+0x1c>)
    1874:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1876:	4b05      	ldr	r3, [pc, #20]	; (188c <system_init+0x20>)
    1878:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    187a:	4b05      	ldr	r3, [pc, #20]	; (1890 <system_init+0x24>)
    187c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    187e:	4b05      	ldr	r3, [pc, #20]	; (1894 <system_init+0x28>)
    1880:	4798      	blx	r3
}
    1882:	bd10      	pop	{r4, pc}
    1884:	00001471 	.word	0x00001471
    1888:	00001285 	.word	0x00001285
    188c:	00001869 	.word	0x00001869
    1890:	00001869 	.word	0x00001869
    1894:	00001869 	.word	0x00001869

00001898 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1898:	e7fe      	b.n	1898 <Dummy_Handler>
	...

0000189c <Reset_Handler>:
{
    189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    189e:	4a2a      	ldr	r2, [pc, #168]	; (1948 <Reset_Handler+0xac>)
    18a0:	4b2a      	ldr	r3, [pc, #168]	; (194c <Reset_Handler+0xb0>)
    18a2:	429a      	cmp	r2, r3
    18a4:	d011      	beq.n	18ca <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    18a6:	001a      	movs	r2, r3
    18a8:	4b29      	ldr	r3, [pc, #164]	; (1950 <Reset_Handler+0xb4>)
    18aa:	429a      	cmp	r2, r3
    18ac:	d20d      	bcs.n	18ca <Reset_Handler+0x2e>
    18ae:	4a29      	ldr	r2, [pc, #164]	; (1954 <Reset_Handler+0xb8>)
    18b0:	3303      	adds	r3, #3
    18b2:	1a9b      	subs	r3, r3, r2
    18b4:	089b      	lsrs	r3, r3, #2
    18b6:	3301      	adds	r3, #1
    18b8:	009b      	lsls	r3, r3, #2
    18ba:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    18bc:	4823      	ldr	r0, [pc, #140]	; (194c <Reset_Handler+0xb0>)
    18be:	4922      	ldr	r1, [pc, #136]	; (1948 <Reset_Handler+0xac>)
    18c0:	588c      	ldr	r4, [r1, r2]
    18c2:	5084      	str	r4, [r0, r2]
    18c4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    18c6:	429a      	cmp	r2, r3
    18c8:	d1fa      	bne.n	18c0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    18ca:	4a23      	ldr	r2, [pc, #140]	; (1958 <Reset_Handler+0xbc>)
    18cc:	4b23      	ldr	r3, [pc, #140]	; (195c <Reset_Handler+0xc0>)
    18ce:	429a      	cmp	r2, r3
    18d0:	d20a      	bcs.n	18e8 <Reset_Handler+0x4c>
    18d2:	43d3      	mvns	r3, r2
    18d4:	4921      	ldr	r1, [pc, #132]	; (195c <Reset_Handler+0xc0>)
    18d6:	185b      	adds	r3, r3, r1
    18d8:	2103      	movs	r1, #3
    18da:	438b      	bics	r3, r1
    18dc:	3304      	adds	r3, #4
    18de:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    18e0:	2100      	movs	r1, #0
    18e2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    18e4:	4293      	cmp	r3, r2
    18e6:	d1fc      	bne.n	18e2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    18e8:	4a1d      	ldr	r2, [pc, #116]	; (1960 <Reset_Handler+0xc4>)
    18ea:	21ff      	movs	r1, #255	; 0xff
    18ec:	4b1d      	ldr	r3, [pc, #116]	; (1964 <Reset_Handler+0xc8>)
    18ee:	438b      	bics	r3, r1
    18f0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    18f2:	39fd      	subs	r1, #253	; 0xfd
    18f4:	2390      	movs	r3, #144	; 0x90
    18f6:	005b      	lsls	r3, r3, #1
    18f8:	4a1b      	ldr	r2, [pc, #108]	; (1968 <Reset_Handler+0xcc>)
    18fa:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    18fc:	4a1b      	ldr	r2, [pc, #108]	; (196c <Reset_Handler+0xd0>)
    18fe:	78d3      	ldrb	r3, [r2, #3]
    1900:	2503      	movs	r5, #3
    1902:	43ab      	bics	r3, r5
    1904:	2402      	movs	r4, #2
    1906:	4323      	orrs	r3, r4
    1908:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    190a:	78d3      	ldrb	r3, [r2, #3]
    190c:	270c      	movs	r7, #12
    190e:	43bb      	bics	r3, r7
    1910:	2608      	movs	r6, #8
    1912:	4333      	orrs	r3, r6
    1914:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1916:	4b16      	ldr	r3, [pc, #88]	; (1970 <Reset_Handler+0xd4>)
    1918:	7b98      	ldrb	r0, [r3, #14]
    191a:	2230      	movs	r2, #48	; 0x30
    191c:	4390      	bics	r0, r2
    191e:	2220      	movs	r2, #32
    1920:	4310      	orrs	r0, r2
    1922:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1924:	7b99      	ldrb	r1, [r3, #14]
    1926:	43b9      	bics	r1, r7
    1928:	4331      	orrs	r1, r6
    192a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    192c:	7b9a      	ldrb	r2, [r3, #14]
    192e:	43aa      	bics	r2, r5
    1930:	4322      	orrs	r2, r4
    1932:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1934:	4a0f      	ldr	r2, [pc, #60]	; (1974 <Reset_Handler+0xd8>)
    1936:	6853      	ldr	r3, [r2, #4]
    1938:	2180      	movs	r1, #128	; 0x80
    193a:	430b      	orrs	r3, r1
    193c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    193e:	4b0e      	ldr	r3, [pc, #56]	; (1978 <Reset_Handler+0xdc>)
    1940:	4798      	blx	r3
        main();
    1942:	4b0e      	ldr	r3, [pc, #56]	; (197c <Reset_Handler+0xe0>)
    1944:	4798      	blx	r3
    1946:	e7fe      	b.n	1946 <Reset_Handler+0xaa>
    1948:	00002cb4 	.word	0x00002cb4
    194c:	20000000 	.word	0x20000000
    1950:	2000006c 	.word	0x2000006c
    1954:	20000004 	.word	0x20000004
    1958:	2000006c 	.word	0x2000006c
    195c:	2000018c 	.word	0x2000018c
    1960:	e000ed00 	.word	0xe000ed00
    1964:	00000000 	.word	0x00000000
    1968:	41007000 	.word	0x41007000
    196c:	41005000 	.word	0x41005000
    1970:	41004800 	.word	0x41004800
    1974:	41004000 	.word	0x41004000
    1978:	00001b45 	.word	0x00001b45
    197c:	000019bd 	.word	0x000019bd

00001980 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1980:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1982:	4a06      	ldr	r2, [pc, #24]	; (199c <_sbrk+0x1c>)
    1984:	6812      	ldr	r2, [r2, #0]
    1986:	2a00      	cmp	r2, #0
    1988:	d004      	beq.n	1994 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    198a:	4a04      	ldr	r2, [pc, #16]	; (199c <_sbrk+0x1c>)
    198c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    198e:	18c3      	adds	r3, r0, r3
    1990:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1992:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1994:	4902      	ldr	r1, [pc, #8]	; (19a0 <_sbrk+0x20>)
    1996:	4a01      	ldr	r2, [pc, #4]	; (199c <_sbrk+0x1c>)
    1998:	6011      	str	r1, [r2, #0]
    199a:	e7f6      	b.n	198a <_sbrk+0xa>
    199c:	20000154 	.word	0x20000154
    19a0:	20002190 	.word	0x20002190

000019a4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    19a4:	2001      	movs	r0, #1
    19a6:	4240      	negs	r0, r0
    19a8:	4770      	bx	lr

000019aa <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    19aa:	2380      	movs	r3, #128	; 0x80
    19ac:	019b      	lsls	r3, r3, #6
    19ae:	604b      	str	r3, [r1, #4]

	return 0;
}
    19b0:	2000      	movs	r0, #0
    19b2:	4770      	bx	lr

000019b4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    19b4:	2001      	movs	r0, #1
    19b6:	4770      	bx	lr

000019b8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    19b8:	2000      	movs	r0, #0
    19ba:	4770      	bx	lr

000019bc <main>:
#include <asf.h>
#include "console.h"
#include "spi_slave.h"

int main (void)
{
    19bc:	b510      	push	{r4, lr}
	system_init();
    19be:	4b03      	ldr	r3, [pc, #12]	; (19cc <main+0x10>)
    19c0:	4798      	blx	r3
	console_init();
    19c2:	4b03      	ldr	r3, [pc, #12]	; (19d0 <main+0x14>)
    19c4:	4798      	blx	r3
	spi_slave_init();
    19c6:	4b03      	ldr	r3, [pc, #12]	; (19d4 <main+0x18>)
    19c8:	4798      	blx	r3
    19ca:	e7fe      	b.n	19ca <main+0xe>
    19cc:	0000186d 	.word	0x0000186d
    19d0:	00000159 	.word	0x00000159
    19d4:	0000034d 	.word	0x0000034d

000019d8 <__udivsi3>:
    19d8:	2200      	movs	r2, #0
    19da:	0843      	lsrs	r3, r0, #1
    19dc:	428b      	cmp	r3, r1
    19de:	d374      	bcc.n	1aca <__udivsi3+0xf2>
    19e0:	0903      	lsrs	r3, r0, #4
    19e2:	428b      	cmp	r3, r1
    19e4:	d35f      	bcc.n	1aa6 <__udivsi3+0xce>
    19e6:	0a03      	lsrs	r3, r0, #8
    19e8:	428b      	cmp	r3, r1
    19ea:	d344      	bcc.n	1a76 <__udivsi3+0x9e>
    19ec:	0b03      	lsrs	r3, r0, #12
    19ee:	428b      	cmp	r3, r1
    19f0:	d328      	bcc.n	1a44 <__udivsi3+0x6c>
    19f2:	0c03      	lsrs	r3, r0, #16
    19f4:	428b      	cmp	r3, r1
    19f6:	d30d      	bcc.n	1a14 <__udivsi3+0x3c>
    19f8:	22ff      	movs	r2, #255	; 0xff
    19fa:	0209      	lsls	r1, r1, #8
    19fc:	ba12      	rev	r2, r2
    19fe:	0c03      	lsrs	r3, r0, #16
    1a00:	428b      	cmp	r3, r1
    1a02:	d302      	bcc.n	1a0a <__udivsi3+0x32>
    1a04:	1212      	asrs	r2, r2, #8
    1a06:	0209      	lsls	r1, r1, #8
    1a08:	d065      	beq.n	1ad6 <__udivsi3+0xfe>
    1a0a:	0b03      	lsrs	r3, r0, #12
    1a0c:	428b      	cmp	r3, r1
    1a0e:	d319      	bcc.n	1a44 <__udivsi3+0x6c>
    1a10:	e000      	b.n	1a14 <__udivsi3+0x3c>
    1a12:	0a09      	lsrs	r1, r1, #8
    1a14:	0bc3      	lsrs	r3, r0, #15
    1a16:	428b      	cmp	r3, r1
    1a18:	d301      	bcc.n	1a1e <__udivsi3+0x46>
    1a1a:	03cb      	lsls	r3, r1, #15
    1a1c:	1ac0      	subs	r0, r0, r3
    1a1e:	4152      	adcs	r2, r2
    1a20:	0b83      	lsrs	r3, r0, #14
    1a22:	428b      	cmp	r3, r1
    1a24:	d301      	bcc.n	1a2a <__udivsi3+0x52>
    1a26:	038b      	lsls	r3, r1, #14
    1a28:	1ac0      	subs	r0, r0, r3
    1a2a:	4152      	adcs	r2, r2
    1a2c:	0b43      	lsrs	r3, r0, #13
    1a2e:	428b      	cmp	r3, r1
    1a30:	d301      	bcc.n	1a36 <__udivsi3+0x5e>
    1a32:	034b      	lsls	r3, r1, #13
    1a34:	1ac0      	subs	r0, r0, r3
    1a36:	4152      	adcs	r2, r2
    1a38:	0b03      	lsrs	r3, r0, #12
    1a3a:	428b      	cmp	r3, r1
    1a3c:	d301      	bcc.n	1a42 <__udivsi3+0x6a>
    1a3e:	030b      	lsls	r3, r1, #12
    1a40:	1ac0      	subs	r0, r0, r3
    1a42:	4152      	adcs	r2, r2
    1a44:	0ac3      	lsrs	r3, r0, #11
    1a46:	428b      	cmp	r3, r1
    1a48:	d301      	bcc.n	1a4e <__udivsi3+0x76>
    1a4a:	02cb      	lsls	r3, r1, #11
    1a4c:	1ac0      	subs	r0, r0, r3
    1a4e:	4152      	adcs	r2, r2
    1a50:	0a83      	lsrs	r3, r0, #10
    1a52:	428b      	cmp	r3, r1
    1a54:	d301      	bcc.n	1a5a <__udivsi3+0x82>
    1a56:	028b      	lsls	r3, r1, #10
    1a58:	1ac0      	subs	r0, r0, r3
    1a5a:	4152      	adcs	r2, r2
    1a5c:	0a43      	lsrs	r3, r0, #9
    1a5e:	428b      	cmp	r3, r1
    1a60:	d301      	bcc.n	1a66 <__udivsi3+0x8e>
    1a62:	024b      	lsls	r3, r1, #9
    1a64:	1ac0      	subs	r0, r0, r3
    1a66:	4152      	adcs	r2, r2
    1a68:	0a03      	lsrs	r3, r0, #8
    1a6a:	428b      	cmp	r3, r1
    1a6c:	d301      	bcc.n	1a72 <__udivsi3+0x9a>
    1a6e:	020b      	lsls	r3, r1, #8
    1a70:	1ac0      	subs	r0, r0, r3
    1a72:	4152      	adcs	r2, r2
    1a74:	d2cd      	bcs.n	1a12 <__udivsi3+0x3a>
    1a76:	09c3      	lsrs	r3, r0, #7
    1a78:	428b      	cmp	r3, r1
    1a7a:	d301      	bcc.n	1a80 <__udivsi3+0xa8>
    1a7c:	01cb      	lsls	r3, r1, #7
    1a7e:	1ac0      	subs	r0, r0, r3
    1a80:	4152      	adcs	r2, r2
    1a82:	0983      	lsrs	r3, r0, #6
    1a84:	428b      	cmp	r3, r1
    1a86:	d301      	bcc.n	1a8c <__udivsi3+0xb4>
    1a88:	018b      	lsls	r3, r1, #6
    1a8a:	1ac0      	subs	r0, r0, r3
    1a8c:	4152      	adcs	r2, r2
    1a8e:	0943      	lsrs	r3, r0, #5
    1a90:	428b      	cmp	r3, r1
    1a92:	d301      	bcc.n	1a98 <__udivsi3+0xc0>
    1a94:	014b      	lsls	r3, r1, #5
    1a96:	1ac0      	subs	r0, r0, r3
    1a98:	4152      	adcs	r2, r2
    1a9a:	0903      	lsrs	r3, r0, #4
    1a9c:	428b      	cmp	r3, r1
    1a9e:	d301      	bcc.n	1aa4 <__udivsi3+0xcc>
    1aa0:	010b      	lsls	r3, r1, #4
    1aa2:	1ac0      	subs	r0, r0, r3
    1aa4:	4152      	adcs	r2, r2
    1aa6:	08c3      	lsrs	r3, r0, #3
    1aa8:	428b      	cmp	r3, r1
    1aaa:	d301      	bcc.n	1ab0 <__udivsi3+0xd8>
    1aac:	00cb      	lsls	r3, r1, #3
    1aae:	1ac0      	subs	r0, r0, r3
    1ab0:	4152      	adcs	r2, r2
    1ab2:	0883      	lsrs	r3, r0, #2
    1ab4:	428b      	cmp	r3, r1
    1ab6:	d301      	bcc.n	1abc <__udivsi3+0xe4>
    1ab8:	008b      	lsls	r3, r1, #2
    1aba:	1ac0      	subs	r0, r0, r3
    1abc:	4152      	adcs	r2, r2
    1abe:	0843      	lsrs	r3, r0, #1
    1ac0:	428b      	cmp	r3, r1
    1ac2:	d301      	bcc.n	1ac8 <__udivsi3+0xf0>
    1ac4:	004b      	lsls	r3, r1, #1
    1ac6:	1ac0      	subs	r0, r0, r3
    1ac8:	4152      	adcs	r2, r2
    1aca:	1a41      	subs	r1, r0, r1
    1acc:	d200      	bcs.n	1ad0 <__udivsi3+0xf8>
    1ace:	4601      	mov	r1, r0
    1ad0:	4152      	adcs	r2, r2
    1ad2:	4610      	mov	r0, r2
    1ad4:	4770      	bx	lr
    1ad6:	e7ff      	b.n	1ad8 <__udivsi3+0x100>
    1ad8:	b501      	push	{r0, lr}
    1ada:	2000      	movs	r0, #0
    1adc:	f000 f806 	bl	1aec <__aeabi_idiv0>
    1ae0:	bd02      	pop	{r1, pc}
    1ae2:	46c0      	nop			; (mov r8, r8)

00001ae4 <__aeabi_uidivmod>:
    1ae4:	2900      	cmp	r1, #0
    1ae6:	d0f7      	beq.n	1ad8 <__udivsi3+0x100>
    1ae8:	e776      	b.n	19d8 <__udivsi3>
    1aea:	4770      	bx	lr

00001aec <__aeabi_idiv0>:
    1aec:	4770      	bx	lr
    1aee:	46c0      	nop			; (mov r8, r8)

00001af0 <__aeabi_lmul>:
    1af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1af2:	46ce      	mov	lr, r9
    1af4:	4647      	mov	r7, r8
    1af6:	0415      	lsls	r5, r2, #16
    1af8:	0c2d      	lsrs	r5, r5, #16
    1afa:	002e      	movs	r6, r5
    1afc:	b580      	push	{r7, lr}
    1afe:	0407      	lsls	r7, r0, #16
    1b00:	0c14      	lsrs	r4, r2, #16
    1b02:	0c3f      	lsrs	r7, r7, #16
    1b04:	4699      	mov	r9, r3
    1b06:	0c03      	lsrs	r3, r0, #16
    1b08:	437e      	muls	r6, r7
    1b0a:	435d      	muls	r5, r3
    1b0c:	4367      	muls	r7, r4
    1b0e:	4363      	muls	r3, r4
    1b10:	197f      	adds	r7, r7, r5
    1b12:	0c34      	lsrs	r4, r6, #16
    1b14:	19e4      	adds	r4, r4, r7
    1b16:	469c      	mov	ip, r3
    1b18:	42a5      	cmp	r5, r4
    1b1a:	d903      	bls.n	1b24 <__aeabi_lmul+0x34>
    1b1c:	2380      	movs	r3, #128	; 0x80
    1b1e:	025b      	lsls	r3, r3, #9
    1b20:	4698      	mov	r8, r3
    1b22:	44c4      	add	ip, r8
    1b24:	464b      	mov	r3, r9
    1b26:	4351      	muls	r1, r2
    1b28:	4343      	muls	r3, r0
    1b2a:	0436      	lsls	r6, r6, #16
    1b2c:	0c36      	lsrs	r6, r6, #16
    1b2e:	0c25      	lsrs	r5, r4, #16
    1b30:	0424      	lsls	r4, r4, #16
    1b32:	4465      	add	r5, ip
    1b34:	19a4      	adds	r4, r4, r6
    1b36:	1859      	adds	r1, r3, r1
    1b38:	1949      	adds	r1, r1, r5
    1b3a:	0020      	movs	r0, r4
    1b3c:	bc0c      	pop	{r2, r3}
    1b3e:	4690      	mov	r8, r2
    1b40:	4699      	mov	r9, r3
    1b42:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001b44 <__libc_init_array>:
    1b44:	b570      	push	{r4, r5, r6, lr}
    1b46:	2600      	movs	r6, #0
    1b48:	4d0c      	ldr	r5, [pc, #48]	; (1b7c <__libc_init_array+0x38>)
    1b4a:	4c0d      	ldr	r4, [pc, #52]	; (1b80 <__libc_init_array+0x3c>)
    1b4c:	1b64      	subs	r4, r4, r5
    1b4e:	10a4      	asrs	r4, r4, #2
    1b50:	42a6      	cmp	r6, r4
    1b52:	d109      	bne.n	1b68 <__libc_init_array+0x24>
    1b54:	2600      	movs	r6, #0
    1b56:	f001 f89d 	bl	2c94 <_init>
    1b5a:	4d0a      	ldr	r5, [pc, #40]	; (1b84 <__libc_init_array+0x40>)
    1b5c:	4c0a      	ldr	r4, [pc, #40]	; (1b88 <__libc_init_array+0x44>)
    1b5e:	1b64      	subs	r4, r4, r5
    1b60:	10a4      	asrs	r4, r4, #2
    1b62:	42a6      	cmp	r6, r4
    1b64:	d105      	bne.n	1b72 <__libc_init_array+0x2e>
    1b66:	bd70      	pop	{r4, r5, r6, pc}
    1b68:	00b3      	lsls	r3, r6, #2
    1b6a:	58eb      	ldr	r3, [r5, r3]
    1b6c:	4798      	blx	r3
    1b6e:	3601      	adds	r6, #1
    1b70:	e7ee      	b.n	1b50 <__libc_init_array+0xc>
    1b72:	00b3      	lsls	r3, r6, #2
    1b74:	58eb      	ldr	r3, [r5, r3]
    1b76:	4798      	blx	r3
    1b78:	3601      	adds	r6, #1
    1b7a:	e7f2      	b.n	1b62 <__libc_init_array+0x1e>
    1b7c:	00002ca0 	.word	0x00002ca0
    1b80:	00002ca0 	.word	0x00002ca0
    1b84:	00002ca0 	.word	0x00002ca0
    1b88:	00002ca4 	.word	0x00002ca4

00001b8c <memset>:
    1b8c:	0003      	movs	r3, r0
    1b8e:	1882      	adds	r2, r0, r2
    1b90:	4293      	cmp	r3, r2
    1b92:	d100      	bne.n	1b96 <memset+0xa>
    1b94:	4770      	bx	lr
    1b96:	7019      	strb	r1, [r3, #0]
    1b98:	3301      	adds	r3, #1
    1b9a:	e7f9      	b.n	1b90 <memset+0x4>

00001b9c <iprintf>:
    1b9c:	b40f      	push	{r0, r1, r2, r3}
    1b9e:	4b0b      	ldr	r3, [pc, #44]	; (1bcc <iprintf+0x30>)
    1ba0:	b513      	push	{r0, r1, r4, lr}
    1ba2:	681c      	ldr	r4, [r3, #0]
    1ba4:	2c00      	cmp	r4, #0
    1ba6:	d005      	beq.n	1bb4 <iprintf+0x18>
    1ba8:	69a3      	ldr	r3, [r4, #24]
    1baa:	2b00      	cmp	r3, #0
    1bac:	d102      	bne.n	1bb4 <iprintf+0x18>
    1bae:	0020      	movs	r0, r4
    1bb0:	f000 f9bc 	bl	1f2c <__sinit>
    1bb4:	ab05      	add	r3, sp, #20
    1bb6:	9a04      	ldr	r2, [sp, #16]
    1bb8:	68a1      	ldr	r1, [r4, #8]
    1bba:	0020      	movs	r0, r4
    1bbc:	9301      	str	r3, [sp, #4]
    1bbe:	f000 fb91 	bl	22e4 <_vfiprintf_r>
    1bc2:	bc16      	pop	{r1, r2, r4}
    1bc4:	bc08      	pop	{r3}
    1bc6:	b004      	add	sp, #16
    1bc8:	4718      	bx	r3
    1bca:	46c0      	nop			; (mov r8, r8)
    1bcc:	20000008 	.word	0x20000008

00001bd0 <setbuf>:
    1bd0:	424a      	negs	r2, r1
    1bd2:	414a      	adcs	r2, r1
    1bd4:	2380      	movs	r3, #128	; 0x80
    1bd6:	b510      	push	{r4, lr}
    1bd8:	0052      	lsls	r2, r2, #1
    1bda:	00db      	lsls	r3, r3, #3
    1bdc:	f000 f802 	bl	1be4 <setvbuf>
    1be0:	bd10      	pop	{r4, pc}
	...

00001be4 <setvbuf>:
    1be4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1be6:	001d      	movs	r5, r3
    1be8:	4b4f      	ldr	r3, [pc, #316]	; (1d28 <setvbuf+0x144>)
    1bea:	b085      	sub	sp, #20
    1bec:	681e      	ldr	r6, [r3, #0]
    1bee:	0004      	movs	r4, r0
    1bf0:	000f      	movs	r7, r1
    1bf2:	9200      	str	r2, [sp, #0]
    1bf4:	2e00      	cmp	r6, #0
    1bf6:	d005      	beq.n	1c04 <setvbuf+0x20>
    1bf8:	69b3      	ldr	r3, [r6, #24]
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	d102      	bne.n	1c04 <setvbuf+0x20>
    1bfe:	0030      	movs	r0, r6
    1c00:	f000 f994 	bl	1f2c <__sinit>
    1c04:	4b49      	ldr	r3, [pc, #292]	; (1d2c <setvbuf+0x148>)
    1c06:	429c      	cmp	r4, r3
    1c08:	d150      	bne.n	1cac <setvbuf+0xc8>
    1c0a:	6874      	ldr	r4, [r6, #4]
    1c0c:	9b00      	ldr	r3, [sp, #0]
    1c0e:	2b02      	cmp	r3, #2
    1c10:	d005      	beq.n	1c1e <setvbuf+0x3a>
    1c12:	2b01      	cmp	r3, #1
    1c14:	d900      	bls.n	1c18 <setvbuf+0x34>
    1c16:	e084      	b.n	1d22 <setvbuf+0x13e>
    1c18:	2d00      	cmp	r5, #0
    1c1a:	da00      	bge.n	1c1e <setvbuf+0x3a>
    1c1c:	e081      	b.n	1d22 <setvbuf+0x13e>
    1c1e:	0021      	movs	r1, r4
    1c20:	0030      	movs	r0, r6
    1c22:	f000 f915 	bl	1e50 <_fflush_r>
    1c26:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1c28:	2900      	cmp	r1, #0
    1c2a:	d008      	beq.n	1c3e <setvbuf+0x5a>
    1c2c:	0023      	movs	r3, r4
    1c2e:	3344      	adds	r3, #68	; 0x44
    1c30:	4299      	cmp	r1, r3
    1c32:	d002      	beq.n	1c3a <setvbuf+0x56>
    1c34:	0030      	movs	r0, r6
    1c36:	f000 fa85 	bl	2144 <_free_r>
    1c3a:	2300      	movs	r3, #0
    1c3c:	6363      	str	r3, [r4, #52]	; 0x34
    1c3e:	2300      	movs	r3, #0
    1c40:	61a3      	str	r3, [r4, #24]
    1c42:	6063      	str	r3, [r4, #4]
    1c44:	89a3      	ldrh	r3, [r4, #12]
    1c46:	061b      	lsls	r3, r3, #24
    1c48:	d503      	bpl.n	1c52 <setvbuf+0x6e>
    1c4a:	6921      	ldr	r1, [r4, #16]
    1c4c:	0030      	movs	r0, r6
    1c4e:	f000 fa79 	bl	2144 <_free_r>
    1c52:	89a3      	ldrh	r3, [r4, #12]
    1c54:	4a36      	ldr	r2, [pc, #216]	; (1d30 <setvbuf+0x14c>)
    1c56:	4013      	ands	r3, r2
    1c58:	81a3      	strh	r3, [r4, #12]
    1c5a:	9b00      	ldr	r3, [sp, #0]
    1c5c:	2b02      	cmp	r3, #2
    1c5e:	d05a      	beq.n	1d16 <setvbuf+0x132>
    1c60:	ab03      	add	r3, sp, #12
    1c62:	aa02      	add	r2, sp, #8
    1c64:	0021      	movs	r1, r4
    1c66:	0030      	movs	r0, r6
    1c68:	f000 f9f6 	bl	2058 <__swhatbuf_r>
    1c6c:	89a3      	ldrh	r3, [r4, #12]
    1c6e:	4318      	orrs	r0, r3
    1c70:	81a0      	strh	r0, [r4, #12]
    1c72:	2d00      	cmp	r5, #0
    1c74:	d124      	bne.n	1cc0 <setvbuf+0xdc>
    1c76:	9d02      	ldr	r5, [sp, #8]
    1c78:	0028      	movs	r0, r5
    1c7a:	f000 fa59 	bl	2130 <malloc>
    1c7e:	9501      	str	r5, [sp, #4]
    1c80:	1e07      	subs	r7, r0, #0
    1c82:	d142      	bne.n	1d0a <setvbuf+0x126>
    1c84:	9b02      	ldr	r3, [sp, #8]
    1c86:	9301      	str	r3, [sp, #4]
    1c88:	42ab      	cmp	r3, r5
    1c8a:	d139      	bne.n	1d00 <setvbuf+0x11c>
    1c8c:	2001      	movs	r0, #1
    1c8e:	4240      	negs	r0, r0
    1c90:	2302      	movs	r3, #2
    1c92:	89a2      	ldrh	r2, [r4, #12]
    1c94:	4313      	orrs	r3, r2
    1c96:	81a3      	strh	r3, [r4, #12]
    1c98:	2300      	movs	r3, #0
    1c9a:	60a3      	str	r3, [r4, #8]
    1c9c:	0023      	movs	r3, r4
    1c9e:	3347      	adds	r3, #71	; 0x47
    1ca0:	6023      	str	r3, [r4, #0]
    1ca2:	6123      	str	r3, [r4, #16]
    1ca4:	2301      	movs	r3, #1
    1ca6:	6163      	str	r3, [r4, #20]
    1ca8:	b005      	add	sp, #20
    1caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cac:	4b21      	ldr	r3, [pc, #132]	; (1d34 <setvbuf+0x150>)
    1cae:	429c      	cmp	r4, r3
    1cb0:	d101      	bne.n	1cb6 <setvbuf+0xd2>
    1cb2:	68b4      	ldr	r4, [r6, #8]
    1cb4:	e7aa      	b.n	1c0c <setvbuf+0x28>
    1cb6:	4b20      	ldr	r3, [pc, #128]	; (1d38 <setvbuf+0x154>)
    1cb8:	429c      	cmp	r4, r3
    1cba:	d1a7      	bne.n	1c0c <setvbuf+0x28>
    1cbc:	68f4      	ldr	r4, [r6, #12]
    1cbe:	e7a5      	b.n	1c0c <setvbuf+0x28>
    1cc0:	2f00      	cmp	r7, #0
    1cc2:	d0d9      	beq.n	1c78 <setvbuf+0x94>
    1cc4:	69b3      	ldr	r3, [r6, #24]
    1cc6:	2b00      	cmp	r3, #0
    1cc8:	d102      	bne.n	1cd0 <setvbuf+0xec>
    1cca:	0030      	movs	r0, r6
    1ccc:	f000 f92e 	bl	1f2c <__sinit>
    1cd0:	9b00      	ldr	r3, [sp, #0]
    1cd2:	2b01      	cmp	r3, #1
    1cd4:	d103      	bne.n	1cde <setvbuf+0xfa>
    1cd6:	89a3      	ldrh	r3, [r4, #12]
    1cd8:	9a00      	ldr	r2, [sp, #0]
    1cda:	431a      	orrs	r2, r3
    1cdc:	81a2      	strh	r2, [r4, #12]
    1cde:	2008      	movs	r0, #8
    1ce0:	89a3      	ldrh	r3, [r4, #12]
    1ce2:	6027      	str	r7, [r4, #0]
    1ce4:	6127      	str	r7, [r4, #16]
    1ce6:	6165      	str	r5, [r4, #20]
    1ce8:	4018      	ands	r0, r3
    1cea:	d018      	beq.n	1d1e <setvbuf+0x13a>
    1cec:	2001      	movs	r0, #1
    1cee:	4018      	ands	r0, r3
    1cf0:	2300      	movs	r3, #0
    1cf2:	4298      	cmp	r0, r3
    1cf4:	d011      	beq.n	1d1a <setvbuf+0x136>
    1cf6:	426d      	negs	r5, r5
    1cf8:	60a3      	str	r3, [r4, #8]
    1cfa:	61a5      	str	r5, [r4, #24]
    1cfc:	0018      	movs	r0, r3
    1cfe:	e7d3      	b.n	1ca8 <setvbuf+0xc4>
    1d00:	9801      	ldr	r0, [sp, #4]
    1d02:	f000 fa15 	bl	2130 <malloc>
    1d06:	1e07      	subs	r7, r0, #0
    1d08:	d0c0      	beq.n	1c8c <setvbuf+0xa8>
    1d0a:	2380      	movs	r3, #128	; 0x80
    1d0c:	89a2      	ldrh	r2, [r4, #12]
    1d0e:	9d01      	ldr	r5, [sp, #4]
    1d10:	4313      	orrs	r3, r2
    1d12:	81a3      	strh	r3, [r4, #12]
    1d14:	e7d6      	b.n	1cc4 <setvbuf+0xe0>
    1d16:	2000      	movs	r0, #0
    1d18:	e7ba      	b.n	1c90 <setvbuf+0xac>
    1d1a:	60a5      	str	r5, [r4, #8]
    1d1c:	e7c4      	b.n	1ca8 <setvbuf+0xc4>
    1d1e:	60a0      	str	r0, [r4, #8]
    1d20:	e7c2      	b.n	1ca8 <setvbuf+0xc4>
    1d22:	2001      	movs	r0, #1
    1d24:	4240      	negs	r0, r0
    1d26:	e7bf      	b.n	1ca8 <setvbuf+0xc4>
    1d28:	20000008 	.word	0x20000008
    1d2c:	00002c20 	.word	0x00002c20
    1d30:	fffff35c 	.word	0xfffff35c
    1d34:	00002c40 	.word	0x00002c40
    1d38:	00002c00 	.word	0x00002c00

00001d3c <__sflush_r>:
    1d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1d3e:	898a      	ldrh	r2, [r1, #12]
    1d40:	0005      	movs	r5, r0
    1d42:	000c      	movs	r4, r1
    1d44:	0713      	lsls	r3, r2, #28
    1d46:	d460      	bmi.n	1e0a <__sflush_r+0xce>
    1d48:	684b      	ldr	r3, [r1, #4]
    1d4a:	2b00      	cmp	r3, #0
    1d4c:	dc04      	bgt.n	1d58 <__sflush_r+0x1c>
    1d4e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1d50:	2b00      	cmp	r3, #0
    1d52:	dc01      	bgt.n	1d58 <__sflush_r+0x1c>
    1d54:	2000      	movs	r0, #0
    1d56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1d58:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1d5a:	2f00      	cmp	r7, #0
    1d5c:	d0fa      	beq.n	1d54 <__sflush_r+0x18>
    1d5e:	2300      	movs	r3, #0
    1d60:	682e      	ldr	r6, [r5, #0]
    1d62:	602b      	str	r3, [r5, #0]
    1d64:	2380      	movs	r3, #128	; 0x80
    1d66:	015b      	lsls	r3, r3, #5
    1d68:	401a      	ands	r2, r3
    1d6a:	d034      	beq.n	1dd6 <__sflush_r+0x9a>
    1d6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1d6e:	89a3      	ldrh	r3, [r4, #12]
    1d70:	075b      	lsls	r3, r3, #29
    1d72:	d506      	bpl.n	1d82 <__sflush_r+0x46>
    1d74:	6863      	ldr	r3, [r4, #4]
    1d76:	1ac0      	subs	r0, r0, r3
    1d78:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1d7a:	2b00      	cmp	r3, #0
    1d7c:	d001      	beq.n	1d82 <__sflush_r+0x46>
    1d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1d80:	1ac0      	subs	r0, r0, r3
    1d82:	0002      	movs	r2, r0
    1d84:	6a21      	ldr	r1, [r4, #32]
    1d86:	2300      	movs	r3, #0
    1d88:	0028      	movs	r0, r5
    1d8a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1d8c:	47b8      	blx	r7
    1d8e:	89a1      	ldrh	r1, [r4, #12]
    1d90:	1c43      	adds	r3, r0, #1
    1d92:	d106      	bne.n	1da2 <__sflush_r+0x66>
    1d94:	682b      	ldr	r3, [r5, #0]
    1d96:	2b1d      	cmp	r3, #29
    1d98:	d831      	bhi.n	1dfe <__sflush_r+0xc2>
    1d9a:	4a2c      	ldr	r2, [pc, #176]	; (1e4c <__sflush_r+0x110>)
    1d9c:	40da      	lsrs	r2, r3
    1d9e:	07d3      	lsls	r3, r2, #31
    1da0:	d52d      	bpl.n	1dfe <__sflush_r+0xc2>
    1da2:	2300      	movs	r3, #0
    1da4:	6063      	str	r3, [r4, #4]
    1da6:	6923      	ldr	r3, [r4, #16]
    1da8:	6023      	str	r3, [r4, #0]
    1daa:	04cb      	lsls	r3, r1, #19
    1dac:	d505      	bpl.n	1dba <__sflush_r+0x7e>
    1dae:	1c43      	adds	r3, r0, #1
    1db0:	d102      	bne.n	1db8 <__sflush_r+0x7c>
    1db2:	682b      	ldr	r3, [r5, #0]
    1db4:	2b00      	cmp	r3, #0
    1db6:	d100      	bne.n	1dba <__sflush_r+0x7e>
    1db8:	6560      	str	r0, [r4, #84]	; 0x54
    1dba:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1dbc:	602e      	str	r6, [r5, #0]
    1dbe:	2900      	cmp	r1, #0
    1dc0:	d0c8      	beq.n	1d54 <__sflush_r+0x18>
    1dc2:	0023      	movs	r3, r4
    1dc4:	3344      	adds	r3, #68	; 0x44
    1dc6:	4299      	cmp	r1, r3
    1dc8:	d002      	beq.n	1dd0 <__sflush_r+0x94>
    1dca:	0028      	movs	r0, r5
    1dcc:	f000 f9ba 	bl	2144 <_free_r>
    1dd0:	2000      	movs	r0, #0
    1dd2:	6360      	str	r0, [r4, #52]	; 0x34
    1dd4:	e7bf      	b.n	1d56 <__sflush_r+0x1a>
    1dd6:	2301      	movs	r3, #1
    1dd8:	6a21      	ldr	r1, [r4, #32]
    1dda:	0028      	movs	r0, r5
    1ddc:	47b8      	blx	r7
    1dde:	1c43      	adds	r3, r0, #1
    1de0:	d1c5      	bne.n	1d6e <__sflush_r+0x32>
    1de2:	682b      	ldr	r3, [r5, #0]
    1de4:	2b00      	cmp	r3, #0
    1de6:	d0c2      	beq.n	1d6e <__sflush_r+0x32>
    1de8:	2b1d      	cmp	r3, #29
    1dea:	d001      	beq.n	1df0 <__sflush_r+0xb4>
    1dec:	2b16      	cmp	r3, #22
    1dee:	d101      	bne.n	1df4 <__sflush_r+0xb8>
    1df0:	602e      	str	r6, [r5, #0]
    1df2:	e7af      	b.n	1d54 <__sflush_r+0x18>
    1df4:	2340      	movs	r3, #64	; 0x40
    1df6:	89a2      	ldrh	r2, [r4, #12]
    1df8:	4313      	orrs	r3, r2
    1dfa:	81a3      	strh	r3, [r4, #12]
    1dfc:	e7ab      	b.n	1d56 <__sflush_r+0x1a>
    1dfe:	2340      	movs	r3, #64	; 0x40
    1e00:	430b      	orrs	r3, r1
    1e02:	2001      	movs	r0, #1
    1e04:	81a3      	strh	r3, [r4, #12]
    1e06:	4240      	negs	r0, r0
    1e08:	e7a5      	b.n	1d56 <__sflush_r+0x1a>
    1e0a:	690f      	ldr	r7, [r1, #16]
    1e0c:	2f00      	cmp	r7, #0
    1e0e:	d0a1      	beq.n	1d54 <__sflush_r+0x18>
    1e10:	680b      	ldr	r3, [r1, #0]
    1e12:	600f      	str	r7, [r1, #0]
    1e14:	1bdb      	subs	r3, r3, r7
    1e16:	9301      	str	r3, [sp, #4]
    1e18:	2300      	movs	r3, #0
    1e1a:	0792      	lsls	r2, r2, #30
    1e1c:	d100      	bne.n	1e20 <__sflush_r+0xe4>
    1e1e:	694b      	ldr	r3, [r1, #20]
    1e20:	60a3      	str	r3, [r4, #8]
    1e22:	9b01      	ldr	r3, [sp, #4]
    1e24:	2b00      	cmp	r3, #0
    1e26:	dc00      	bgt.n	1e2a <__sflush_r+0xee>
    1e28:	e794      	b.n	1d54 <__sflush_r+0x18>
    1e2a:	9b01      	ldr	r3, [sp, #4]
    1e2c:	003a      	movs	r2, r7
    1e2e:	6a21      	ldr	r1, [r4, #32]
    1e30:	0028      	movs	r0, r5
    1e32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1e34:	47b0      	blx	r6
    1e36:	2800      	cmp	r0, #0
    1e38:	dc03      	bgt.n	1e42 <__sflush_r+0x106>
    1e3a:	2340      	movs	r3, #64	; 0x40
    1e3c:	89a2      	ldrh	r2, [r4, #12]
    1e3e:	4313      	orrs	r3, r2
    1e40:	e7df      	b.n	1e02 <__sflush_r+0xc6>
    1e42:	9b01      	ldr	r3, [sp, #4]
    1e44:	183f      	adds	r7, r7, r0
    1e46:	1a1b      	subs	r3, r3, r0
    1e48:	9301      	str	r3, [sp, #4]
    1e4a:	e7ea      	b.n	1e22 <__sflush_r+0xe6>
    1e4c:	20400001 	.word	0x20400001

00001e50 <_fflush_r>:
    1e50:	690b      	ldr	r3, [r1, #16]
    1e52:	b570      	push	{r4, r5, r6, lr}
    1e54:	0005      	movs	r5, r0
    1e56:	000c      	movs	r4, r1
    1e58:	2b00      	cmp	r3, #0
    1e5a:	d101      	bne.n	1e60 <_fflush_r+0x10>
    1e5c:	2000      	movs	r0, #0
    1e5e:	bd70      	pop	{r4, r5, r6, pc}
    1e60:	2800      	cmp	r0, #0
    1e62:	d004      	beq.n	1e6e <_fflush_r+0x1e>
    1e64:	6983      	ldr	r3, [r0, #24]
    1e66:	2b00      	cmp	r3, #0
    1e68:	d101      	bne.n	1e6e <_fflush_r+0x1e>
    1e6a:	f000 f85f 	bl	1f2c <__sinit>
    1e6e:	4b0b      	ldr	r3, [pc, #44]	; (1e9c <_fflush_r+0x4c>)
    1e70:	429c      	cmp	r4, r3
    1e72:	d109      	bne.n	1e88 <_fflush_r+0x38>
    1e74:	686c      	ldr	r4, [r5, #4]
    1e76:	220c      	movs	r2, #12
    1e78:	5ea3      	ldrsh	r3, [r4, r2]
    1e7a:	2b00      	cmp	r3, #0
    1e7c:	d0ee      	beq.n	1e5c <_fflush_r+0xc>
    1e7e:	0021      	movs	r1, r4
    1e80:	0028      	movs	r0, r5
    1e82:	f7ff ff5b 	bl	1d3c <__sflush_r>
    1e86:	e7ea      	b.n	1e5e <_fflush_r+0xe>
    1e88:	4b05      	ldr	r3, [pc, #20]	; (1ea0 <_fflush_r+0x50>)
    1e8a:	429c      	cmp	r4, r3
    1e8c:	d101      	bne.n	1e92 <_fflush_r+0x42>
    1e8e:	68ac      	ldr	r4, [r5, #8]
    1e90:	e7f1      	b.n	1e76 <_fflush_r+0x26>
    1e92:	4b04      	ldr	r3, [pc, #16]	; (1ea4 <_fflush_r+0x54>)
    1e94:	429c      	cmp	r4, r3
    1e96:	d1ee      	bne.n	1e76 <_fflush_r+0x26>
    1e98:	68ec      	ldr	r4, [r5, #12]
    1e9a:	e7ec      	b.n	1e76 <_fflush_r+0x26>
    1e9c:	00002c20 	.word	0x00002c20
    1ea0:	00002c40 	.word	0x00002c40
    1ea4:	00002c00 	.word	0x00002c00

00001ea8 <_cleanup_r>:
    1ea8:	b510      	push	{r4, lr}
    1eaa:	4902      	ldr	r1, [pc, #8]	; (1eb4 <_cleanup_r+0xc>)
    1eac:	f000 f8b2 	bl	2014 <_fwalk_reent>
    1eb0:	bd10      	pop	{r4, pc}
    1eb2:	46c0      	nop			; (mov r8, r8)
    1eb4:	00001e51 	.word	0x00001e51

00001eb8 <std.isra.0>:
    1eb8:	2300      	movs	r3, #0
    1eba:	b510      	push	{r4, lr}
    1ebc:	0004      	movs	r4, r0
    1ebe:	6003      	str	r3, [r0, #0]
    1ec0:	6043      	str	r3, [r0, #4]
    1ec2:	6083      	str	r3, [r0, #8]
    1ec4:	8181      	strh	r1, [r0, #12]
    1ec6:	6643      	str	r3, [r0, #100]	; 0x64
    1ec8:	81c2      	strh	r2, [r0, #14]
    1eca:	6103      	str	r3, [r0, #16]
    1ecc:	6143      	str	r3, [r0, #20]
    1ece:	6183      	str	r3, [r0, #24]
    1ed0:	0019      	movs	r1, r3
    1ed2:	2208      	movs	r2, #8
    1ed4:	305c      	adds	r0, #92	; 0x5c
    1ed6:	f7ff fe59 	bl	1b8c <memset>
    1eda:	4b05      	ldr	r3, [pc, #20]	; (1ef0 <std.isra.0+0x38>)
    1edc:	6224      	str	r4, [r4, #32]
    1ede:	6263      	str	r3, [r4, #36]	; 0x24
    1ee0:	4b04      	ldr	r3, [pc, #16]	; (1ef4 <std.isra.0+0x3c>)
    1ee2:	62a3      	str	r3, [r4, #40]	; 0x28
    1ee4:	4b04      	ldr	r3, [pc, #16]	; (1ef8 <std.isra.0+0x40>)
    1ee6:	62e3      	str	r3, [r4, #44]	; 0x2c
    1ee8:	4b04      	ldr	r3, [pc, #16]	; (1efc <std.isra.0+0x44>)
    1eea:	6323      	str	r3, [r4, #48]	; 0x30
    1eec:	bd10      	pop	{r4, pc}
    1eee:	46c0      	nop			; (mov r8, r8)
    1ef0:	00002851 	.word	0x00002851
    1ef4:	00002879 	.word	0x00002879
    1ef8:	000028b1 	.word	0x000028b1
    1efc:	000028dd 	.word	0x000028dd

00001f00 <__sfmoreglue>:
    1f00:	b570      	push	{r4, r5, r6, lr}
    1f02:	2568      	movs	r5, #104	; 0x68
    1f04:	1e4a      	subs	r2, r1, #1
    1f06:	4355      	muls	r5, r2
    1f08:	000e      	movs	r6, r1
    1f0a:	0029      	movs	r1, r5
    1f0c:	3174      	adds	r1, #116	; 0x74
    1f0e:	f000 f963 	bl	21d8 <_malloc_r>
    1f12:	1e04      	subs	r4, r0, #0
    1f14:	d008      	beq.n	1f28 <__sfmoreglue+0x28>
    1f16:	2100      	movs	r1, #0
    1f18:	002a      	movs	r2, r5
    1f1a:	6001      	str	r1, [r0, #0]
    1f1c:	6046      	str	r6, [r0, #4]
    1f1e:	300c      	adds	r0, #12
    1f20:	60a0      	str	r0, [r4, #8]
    1f22:	3268      	adds	r2, #104	; 0x68
    1f24:	f7ff fe32 	bl	1b8c <memset>
    1f28:	0020      	movs	r0, r4
    1f2a:	bd70      	pop	{r4, r5, r6, pc}

00001f2c <__sinit>:
    1f2c:	6983      	ldr	r3, [r0, #24]
    1f2e:	b513      	push	{r0, r1, r4, lr}
    1f30:	0004      	movs	r4, r0
    1f32:	2b00      	cmp	r3, #0
    1f34:	d128      	bne.n	1f88 <__sinit+0x5c>
    1f36:	6483      	str	r3, [r0, #72]	; 0x48
    1f38:	64c3      	str	r3, [r0, #76]	; 0x4c
    1f3a:	6503      	str	r3, [r0, #80]	; 0x50
    1f3c:	4b13      	ldr	r3, [pc, #76]	; (1f8c <__sinit+0x60>)
    1f3e:	4a14      	ldr	r2, [pc, #80]	; (1f90 <__sinit+0x64>)
    1f40:	681b      	ldr	r3, [r3, #0]
    1f42:	6282      	str	r2, [r0, #40]	; 0x28
    1f44:	9301      	str	r3, [sp, #4]
    1f46:	4298      	cmp	r0, r3
    1f48:	d101      	bne.n	1f4e <__sinit+0x22>
    1f4a:	2301      	movs	r3, #1
    1f4c:	6183      	str	r3, [r0, #24]
    1f4e:	0020      	movs	r0, r4
    1f50:	f000 f820 	bl	1f94 <__sfp>
    1f54:	6060      	str	r0, [r4, #4]
    1f56:	0020      	movs	r0, r4
    1f58:	f000 f81c 	bl	1f94 <__sfp>
    1f5c:	60a0      	str	r0, [r4, #8]
    1f5e:	0020      	movs	r0, r4
    1f60:	f000 f818 	bl	1f94 <__sfp>
    1f64:	2200      	movs	r2, #0
    1f66:	60e0      	str	r0, [r4, #12]
    1f68:	2104      	movs	r1, #4
    1f6a:	6860      	ldr	r0, [r4, #4]
    1f6c:	f7ff ffa4 	bl	1eb8 <std.isra.0>
    1f70:	2201      	movs	r2, #1
    1f72:	2109      	movs	r1, #9
    1f74:	68a0      	ldr	r0, [r4, #8]
    1f76:	f7ff ff9f 	bl	1eb8 <std.isra.0>
    1f7a:	2202      	movs	r2, #2
    1f7c:	2112      	movs	r1, #18
    1f7e:	68e0      	ldr	r0, [r4, #12]
    1f80:	f7ff ff9a 	bl	1eb8 <std.isra.0>
    1f84:	2301      	movs	r3, #1
    1f86:	61a3      	str	r3, [r4, #24]
    1f88:	bd13      	pop	{r0, r1, r4, pc}
    1f8a:	46c0      	nop			; (mov r8, r8)
    1f8c:	00002bfc 	.word	0x00002bfc
    1f90:	00001ea9 	.word	0x00001ea9

00001f94 <__sfp>:
    1f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f96:	4b1e      	ldr	r3, [pc, #120]	; (2010 <STACK_SIZE+0x10>)
    1f98:	0007      	movs	r7, r0
    1f9a:	681e      	ldr	r6, [r3, #0]
    1f9c:	69b3      	ldr	r3, [r6, #24]
    1f9e:	2b00      	cmp	r3, #0
    1fa0:	d102      	bne.n	1fa8 <__sfp+0x14>
    1fa2:	0030      	movs	r0, r6
    1fa4:	f7ff ffc2 	bl	1f2c <__sinit>
    1fa8:	3648      	adds	r6, #72	; 0x48
    1faa:	68b4      	ldr	r4, [r6, #8]
    1fac:	6873      	ldr	r3, [r6, #4]
    1fae:	3b01      	subs	r3, #1
    1fb0:	d504      	bpl.n	1fbc <__sfp+0x28>
    1fb2:	6833      	ldr	r3, [r6, #0]
    1fb4:	2b00      	cmp	r3, #0
    1fb6:	d007      	beq.n	1fc8 <__sfp+0x34>
    1fb8:	6836      	ldr	r6, [r6, #0]
    1fba:	e7f6      	b.n	1faa <__sfp+0x16>
    1fbc:	220c      	movs	r2, #12
    1fbe:	5ea5      	ldrsh	r5, [r4, r2]
    1fc0:	2d00      	cmp	r5, #0
    1fc2:	d00d      	beq.n	1fe0 <__sfp+0x4c>
    1fc4:	3468      	adds	r4, #104	; 0x68
    1fc6:	e7f2      	b.n	1fae <__sfp+0x1a>
    1fc8:	2104      	movs	r1, #4
    1fca:	0038      	movs	r0, r7
    1fcc:	f7ff ff98 	bl	1f00 <__sfmoreglue>
    1fd0:	6030      	str	r0, [r6, #0]
    1fd2:	2800      	cmp	r0, #0
    1fd4:	d1f0      	bne.n	1fb8 <__sfp+0x24>
    1fd6:	230c      	movs	r3, #12
    1fd8:	0004      	movs	r4, r0
    1fda:	603b      	str	r3, [r7, #0]
    1fdc:	0020      	movs	r0, r4
    1fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fe0:	2301      	movs	r3, #1
    1fe2:	0020      	movs	r0, r4
    1fe4:	425b      	negs	r3, r3
    1fe6:	81e3      	strh	r3, [r4, #14]
    1fe8:	3302      	adds	r3, #2
    1fea:	81a3      	strh	r3, [r4, #12]
    1fec:	6665      	str	r5, [r4, #100]	; 0x64
    1fee:	6025      	str	r5, [r4, #0]
    1ff0:	60a5      	str	r5, [r4, #8]
    1ff2:	6065      	str	r5, [r4, #4]
    1ff4:	6125      	str	r5, [r4, #16]
    1ff6:	6165      	str	r5, [r4, #20]
    1ff8:	61a5      	str	r5, [r4, #24]
    1ffa:	2208      	movs	r2, #8
    1ffc:	0029      	movs	r1, r5
    1ffe:	305c      	adds	r0, #92	; 0x5c
    2000:	f7ff fdc4 	bl	1b8c <memset>
    2004:	6365      	str	r5, [r4, #52]	; 0x34
    2006:	63a5      	str	r5, [r4, #56]	; 0x38
    2008:	64a5      	str	r5, [r4, #72]	; 0x48
    200a:	64e5      	str	r5, [r4, #76]	; 0x4c
    200c:	e7e6      	b.n	1fdc <__sfp+0x48>
    200e:	46c0      	nop			; (mov r8, r8)
    2010:	00002bfc 	.word	0x00002bfc

00002014 <_fwalk_reent>:
    2014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2016:	0004      	movs	r4, r0
    2018:	0007      	movs	r7, r0
    201a:	2600      	movs	r6, #0
    201c:	9101      	str	r1, [sp, #4]
    201e:	3448      	adds	r4, #72	; 0x48
    2020:	2c00      	cmp	r4, #0
    2022:	d101      	bne.n	2028 <_fwalk_reent+0x14>
    2024:	0030      	movs	r0, r6
    2026:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2028:	6863      	ldr	r3, [r4, #4]
    202a:	68a5      	ldr	r5, [r4, #8]
    202c:	9300      	str	r3, [sp, #0]
    202e:	9b00      	ldr	r3, [sp, #0]
    2030:	3b01      	subs	r3, #1
    2032:	9300      	str	r3, [sp, #0]
    2034:	d501      	bpl.n	203a <_fwalk_reent+0x26>
    2036:	6824      	ldr	r4, [r4, #0]
    2038:	e7f2      	b.n	2020 <_fwalk_reent+0xc>
    203a:	89ab      	ldrh	r3, [r5, #12]
    203c:	2b01      	cmp	r3, #1
    203e:	d908      	bls.n	2052 <_fwalk_reent+0x3e>
    2040:	220e      	movs	r2, #14
    2042:	5eab      	ldrsh	r3, [r5, r2]
    2044:	3301      	adds	r3, #1
    2046:	d004      	beq.n	2052 <_fwalk_reent+0x3e>
    2048:	0029      	movs	r1, r5
    204a:	0038      	movs	r0, r7
    204c:	9b01      	ldr	r3, [sp, #4]
    204e:	4798      	blx	r3
    2050:	4306      	orrs	r6, r0
    2052:	3568      	adds	r5, #104	; 0x68
    2054:	e7eb      	b.n	202e <_fwalk_reent+0x1a>
	...

00002058 <__swhatbuf_r>:
    2058:	b570      	push	{r4, r5, r6, lr}
    205a:	000e      	movs	r6, r1
    205c:	001d      	movs	r5, r3
    205e:	230e      	movs	r3, #14
    2060:	5ec9      	ldrsh	r1, [r1, r3]
    2062:	b090      	sub	sp, #64	; 0x40
    2064:	0014      	movs	r4, r2
    2066:	2900      	cmp	r1, #0
    2068:	da07      	bge.n	207a <__swhatbuf_r+0x22>
    206a:	2300      	movs	r3, #0
    206c:	602b      	str	r3, [r5, #0]
    206e:	89b3      	ldrh	r3, [r6, #12]
    2070:	061b      	lsls	r3, r3, #24
    2072:	d411      	bmi.n	2098 <__swhatbuf_r+0x40>
    2074:	2380      	movs	r3, #128	; 0x80
    2076:	00db      	lsls	r3, r3, #3
    2078:	e00f      	b.n	209a <__swhatbuf_r+0x42>
    207a:	aa01      	add	r2, sp, #4
    207c:	f000 fd26 	bl	2acc <_fstat_r>
    2080:	2800      	cmp	r0, #0
    2082:	dbf2      	blt.n	206a <__swhatbuf_r+0x12>
    2084:	22f0      	movs	r2, #240	; 0xf0
    2086:	9b02      	ldr	r3, [sp, #8]
    2088:	0212      	lsls	r2, r2, #8
    208a:	4013      	ands	r3, r2
    208c:	4a05      	ldr	r2, [pc, #20]	; (20a4 <__swhatbuf_r+0x4c>)
    208e:	189b      	adds	r3, r3, r2
    2090:	425a      	negs	r2, r3
    2092:	4153      	adcs	r3, r2
    2094:	602b      	str	r3, [r5, #0]
    2096:	e7ed      	b.n	2074 <__swhatbuf_r+0x1c>
    2098:	2340      	movs	r3, #64	; 0x40
    209a:	2000      	movs	r0, #0
    209c:	6023      	str	r3, [r4, #0]
    209e:	b010      	add	sp, #64	; 0x40
    20a0:	bd70      	pop	{r4, r5, r6, pc}
    20a2:	46c0      	nop			; (mov r8, r8)
    20a4:	ffffe000 	.word	0xffffe000

000020a8 <__smakebuf_r>:
    20a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    20aa:	2602      	movs	r6, #2
    20ac:	898b      	ldrh	r3, [r1, #12]
    20ae:	0005      	movs	r5, r0
    20b0:	000c      	movs	r4, r1
    20b2:	4233      	tst	r3, r6
    20b4:	d006      	beq.n	20c4 <__smakebuf_r+0x1c>
    20b6:	0023      	movs	r3, r4
    20b8:	3347      	adds	r3, #71	; 0x47
    20ba:	6023      	str	r3, [r4, #0]
    20bc:	6123      	str	r3, [r4, #16]
    20be:	2301      	movs	r3, #1
    20c0:	6163      	str	r3, [r4, #20]
    20c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    20c4:	ab01      	add	r3, sp, #4
    20c6:	466a      	mov	r2, sp
    20c8:	f7ff ffc6 	bl	2058 <__swhatbuf_r>
    20cc:	9900      	ldr	r1, [sp, #0]
    20ce:	0007      	movs	r7, r0
    20d0:	0028      	movs	r0, r5
    20d2:	f000 f881 	bl	21d8 <_malloc_r>
    20d6:	2800      	cmp	r0, #0
    20d8:	d108      	bne.n	20ec <__smakebuf_r+0x44>
    20da:	220c      	movs	r2, #12
    20dc:	5ea3      	ldrsh	r3, [r4, r2]
    20de:	059a      	lsls	r2, r3, #22
    20e0:	d4ef      	bmi.n	20c2 <__smakebuf_r+0x1a>
    20e2:	2203      	movs	r2, #3
    20e4:	4393      	bics	r3, r2
    20e6:	431e      	orrs	r6, r3
    20e8:	81a6      	strh	r6, [r4, #12]
    20ea:	e7e4      	b.n	20b6 <__smakebuf_r+0xe>
    20ec:	4b0f      	ldr	r3, [pc, #60]	; (212c <__smakebuf_r+0x84>)
    20ee:	62ab      	str	r3, [r5, #40]	; 0x28
    20f0:	2380      	movs	r3, #128	; 0x80
    20f2:	89a2      	ldrh	r2, [r4, #12]
    20f4:	6020      	str	r0, [r4, #0]
    20f6:	4313      	orrs	r3, r2
    20f8:	81a3      	strh	r3, [r4, #12]
    20fa:	9b00      	ldr	r3, [sp, #0]
    20fc:	6120      	str	r0, [r4, #16]
    20fe:	6163      	str	r3, [r4, #20]
    2100:	9b01      	ldr	r3, [sp, #4]
    2102:	2b00      	cmp	r3, #0
    2104:	d00d      	beq.n	2122 <__smakebuf_r+0x7a>
    2106:	230e      	movs	r3, #14
    2108:	5ee1      	ldrsh	r1, [r4, r3]
    210a:	0028      	movs	r0, r5
    210c:	f000 fcf0 	bl	2af0 <_isatty_r>
    2110:	2800      	cmp	r0, #0
    2112:	d006      	beq.n	2122 <__smakebuf_r+0x7a>
    2114:	2203      	movs	r2, #3
    2116:	89a3      	ldrh	r3, [r4, #12]
    2118:	4393      	bics	r3, r2
    211a:	001a      	movs	r2, r3
    211c:	2301      	movs	r3, #1
    211e:	4313      	orrs	r3, r2
    2120:	81a3      	strh	r3, [r4, #12]
    2122:	89a0      	ldrh	r0, [r4, #12]
    2124:	4338      	orrs	r0, r7
    2126:	81a0      	strh	r0, [r4, #12]
    2128:	e7cb      	b.n	20c2 <__smakebuf_r+0x1a>
    212a:	46c0      	nop			; (mov r8, r8)
    212c:	00001ea9 	.word	0x00001ea9

00002130 <malloc>:
    2130:	b510      	push	{r4, lr}
    2132:	4b03      	ldr	r3, [pc, #12]	; (2140 <malloc+0x10>)
    2134:	0001      	movs	r1, r0
    2136:	6818      	ldr	r0, [r3, #0]
    2138:	f000 f84e 	bl	21d8 <_malloc_r>
    213c:	bd10      	pop	{r4, pc}
    213e:	46c0      	nop			; (mov r8, r8)
    2140:	20000008 	.word	0x20000008

00002144 <_free_r>:
    2144:	b570      	push	{r4, r5, r6, lr}
    2146:	0005      	movs	r5, r0
    2148:	2900      	cmp	r1, #0
    214a:	d010      	beq.n	216e <_free_r+0x2a>
    214c:	1f0c      	subs	r4, r1, #4
    214e:	6823      	ldr	r3, [r4, #0]
    2150:	2b00      	cmp	r3, #0
    2152:	da00      	bge.n	2156 <_free_r+0x12>
    2154:	18e4      	adds	r4, r4, r3
    2156:	0028      	movs	r0, r5
    2158:	f000 fcfb 	bl	2b52 <__malloc_lock>
    215c:	4a1d      	ldr	r2, [pc, #116]	; (21d4 <_free_r+0x90>)
    215e:	6813      	ldr	r3, [r2, #0]
    2160:	2b00      	cmp	r3, #0
    2162:	d105      	bne.n	2170 <_free_r+0x2c>
    2164:	6063      	str	r3, [r4, #4]
    2166:	6014      	str	r4, [r2, #0]
    2168:	0028      	movs	r0, r5
    216a:	f000 fcf3 	bl	2b54 <__malloc_unlock>
    216e:	bd70      	pop	{r4, r5, r6, pc}
    2170:	42a3      	cmp	r3, r4
    2172:	d909      	bls.n	2188 <_free_r+0x44>
    2174:	6821      	ldr	r1, [r4, #0]
    2176:	1860      	adds	r0, r4, r1
    2178:	4283      	cmp	r3, r0
    217a:	d1f3      	bne.n	2164 <_free_r+0x20>
    217c:	6818      	ldr	r0, [r3, #0]
    217e:	685b      	ldr	r3, [r3, #4]
    2180:	1841      	adds	r1, r0, r1
    2182:	6021      	str	r1, [r4, #0]
    2184:	e7ee      	b.n	2164 <_free_r+0x20>
    2186:	0013      	movs	r3, r2
    2188:	685a      	ldr	r2, [r3, #4]
    218a:	2a00      	cmp	r2, #0
    218c:	d001      	beq.n	2192 <_free_r+0x4e>
    218e:	42a2      	cmp	r2, r4
    2190:	d9f9      	bls.n	2186 <_free_r+0x42>
    2192:	6819      	ldr	r1, [r3, #0]
    2194:	1858      	adds	r0, r3, r1
    2196:	42a0      	cmp	r0, r4
    2198:	d10b      	bne.n	21b2 <_free_r+0x6e>
    219a:	6820      	ldr	r0, [r4, #0]
    219c:	1809      	adds	r1, r1, r0
    219e:	1858      	adds	r0, r3, r1
    21a0:	6019      	str	r1, [r3, #0]
    21a2:	4282      	cmp	r2, r0
    21a4:	d1e0      	bne.n	2168 <_free_r+0x24>
    21a6:	6810      	ldr	r0, [r2, #0]
    21a8:	6852      	ldr	r2, [r2, #4]
    21aa:	1841      	adds	r1, r0, r1
    21ac:	6019      	str	r1, [r3, #0]
    21ae:	605a      	str	r2, [r3, #4]
    21b0:	e7da      	b.n	2168 <_free_r+0x24>
    21b2:	42a0      	cmp	r0, r4
    21b4:	d902      	bls.n	21bc <_free_r+0x78>
    21b6:	230c      	movs	r3, #12
    21b8:	602b      	str	r3, [r5, #0]
    21ba:	e7d5      	b.n	2168 <_free_r+0x24>
    21bc:	6821      	ldr	r1, [r4, #0]
    21be:	1860      	adds	r0, r4, r1
    21c0:	4282      	cmp	r2, r0
    21c2:	d103      	bne.n	21cc <_free_r+0x88>
    21c4:	6810      	ldr	r0, [r2, #0]
    21c6:	6852      	ldr	r2, [r2, #4]
    21c8:	1841      	adds	r1, r0, r1
    21ca:	6021      	str	r1, [r4, #0]
    21cc:	6062      	str	r2, [r4, #4]
    21ce:	605c      	str	r4, [r3, #4]
    21d0:	e7ca      	b.n	2168 <_free_r+0x24>
    21d2:	46c0      	nop			; (mov r8, r8)
    21d4:	20000158 	.word	0x20000158

000021d8 <_malloc_r>:
    21d8:	2303      	movs	r3, #3
    21da:	b570      	push	{r4, r5, r6, lr}
    21dc:	1ccd      	adds	r5, r1, #3
    21de:	439d      	bics	r5, r3
    21e0:	3508      	adds	r5, #8
    21e2:	0006      	movs	r6, r0
    21e4:	2d0c      	cmp	r5, #12
    21e6:	d21e      	bcs.n	2226 <_malloc_r+0x4e>
    21e8:	250c      	movs	r5, #12
    21ea:	42a9      	cmp	r1, r5
    21ec:	d81d      	bhi.n	222a <_malloc_r+0x52>
    21ee:	0030      	movs	r0, r6
    21f0:	f000 fcaf 	bl	2b52 <__malloc_lock>
    21f4:	4a25      	ldr	r2, [pc, #148]	; (228c <_malloc_r+0xb4>)
    21f6:	6814      	ldr	r4, [r2, #0]
    21f8:	0021      	movs	r1, r4
    21fa:	2900      	cmp	r1, #0
    21fc:	d119      	bne.n	2232 <_malloc_r+0x5a>
    21fe:	4c24      	ldr	r4, [pc, #144]	; (2290 <_malloc_r+0xb8>)
    2200:	6823      	ldr	r3, [r4, #0]
    2202:	2b00      	cmp	r3, #0
    2204:	d103      	bne.n	220e <_malloc_r+0x36>
    2206:	0030      	movs	r0, r6
    2208:	f000 fb10 	bl	282c <_sbrk_r>
    220c:	6020      	str	r0, [r4, #0]
    220e:	0029      	movs	r1, r5
    2210:	0030      	movs	r0, r6
    2212:	f000 fb0b 	bl	282c <_sbrk_r>
    2216:	1c43      	adds	r3, r0, #1
    2218:	d12c      	bne.n	2274 <_malloc_r+0x9c>
    221a:	230c      	movs	r3, #12
    221c:	0030      	movs	r0, r6
    221e:	6033      	str	r3, [r6, #0]
    2220:	f000 fc98 	bl	2b54 <__malloc_unlock>
    2224:	e003      	b.n	222e <_malloc_r+0x56>
    2226:	2d00      	cmp	r5, #0
    2228:	dadf      	bge.n	21ea <_malloc_r+0x12>
    222a:	230c      	movs	r3, #12
    222c:	6033      	str	r3, [r6, #0]
    222e:	2000      	movs	r0, #0
    2230:	bd70      	pop	{r4, r5, r6, pc}
    2232:	680b      	ldr	r3, [r1, #0]
    2234:	1b5b      	subs	r3, r3, r5
    2236:	d41a      	bmi.n	226e <_malloc_r+0x96>
    2238:	2b0b      	cmp	r3, #11
    223a:	d903      	bls.n	2244 <_malloc_r+0x6c>
    223c:	600b      	str	r3, [r1, #0]
    223e:	18cc      	adds	r4, r1, r3
    2240:	6025      	str	r5, [r4, #0]
    2242:	e003      	b.n	224c <_malloc_r+0x74>
    2244:	428c      	cmp	r4, r1
    2246:	d10e      	bne.n	2266 <_malloc_r+0x8e>
    2248:	6863      	ldr	r3, [r4, #4]
    224a:	6013      	str	r3, [r2, #0]
    224c:	0030      	movs	r0, r6
    224e:	f000 fc81 	bl	2b54 <__malloc_unlock>
    2252:	0020      	movs	r0, r4
    2254:	2207      	movs	r2, #7
    2256:	300b      	adds	r0, #11
    2258:	1d23      	adds	r3, r4, #4
    225a:	4390      	bics	r0, r2
    225c:	1ac3      	subs	r3, r0, r3
    225e:	d0e7      	beq.n	2230 <_malloc_r+0x58>
    2260:	425a      	negs	r2, r3
    2262:	50e2      	str	r2, [r4, r3]
    2264:	e7e4      	b.n	2230 <_malloc_r+0x58>
    2266:	684b      	ldr	r3, [r1, #4]
    2268:	6063      	str	r3, [r4, #4]
    226a:	000c      	movs	r4, r1
    226c:	e7ee      	b.n	224c <_malloc_r+0x74>
    226e:	000c      	movs	r4, r1
    2270:	6849      	ldr	r1, [r1, #4]
    2272:	e7c2      	b.n	21fa <_malloc_r+0x22>
    2274:	2303      	movs	r3, #3
    2276:	1cc4      	adds	r4, r0, #3
    2278:	439c      	bics	r4, r3
    227a:	42a0      	cmp	r0, r4
    227c:	d0e0      	beq.n	2240 <_malloc_r+0x68>
    227e:	1a21      	subs	r1, r4, r0
    2280:	0030      	movs	r0, r6
    2282:	f000 fad3 	bl	282c <_sbrk_r>
    2286:	1c43      	adds	r3, r0, #1
    2288:	d1da      	bne.n	2240 <_malloc_r+0x68>
    228a:	e7c6      	b.n	221a <_malloc_r+0x42>
    228c:	20000158 	.word	0x20000158
    2290:	2000015c 	.word	0x2000015c

00002294 <__sfputc_r>:
    2294:	6893      	ldr	r3, [r2, #8]
    2296:	b510      	push	{r4, lr}
    2298:	3b01      	subs	r3, #1
    229a:	6093      	str	r3, [r2, #8]
    229c:	2b00      	cmp	r3, #0
    229e:	da05      	bge.n	22ac <__sfputc_r+0x18>
    22a0:	6994      	ldr	r4, [r2, #24]
    22a2:	42a3      	cmp	r3, r4
    22a4:	db08      	blt.n	22b8 <__sfputc_r+0x24>
    22a6:	b2cb      	uxtb	r3, r1
    22a8:	2b0a      	cmp	r3, #10
    22aa:	d005      	beq.n	22b8 <__sfputc_r+0x24>
    22ac:	6813      	ldr	r3, [r2, #0]
    22ae:	1c58      	adds	r0, r3, #1
    22b0:	6010      	str	r0, [r2, #0]
    22b2:	7019      	strb	r1, [r3, #0]
    22b4:	b2c8      	uxtb	r0, r1
    22b6:	bd10      	pop	{r4, pc}
    22b8:	f000 fb16 	bl	28e8 <__swbuf_r>
    22bc:	e7fb      	b.n	22b6 <__sfputc_r+0x22>

000022be <__sfputs_r>:
    22be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22c0:	0006      	movs	r6, r0
    22c2:	000f      	movs	r7, r1
    22c4:	0014      	movs	r4, r2
    22c6:	18d5      	adds	r5, r2, r3
    22c8:	42ac      	cmp	r4, r5
    22ca:	d101      	bne.n	22d0 <__sfputs_r+0x12>
    22cc:	2000      	movs	r0, #0
    22ce:	e007      	b.n	22e0 <__sfputs_r+0x22>
    22d0:	7821      	ldrb	r1, [r4, #0]
    22d2:	003a      	movs	r2, r7
    22d4:	0030      	movs	r0, r6
    22d6:	f7ff ffdd 	bl	2294 <__sfputc_r>
    22da:	3401      	adds	r4, #1
    22dc:	1c43      	adds	r3, r0, #1
    22de:	d1f3      	bne.n	22c8 <__sfputs_r+0xa>
    22e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000022e4 <_vfiprintf_r>:
    22e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22e6:	b09f      	sub	sp, #124	; 0x7c
    22e8:	0006      	movs	r6, r0
    22ea:	000f      	movs	r7, r1
    22ec:	0014      	movs	r4, r2
    22ee:	9305      	str	r3, [sp, #20]
    22f0:	2800      	cmp	r0, #0
    22f2:	d004      	beq.n	22fe <_vfiprintf_r+0x1a>
    22f4:	6983      	ldr	r3, [r0, #24]
    22f6:	2b00      	cmp	r3, #0
    22f8:	d101      	bne.n	22fe <_vfiprintf_r+0x1a>
    22fa:	f7ff fe17 	bl	1f2c <__sinit>
    22fe:	4b7f      	ldr	r3, [pc, #508]	; (24fc <_vfiprintf_r+0x218>)
    2300:	429f      	cmp	r7, r3
    2302:	d15c      	bne.n	23be <_vfiprintf_r+0xda>
    2304:	6877      	ldr	r7, [r6, #4]
    2306:	89bb      	ldrh	r3, [r7, #12]
    2308:	071b      	lsls	r3, r3, #28
    230a:	d562      	bpl.n	23d2 <_vfiprintf_r+0xee>
    230c:	693b      	ldr	r3, [r7, #16]
    230e:	2b00      	cmp	r3, #0
    2310:	d05f      	beq.n	23d2 <_vfiprintf_r+0xee>
    2312:	2300      	movs	r3, #0
    2314:	ad06      	add	r5, sp, #24
    2316:	616b      	str	r3, [r5, #20]
    2318:	3320      	adds	r3, #32
    231a:	766b      	strb	r3, [r5, #25]
    231c:	3310      	adds	r3, #16
    231e:	76ab      	strb	r3, [r5, #26]
    2320:	9402      	str	r4, [sp, #8]
    2322:	9c02      	ldr	r4, [sp, #8]
    2324:	7823      	ldrb	r3, [r4, #0]
    2326:	2b00      	cmp	r3, #0
    2328:	d15d      	bne.n	23e6 <_vfiprintf_r+0x102>
    232a:	9b02      	ldr	r3, [sp, #8]
    232c:	1ae3      	subs	r3, r4, r3
    232e:	9304      	str	r3, [sp, #16]
    2330:	d00d      	beq.n	234e <_vfiprintf_r+0x6a>
    2332:	9b04      	ldr	r3, [sp, #16]
    2334:	9a02      	ldr	r2, [sp, #8]
    2336:	0039      	movs	r1, r7
    2338:	0030      	movs	r0, r6
    233a:	f7ff ffc0 	bl	22be <__sfputs_r>
    233e:	1c43      	adds	r3, r0, #1
    2340:	d100      	bne.n	2344 <_vfiprintf_r+0x60>
    2342:	e0cc      	b.n	24de <_vfiprintf_r+0x1fa>
    2344:	696a      	ldr	r2, [r5, #20]
    2346:	9b04      	ldr	r3, [sp, #16]
    2348:	4694      	mov	ip, r2
    234a:	4463      	add	r3, ip
    234c:	616b      	str	r3, [r5, #20]
    234e:	7823      	ldrb	r3, [r4, #0]
    2350:	2b00      	cmp	r3, #0
    2352:	d100      	bne.n	2356 <_vfiprintf_r+0x72>
    2354:	e0c3      	b.n	24de <_vfiprintf_r+0x1fa>
    2356:	2201      	movs	r2, #1
    2358:	2300      	movs	r3, #0
    235a:	4252      	negs	r2, r2
    235c:	606a      	str	r2, [r5, #4]
    235e:	a902      	add	r1, sp, #8
    2360:	3254      	adds	r2, #84	; 0x54
    2362:	1852      	adds	r2, r2, r1
    2364:	3401      	adds	r4, #1
    2366:	602b      	str	r3, [r5, #0]
    2368:	60eb      	str	r3, [r5, #12]
    236a:	60ab      	str	r3, [r5, #8]
    236c:	7013      	strb	r3, [r2, #0]
    236e:	65ab      	str	r3, [r5, #88]	; 0x58
    2370:	7821      	ldrb	r1, [r4, #0]
    2372:	2205      	movs	r2, #5
    2374:	4862      	ldr	r0, [pc, #392]	; (2500 <_vfiprintf_r+0x21c>)
    2376:	f000 fbe1 	bl	2b3c <memchr>
    237a:	1c63      	adds	r3, r4, #1
    237c:	469c      	mov	ip, r3
    237e:	2800      	cmp	r0, #0
    2380:	d135      	bne.n	23ee <_vfiprintf_r+0x10a>
    2382:	6829      	ldr	r1, [r5, #0]
    2384:	06cb      	lsls	r3, r1, #27
    2386:	d504      	bpl.n	2392 <_vfiprintf_r+0xae>
    2388:	2353      	movs	r3, #83	; 0x53
    238a:	aa02      	add	r2, sp, #8
    238c:	3020      	adds	r0, #32
    238e:	189b      	adds	r3, r3, r2
    2390:	7018      	strb	r0, [r3, #0]
    2392:	070b      	lsls	r3, r1, #28
    2394:	d504      	bpl.n	23a0 <_vfiprintf_r+0xbc>
    2396:	2353      	movs	r3, #83	; 0x53
    2398:	202b      	movs	r0, #43	; 0x2b
    239a:	aa02      	add	r2, sp, #8
    239c:	189b      	adds	r3, r3, r2
    239e:	7018      	strb	r0, [r3, #0]
    23a0:	7823      	ldrb	r3, [r4, #0]
    23a2:	2b2a      	cmp	r3, #42	; 0x2a
    23a4:	d02c      	beq.n	2400 <_vfiprintf_r+0x11c>
    23a6:	2000      	movs	r0, #0
    23a8:	210a      	movs	r1, #10
    23aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    23ac:	7822      	ldrb	r2, [r4, #0]
    23ae:	3a30      	subs	r2, #48	; 0x30
    23b0:	2a09      	cmp	r2, #9
    23b2:	d800      	bhi.n	23b6 <_vfiprintf_r+0xd2>
    23b4:	e06b      	b.n	248e <_vfiprintf_r+0x1aa>
    23b6:	2800      	cmp	r0, #0
    23b8:	d02a      	beq.n	2410 <_vfiprintf_r+0x12c>
    23ba:	9309      	str	r3, [sp, #36]	; 0x24
    23bc:	e028      	b.n	2410 <_vfiprintf_r+0x12c>
    23be:	4b51      	ldr	r3, [pc, #324]	; (2504 <_vfiprintf_r+0x220>)
    23c0:	429f      	cmp	r7, r3
    23c2:	d101      	bne.n	23c8 <_vfiprintf_r+0xe4>
    23c4:	68b7      	ldr	r7, [r6, #8]
    23c6:	e79e      	b.n	2306 <_vfiprintf_r+0x22>
    23c8:	4b4f      	ldr	r3, [pc, #316]	; (2508 <_vfiprintf_r+0x224>)
    23ca:	429f      	cmp	r7, r3
    23cc:	d19b      	bne.n	2306 <_vfiprintf_r+0x22>
    23ce:	68f7      	ldr	r7, [r6, #12]
    23d0:	e799      	b.n	2306 <_vfiprintf_r+0x22>
    23d2:	0039      	movs	r1, r7
    23d4:	0030      	movs	r0, r6
    23d6:	f000 faf1 	bl	29bc <__swsetup_r>
    23da:	2800      	cmp	r0, #0
    23dc:	d099      	beq.n	2312 <_vfiprintf_r+0x2e>
    23de:	2001      	movs	r0, #1
    23e0:	4240      	negs	r0, r0
    23e2:	b01f      	add	sp, #124	; 0x7c
    23e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23e6:	2b25      	cmp	r3, #37	; 0x25
    23e8:	d09f      	beq.n	232a <_vfiprintf_r+0x46>
    23ea:	3401      	adds	r4, #1
    23ec:	e79a      	b.n	2324 <_vfiprintf_r+0x40>
    23ee:	4b44      	ldr	r3, [pc, #272]	; (2500 <_vfiprintf_r+0x21c>)
    23f0:	6829      	ldr	r1, [r5, #0]
    23f2:	1ac0      	subs	r0, r0, r3
    23f4:	2301      	movs	r3, #1
    23f6:	4083      	lsls	r3, r0
    23f8:	430b      	orrs	r3, r1
    23fa:	602b      	str	r3, [r5, #0]
    23fc:	4664      	mov	r4, ip
    23fe:	e7b7      	b.n	2370 <_vfiprintf_r+0x8c>
    2400:	9b05      	ldr	r3, [sp, #20]
    2402:	1d18      	adds	r0, r3, #4
    2404:	681b      	ldr	r3, [r3, #0]
    2406:	9005      	str	r0, [sp, #20]
    2408:	2b00      	cmp	r3, #0
    240a:	db3a      	blt.n	2482 <_vfiprintf_r+0x19e>
    240c:	9309      	str	r3, [sp, #36]	; 0x24
    240e:	4664      	mov	r4, ip
    2410:	7823      	ldrb	r3, [r4, #0]
    2412:	2b2e      	cmp	r3, #46	; 0x2e
    2414:	d10b      	bne.n	242e <_vfiprintf_r+0x14a>
    2416:	7863      	ldrb	r3, [r4, #1]
    2418:	1c62      	adds	r2, r4, #1
    241a:	2b2a      	cmp	r3, #42	; 0x2a
    241c:	d13f      	bne.n	249e <_vfiprintf_r+0x1ba>
    241e:	9b05      	ldr	r3, [sp, #20]
    2420:	3402      	adds	r4, #2
    2422:	1d1a      	adds	r2, r3, #4
    2424:	681b      	ldr	r3, [r3, #0]
    2426:	9205      	str	r2, [sp, #20]
    2428:	2b00      	cmp	r3, #0
    242a:	db35      	blt.n	2498 <_vfiprintf_r+0x1b4>
    242c:	9307      	str	r3, [sp, #28]
    242e:	7821      	ldrb	r1, [r4, #0]
    2430:	2203      	movs	r2, #3
    2432:	4836      	ldr	r0, [pc, #216]	; (250c <_vfiprintf_r+0x228>)
    2434:	f000 fb82 	bl	2b3c <memchr>
    2438:	2800      	cmp	r0, #0
    243a:	d007      	beq.n	244c <_vfiprintf_r+0x168>
    243c:	4b33      	ldr	r3, [pc, #204]	; (250c <_vfiprintf_r+0x228>)
    243e:	682a      	ldr	r2, [r5, #0]
    2440:	1ac0      	subs	r0, r0, r3
    2442:	2340      	movs	r3, #64	; 0x40
    2444:	4083      	lsls	r3, r0
    2446:	4313      	orrs	r3, r2
    2448:	602b      	str	r3, [r5, #0]
    244a:	3401      	adds	r4, #1
    244c:	7821      	ldrb	r1, [r4, #0]
    244e:	1c63      	adds	r3, r4, #1
    2450:	2206      	movs	r2, #6
    2452:	482f      	ldr	r0, [pc, #188]	; (2510 <_vfiprintf_r+0x22c>)
    2454:	9302      	str	r3, [sp, #8]
    2456:	7629      	strb	r1, [r5, #24]
    2458:	f000 fb70 	bl	2b3c <memchr>
    245c:	2800      	cmp	r0, #0
    245e:	d044      	beq.n	24ea <_vfiprintf_r+0x206>
    2460:	4b2c      	ldr	r3, [pc, #176]	; (2514 <_vfiprintf_r+0x230>)
    2462:	2b00      	cmp	r3, #0
    2464:	d12f      	bne.n	24c6 <_vfiprintf_r+0x1e2>
    2466:	6829      	ldr	r1, [r5, #0]
    2468:	9b05      	ldr	r3, [sp, #20]
    246a:	2207      	movs	r2, #7
    246c:	05c9      	lsls	r1, r1, #23
    246e:	d528      	bpl.n	24c2 <_vfiprintf_r+0x1de>
    2470:	189b      	adds	r3, r3, r2
    2472:	4393      	bics	r3, r2
    2474:	3308      	adds	r3, #8
    2476:	9305      	str	r3, [sp, #20]
    2478:	696b      	ldr	r3, [r5, #20]
    247a:	9a03      	ldr	r2, [sp, #12]
    247c:	189b      	adds	r3, r3, r2
    247e:	616b      	str	r3, [r5, #20]
    2480:	e74f      	b.n	2322 <_vfiprintf_r+0x3e>
    2482:	425b      	negs	r3, r3
    2484:	60eb      	str	r3, [r5, #12]
    2486:	2302      	movs	r3, #2
    2488:	430b      	orrs	r3, r1
    248a:	602b      	str	r3, [r5, #0]
    248c:	e7bf      	b.n	240e <_vfiprintf_r+0x12a>
    248e:	434b      	muls	r3, r1
    2490:	3401      	adds	r4, #1
    2492:	189b      	adds	r3, r3, r2
    2494:	2001      	movs	r0, #1
    2496:	e789      	b.n	23ac <_vfiprintf_r+0xc8>
    2498:	2301      	movs	r3, #1
    249a:	425b      	negs	r3, r3
    249c:	e7c6      	b.n	242c <_vfiprintf_r+0x148>
    249e:	2300      	movs	r3, #0
    24a0:	0014      	movs	r4, r2
    24a2:	200a      	movs	r0, #10
    24a4:	001a      	movs	r2, r3
    24a6:	606b      	str	r3, [r5, #4]
    24a8:	7821      	ldrb	r1, [r4, #0]
    24aa:	3930      	subs	r1, #48	; 0x30
    24ac:	2909      	cmp	r1, #9
    24ae:	d903      	bls.n	24b8 <_vfiprintf_r+0x1d4>
    24b0:	2b00      	cmp	r3, #0
    24b2:	d0bc      	beq.n	242e <_vfiprintf_r+0x14a>
    24b4:	9207      	str	r2, [sp, #28]
    24b6:	e7ba      	b.n	242e <_vfiprintf_r+0x14a>
    24b8:	4342      	muls	r2, r0
    24ba:	3401      	adds	r4, #1
    24bc:	1852      	adds	r2, r2, r1
    24be:	2301      	movs	r3, #1
    24c0:	e7f2      	b.n	24a8 <_vfiprintf_r+0x1c4>
    24c2:	3307      	adds	r3, #7
    24c4:	e7d5      	b.n	2472 <_vfiprintf_r+0x18e>
    24c6:	ab05      	add	r3, sp, #20
    24c8:	9300      	str	r3, [sp, #0]
    24ca:	003a      	movs	r2, r7
    24cc:	4b12      	ldr	r3, [pc, #72]	; (2518 <_vfiprintf_r+0x234>)
    24ce:	0029      	movs	r1, r5
    24d0:	0030      	movs	r0, r6
    24d2:	e000      	b.n	24d6 <_vfiprintf_r+0x1f2>
    24d4:	bf00      	nop
    24d6:	9003      	str	r0, [sp, #12]
    24d8:	9b03      	ldr	r3, [sp, #12]
    24da:	3301      	adds	r3, #1
    24dc:	d1cc      	bne.n	2478 <_vfiprintf_r+0x194>
    24de:	89bb      	ldrh	r3, [r7, #12]
    24e0:	065b      	lsls	r3, r3, #25
    24e2:	d500      	bpl.n	24e6 <_vfiprintf_r+0x202>
    24e4:	e77b      	b.n	23de <_vfiprintf_r+0xfa>
    24e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    24e8:	e77b      	b.n	23e2 <_vfiprintf_r+0xfe>
    24ea:	ab05      	add	r3, sp, #20
    24ec:	9300      	str	r3, [sp, #0]
    24ee:	003a      	movs	r2, r7
    24f0:	4b09      	ldr	r3, [pc, #36]	; (2518 <_vfiprintf_r+0x234>)
    24f2:	0029      	movs	r1, r5
    24f4:	0030      	movs	r0, r6
    24f6:	f000 f87f 	bl	25f8 <_printf_i>
    24fa:	e7ec      	b.n	24d6 <_vfiprintf_r+0x1f2>
    24fc:	00002c20 	.word	0x00002c20
    2500:	00002c60 	.word	0x00002c60
    2504:	00002c40 	.word	0x00002c40
    2508:	00002c00 	.word	0x00002c00
    250c:	00002c66 	.word	0x00002c66
    2510:	00002c6a 	.word	0x00002c6a
    2514:	00000000 	.word	0x00000000
    2518:	000022bf 	.word	0x000022bf

0000251c <_printf_common>:
    251c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    251e:	0015      	movs	r5, r2
    2520:	9301      	str	r3, [sp, #4]
    2522:	688a      	ldr	r2, [r1, #8]
    2524:	690b      	ldr	r3, [r1, #16]
    2526:	9000      	str	r0, [sp, #0]
    2528:	000c      	movs	r4, r1
    252a:	4293      	cmp	r3, r2
    252c:	da00      	bge.n	2530 <_printf_common+0x14>
    252e:	0013      	movs	r3, r2
    2530:	0022      	movs	r2, r4
    2532:	602b      	str	r3, [r5, #0]
    2534:	3243      	adds	r2, #67	; 0x43
    2536:	7812      	ldrb	r2, [r2, #0]
    2538:	2a00      	cmp	r2, #0
    253a:	d001      	beq.n	2540 <_printf_common+0x24>
    253c:	3301      	adds	r3, #1
    253e:	602b      	str	r3, [r5, #0]
    2540:	6823      	ldr	r3, [r4, #0]
    2542:	069b      	lsls	r3, r3, #26
    2544:	d502      	bpl.n	254c <_printf_common+0x30>
    2546:	682b      	ldr	r3, [r5, #0]
    2548:	3302      	adds	r3, #2
    254a:	602b      	str	r3, [r5, #0]
    254c:	2706      	movs	r7, #6
    254e:	6823      	ldr	r3, [r4, #0]
    2550:	401f      	ands	r7, r3
    2552:	d027      	beq.n	25a4 <_printf_common+0x88>
    2554:	0023      	movs	r3, r4
    2556:	3343      	adds	r3, #67	; 0x43
    2558:	781b      	ldrb	r3, [r3, #0]
    255a:	1e5a      	subs	r2, r3, #1
    255c:	4193      	sbcs	r3, r2
    255e:	6822      	ldr	r2, [r4, #0]
    2560:	0692      	lsls	r2, r2, #26
    2562:	d430      	bmi.n	25c6 <_printf_common+0xaa>
    2564:	0022      	movs	r2, r4
    2566:	9901      	ldr	r1, [sp, #4]
    2568:	3243      	adds	r2, #67	; 0x43
    256a:	9800      	ldr	r0, [sp, #0]
    256c:	9e08      	ldr	r6, [sp, #32]
    256e:	47b0      	blx	r6
    2570:	1c43      	adds	r3, r0, #1
    2572:	d025      	beq.n	25c0 <_printf_common+0xa4>
    2574:	2306      	movs	r3, #6
    2576:	6820      	ldr	r0, [r4, #0]
    2578:	682a      	ldr	r2, [r5, #0]
    257a:	68e1      	ldr	r1, [r4, #12]
    257c:	4003      	ands	r3, r0
    257e:	2500      	movs	r5, #0
    2580:	2b04      	cmp	r3, #4
    2582:	d103      	bne.n	258c <_printf_common+0x70>
    2584:	1a8d      	subs	r5, r1, r2
    2586:	43eb      	mvns	r3, r5
    2588:	17db      	asrs	r3, r3, #31
    258a:	401d      	ands	r5, r3
    258c:	68a3      	ldr	r3, [r4, #8]
    258e:	6922      	ldr	r2, [r4, #16]
    2590:	4293      	cmp	r3, r2
    2592:	dd01      	ble.n	2598 <_printf_common+0x7c>
    2594:	1a9b      	subs	r3, r3, r2
    2596:	18ed      	adds	r5, r5, r3
    2598:	2700      	movs	r7, #0
    259a:	42bd      	cmp	r5, r7
    259c:	d120      	bne.n	25e0 <_printf_common+0xc4>
    259e:	2000      	movs	r0, #0
    25a0:	e010      	b.n	25c4 <_printf_common+0xa8>
    25a2:	3701      	adds	r7, #1
    25a4:	68e3      	ldr	r3, [r4, #12]
    25a6:	682a      	ldr	r2, [r5, #0]
    25a8:	1a9b      	subs	r3, r3, r2
    25aa:	429f      	cmp	r7, r3
    25ac:	dad2      	bge.n	2554 <_printf_common+0x38>
    25ae:	0022      	movs	r2, r4
    25b0:	2301      	movs	r3, #1
    25b2:	3219      	adds	r2, #25
    25b4:	9901      	ldr	r1, [sp, #4]
    25b6:	9800      	ldr	r0, [sp, #0]
    25b8:	9e08      	ldr	r6, [sp, #32]
    25ba:	47b0      	blx	r6
    25bc:	1c43      	adds	r3, r0, #1
    25be:	d1f0      	bne.n	25a2 <_printf_common+0x86>
    25c0:	2001      	movs	r0, #1
    25c2:	4240      	negs	r0, r0
    25c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    25c6:	2030      	movs	r0, #48	; 0x30
    25c8:	18e1      	adds	r1, r4, r3
    25ca:	3143      	adds	r1, #67	; 0x43
    25cc:	7008      	strb	r0, [r1, #0]
    25ce:	0021      	movs	r1, r4
    25d0:	1c5a      	adds	r2, r3, #1
    25d2:	3145      	adds	r1, #69	; 0x45
    25d4:	7809      	ldrb	r1, [r1, #0]
    25d6:	18a2      	adds	r2, r4, r2
    25d8:	3243      	adds	r2, #67	; 0x43
    25da:	3302      	adds	r3, #2
    25dc:	7011      	strb	r1, [r2, #0]
    25de:	e7c1      	b.n	2564 <_printf_common+0x48>
    25e0:	0022      	movs	r2, r4
    25e2:	2301      	movs	r3, #1
    25e4:	321a      	adds	r2, #26
    25e6:	9901      	ldr	r1, [sp, #4]
    25e8:	9800      	ldr	r0, [sp, #0]
    25ea:	9e08      	ldr	r6, [sp, #32]
    25ec:	47b0      	blx	r6
    25ee:	1c43      	adds	r3, r0, #1
    25f0:	d0e6      	beq.n	25c0 <_printf_common+0xa4>
    25f2:	3701      	adds	r7, #1
    25f4:	e7d1      	b.n	259a <_printf_common+0x7e>
	...

000025f8 <_printf_i>:
    25f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    25fa:	b08b      	sub	sp, #44	; 0x2c
    25fc:	9206      	str	r2, [sp, #24]
    25fe:	000a      	movs	r2, r1
    2600:	3243      	adds	r2, #67	; 0x43
    2602:	9307      	str	r3, [sp, #28]
    2604:	9005      	str	r0, [sp, #20]
    2606:	9204      	str	r2, [sp, #16]
    2608:	7e0a      	ldrb	r2, [r1, #24]
    260a:	000c      	movs	r4, r1
    260c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    260e:	2a6e      	cmp	r2, #110	; 0x6e
    2610:	d100      	bne.n	2614 <_printf_i+0x1c>
    2612:	e08f      	b.n	2734 <_printf_i+0x13c>
    2614:	d817      	bhi.n	2646 <_printf_i+0x4e>
    2616:	2a63      	cmp	r2, #99	; 0x63
    2618:	d02c      	beq.n	2674 <_printf_i+0x7c>
    261a:	d808      	bhi.n	262e <_printf_i+0x36>
    261c:	2a00      	cmp	r2, #0
    261e:	d100      	bne.n	2622 <_printf_i+0x2a>
    2620:	e099      	b.n	2756 <_printf_i+0x15e>
    2622:	2a58      	cmp	r2, #88	; 0x58
    2624:	d054      	beq.n	26d0 <_printf_i+0xd8>
    2626:	0026      	movs	r6, r4
    2628:	3642      	adds	r6, #66	; 0x42
    262a:	7032      	strb	r2, [r6, #0]
    262c:	e029      	b.n	2682 <_printf_i+0x8a>
    262e:	2a64      	cmp	r2, #100	; 0x64
    2630:	d001      	beq.n	2636 <_printf_i+0x3e>
    2632:	2a69      	cmp	r2, #105	; 0x69
    2634:	d1f7      	bne.n	2626 <_printf_i+0x2e>
    2636:	6821      	ldr	r1, [r4, #0]
    2638:	681a      	ldr	r2, [r3, #0]
    263a:	0608      	lsls	r0, r1, #24
    263c:	d523      	bpl.n	2686 <_printf_i+0x8e>
    263e:	1d11      	adds	r1, r2, #4
    2640:	6019      	str	r1, [r3, #0]
    2642:	6815      	ldr	r5, [r2, #0]
    2644:	e025      	b.n	2692 <_printf_i+0x9a>
    2646:	2a73      	cmp	r2, #115	; 0x73
    2648:	d100      	bne.n	264c <_printf_i+0x54>
    264a:	e088      	b.n	275e <_printf_i+0x166>
    264c:	d808      	bhi.n	2660 <_printf_i+0x68>
    264e:	2a6f      	cmp	r2, #111	; 0x6f
    2650:	d029      	beq.n	26a6 <_printf_i+0xae>
    2652:	2a70      	cmp	r2, #112	; 0x70
    2654:	d1e7      	bne.n	2626 <_printf_i+0x2e>
    2656:	2220      	movs	r2, #32
    2658:	6809      	ldr	r1, [r1, #0]
    265a:	430a      	orrs	r2, r1
    265c:	6022      	str	r2, [r4, #0]
    265e:	e003      	b.n	2668 <_printf_i+0x70>
    2660:	2a75      	cmp	r2, #117	; 0x75
    2662:	d020      	beq.n	26a6 <_printf_i+0xae>
    2664:	2a78      	cmp	r2, #120	; 0x78
    2666:	d1de      	bne.n	2626 <_printf_i+0x2e>
    2668:	0022      	movs	r2, r4
    266a:	2178      	movs	r1, #120	; 0x78
    266c:	3245      	adds	r2, #69	; 0x45
    266e:	7011      	strb	r1, [r2, #0]
    2670:	4a6c      	ldr	r2, [pc, #432]	; (2824 <_printf_i+0x22c>)
    2672:	e030      	b.n	26d6 <_printf_i+0xde>
    2674:	000e      	movs	r6, r1
    2676:	681a      	ldr	r2, [r3, #0]
    2678:	3642      	adds	r6, #66	; 0x42
    267a:	1d11      	adds	r1, r2, #4
    267c:	6019      	str	r1, [r3, #0]
    267e:	6813      	ldr	r3, [r2, #0]
    2680:	7033      	strb	r3, [r6, #0]
    2682:	2301      	movs	r3, #1
    2684:	e079      	b.n	277a <_printf_i+0x182>
    2686:	0649      	lsls	r1, r1, #25
    2688:	d5d9      	bpl.n	263e <_printf_i+0x46>
    268a:	1d11      	adds	r1, r2, #4
    268c:	6019      	str	r1, [r3, #0]
    268e:	2300      	movs	r3, #0
    2690:	5ed5      	ldrsh	r5, [r2, r3]
    2692:	2d00      	cmp	r5, #0
    2694:	da03      	bge.n	269e <_printf_i+0xa6>
    2696:	232d      	movs	r3, #45	; 0x2d
    2698:	9a04      	ldr	r2, [sp, #16]
    269a:	426d      	negs	r5, r5
    269c:	7013      	strb	r3, [r2, #0]
    269e:	4b62      	ldr	r3, [pc, #392]	; (2828 <_printf_i+0x230>)
    26a0:	270a      	movs	r7, #10
    26a2:	9303      	str	r3, [sp, #12]
    26a4:	e02f      	b.n	2706 <_printf_i+0x10e>
    26a6:	6820      	ldr	r0, [r4, #0]
    26a8:	6819      	ldr	r1, [r3, #0]
    26aa:	0605      	lsls	r5, r0, #24
    26ac:	d503      	bpl.n	26b6 <_printf_i+0xbe>
    26ae:	1d08      	adds	r0, r1, #4
    26b0:	6018      	str	r0, [r3, #0]
    26b2:	680d      	ldr	r5, [r1, #0]
    26b4:	e005      	b.n	26c2 <_printf_i+0xca>
    26b6:	0640      	lsls	r0, r0, #25
    26b8:	d5f9      	bpl.n	26ae <_printf_i+0xb6>
    26ba:	680d      	ldr	r5, [r1, #0]
    26bc:	1d08      	adds	r0, r1, #4
    26be:	6018      	str	r0, [r3, #0]
    26c0:	b2ad      	uxth	r5, r5
    26c2:	4b59      	ldr	r3, [pc, #356]	; (2828 <_printf_i+0x230>)
    26c4:	2708      	movs	r7, #8
    26c6:	9303      	str	r3, [sp, #12]
    26c8:	2a6f      	cmp	r2, #111	; 0x6f
    26ca:	d018      	beq.n	26fe <_printf_i+0x106>
    26cc:	270a      	movs	r7, #10
    26ce:	e016      	b.n	26fe <_printf_i+0x106>
    26d0:	3145      	adds	r1, #69	; 0x45
    26d2:	700a      	strb	r2, [r1, #0]
    26d4:	4a54      	ldr	r2, [pc, #336]	; (2828 <_printf_i+0x230>)
    26d6:	9203      	str	r2, [sp, #12]
    26d8:	681a      	ldr	r2, [r3, #0]
    26da:	6821      	ldr	r1, [r4, #0]
    26dc:	1d10      	adds	r0, r2, #4
    26de:	6018      	str	r0, [r3, #0]
    26e0:	6815      	ldr	r5, [r2, #0]
    26e2:	0608      	lsls	r0, r1, #24
    26e4:	d522      	bpl.n	272c <_printf_i+0x134>
    26e6:	07cb      	lsls	r3, r1, #31
    26e8:	d502      	bpl.n	26f0 <_printf_i+0xf8>
    26ea:	2320      	movs	r3, #32
    26ec:	4319      	orrs	r1, r3
    26ee:	6021      	str	r1, [r4, #0]
    26f0:	2710      	movs	r7, #16
    26f2:	2d00      	cmp	r5, #0
    26f4:	d103      	bne.n	26fe <_printf_i+0x106>
    26f6:	2320      	movs	r3, #32
    26f8:	6822      	ldr	r2, [r4, #0]
    26fa:	439a      	bics	r2, r3
    26fc:	6022      	str	r2, [r4, #0]
    26fe:	0023      	movs	r3, r4
    2700:	2200      	movs	r2, #0
    2702:	3343      	adds	r3, #67	; 0x43
    2704:	701a      	strb	r2, [r3, #0]
    2706:	6863      	ldr	r3, [r4, #4]
    2708:	60a3      	str	r3, [r4, #8]
    270a:	2b00      	cmp	r3, #0
    270c:	db5c      	blt.n	27c8 <_printf_i+0x1d0>
    270e:	2204      	movs	r2, #4
    2710:	6821      	ldr	r1, [r4, #0]
    2712:	4391      	bics	r1, r2
    2714:	6021      	str	r1, [r4, #0]
    2716:	2d00      	cmp	r5, #0
    2718:	d158      	bne.n	27cc <_printf_i+0x1d4>
    271a:	9e04      	ldr	r6, [sp, #16]
    271c:	2b00      	cmp	r3, #0
    271e:	d064      	beq.n	27ea <_printf_i+0x1f2>
    2720:	0026      	movs	r6, r4
    2722:	9b03      	ldr	r3, [sp, #12]
    2724:	3642      	adds	r6, #66	; 0x42
    2726:	781b      	ldrb	r3, [r3, #0]
    2728:	7033      	strb	r3, [r6, #0]
    272a:	e05e      	b.n	27ea <_printf_i+0x1f2>
    272c:	0648      	lsls	r0, r1, #25
    272e:	d5da      	bpl.n	26e6 <_printf_i+0xee>
    2730:	b2ad      	uxth	r5, r5
    2732:	e7d8      	b.n	26e6 <_printf_i+0xee>
    2734:	6809      	ldr	r1, [r1, #0]
    2736:	681a      	ldr	r2, [r3, #0]
    2738:	0608      	lsls	r0, r1, #24
    273a:	d505      	bpl.n	2748 <_printf_i+0x150>
    273c:	1d11      	adds	r1, r2, #4
    273e:	6019      	str	r1, [r3, #0]
    2740:	6813      	ldr	r3, [r2, #0]
    2742:	6962      	ldr	r2, [r4, #20]
    2744:	601a      	str	r2, [r3, #0]
    2746:	e006      	b.n	2756 <_printf_i+0x15e>
    2748:	0649      	lsls	r1, r1, #25
    274a:	d5f7      	bpl.n	273c <_printf_i+0x144>
    274c:	1d11      	adds	r1, r2, #4
    274e:	6019      	str	r1, [r3, #0]
    2750:	6813      	ldr	r3, [r2, #0]
    2752:	8aa2      	ldrh	r2, [r4, #20]
    2754:	801a      	strh	r2, [r3, #0]
    2756:	2300      	movs	r3, #0
    2758:	9e04      	ldr	r6, [sp, #16]
    275a:	6123      	str	r3, [r4, #16]
    275c:	e054      	b.n	2808 <_printf_i+0x210>
    275e:	681a      	ldr	r2, [r3, #0]
    2760:	1d11      	adds	r1, r2, #4
    2762:	6019      	str	r1, [r3, #0]
    2764:	6816      	ldr	r6, [r2, #0]
    2766:	2100      	movs	r1, #0
    2768:	6862      	ldr	r2, [r4, #4]
    276a:	0030      	movs	r0, r6
    276c:	f000 f9e6 	bl	2b3c <memchr>
    2770:	2800      	cmp	r0, #0
    2772:	d001      	beq.n	2778 <_printf_i+0x180>
    2774:	1b80      	subs	r0, r0, r6
    2776:	6060      	str	r0, [r4, #4]
    2778:	6863      	ldr	r3, [r4, #4]
    277a:	6123      	str	r3, [r4, #16]
    277c:	2300      	movs	r3, #0
    277e:	9a04      	ldr	r2, [sp, #16]
    2780:	7013      	strb	r3, [r2, #0]
    2782:	e041      	b.n	2808 <_printf_i+0x210>
    2784:	6923      	ldr	r3, [r4, #16]
    2786:	0032      	movs	r2, r6
    2788:	9906      	ldr	r1, [sp, #24]
    278a:	9805      	ldr	r0, [sp, #20]
    278c:	9d07      	ldr	r5, [sp, #28]
    278e:	47a8      	blx	r5
    2790:	1c43      	adds	r3, r0, #1
    2792:	d043      	beq.n	281c <_printf_i+0x224>
    2794:	6823      	ldr	r3, [r4, #0]
    2796:	2500      	movs	r5, #0
    2798:	079b      	lsls	r3, r3, #30
    279a:	d40f      	bmi.n	27bc <_printf_i+0x1c4>
    279c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    279e:	68e0      	ldr	r0, [r4, #12]
    27a0:	4298      	cmp	r0, r3
    27a2:	da3d      	bge.n	2820 <_printf_i+0x228>
    27a4:	0018      	movs	r0, r3
    27a6:	e03b      	b.n	2820 <_printf_i+0x228>
    27a8:	0022      	movs	r2, r4
    27aa:	2301      	movs	r3, #1
    27ac:	3219      	adds	r2, #25
    27ae:	9906      	ldr	r1, [sp, #24]
    27b0:	9805      	ldr	r0, [sp, #20]
    27b2:	9e07      	ldr	r6, [sp, #28]
    27b4:	47b0      	blx	r6
    27b6:	1c43      	adds	r3, r0, #1
    27b8:	d030      	beq.n	281c <_printf_i+0x224>
    27ba:	3501      	adds	r5, #1
    27bc:	68e3      	ldr	r3, [r4, #12]
    27be:	9a09      	ldr	r2, [sp, #36]	; 0x24
    27c0:	1a9b      	subs	r3, r3, r2
    27c2:	429d      	cmp	r5, r3
    27c4:	dbf0      	blt.n	27a8 <_printf_i+0x1b0>
    27c6:	e7e9      	b.n	279c <_printf_i+0x1a4>
    27c8:	2d00      	cmp	r5, #0
    27ca:	d0a9      	beq.n	2720 <_printf_i+0x128>
    27cc:	9e04      	ldr	r6, [sp, #16]
    27ce:	0028      	movs	r0, r5
    27d0:	0039      	movs	r1, r7
    27d2:	f7ff f987 	bl	1ae4 <__aeabi_uidivmod>
    27d6:	9b03      	ldr	r3, [sp, #12]
    27d8:	3e01      	subs	r6, #1
    27da:	5c5b      	ldrb	r3, [r3, r1]
    27dc:	0028      	movs	r0, r5
    27de:	7033      	strb	r3, [r6, #0]
    27e0:	0039      	movs	r1, r7
    27e2:	f7ff f8f9 	bl	19d8 <__udivsi3>
    27e6:	1e05      	subs	r5, r0, #0
    27e8:	d1f1      	bne.n	27ce <_printf_i+0x1d6>
    27ea:	2f08      	cmp	r7, #8
    27ec:	d109      	bne.n	2802 <_printf_i+0x20a>
    27ee:	6823      	ldr	r3, [r4, #0]
    27f0:	07db      	lsls	r3, r3, #31
    27f2:	d506      	bpl.n	2802 <_printf_i+0x20a>
    27f4:	6863      	ldr	r3, [r4, #4]
    27f6:	6922      	ldr	r2, [r4, #16]
    27f8:	4293      	cmp	r3, r2
    27fa:	dc02      	bgt.n	2802 <_printf_i+0x20a>
    27fc:	2330      	movs	r3, #48	; 0x30
    27fe:	3e01      	subs	r6, #1
    2800:	7033      	strb	r3, [r6, #0]
    2802:	9b04      	ldr	r3, [sp, #16]
    2804:	1b9b      	subs	r3, r3, r6
    2806:	6123      	str	r3, [r4, #16]
    2808:	9b07      	ldr	r3, [sp, #28]
    280a:	aa09      	add	r2, sp, #36	; 0x24
    280c:	9300      	str	r3, [sp, #0]
    280e:	0021      	movs	r1, r4
    2810:	9b06      	ldr	r3, [sp, #24]
    2812:	9805      	ldr	r0, [sp, #20]
    2814:	f7ff fe82 	bl	251c <_printf_common>
    2818:	1c43      	adds	r3, r0, #1
    281a:	d1b3      	bne.n	2784 <_printf_i+0x18c>
    281c:	2001      	movs	r0, #1
    281e:	4240      	negs	r0, r0
    2820:	b00b      	add	sp, #44	; 0x2c
    2822:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2824:	00002c82 	.word	0x00002c82
    2828:	00002c71 	.word	0x00002c71

0000282c <_sbrk_r>:
    282c:	2300      	movs	r3, #0
    282e:	b570      	push	{r4, r5, r6, lr}
    2830:	4c06      	ldr	r4, [pc, #24]	; (284c <_sbrk_r+0x20>)
    2832:	0005      	movs	r5, r0
    2834:	0008      	movs	r0, r1
    2836:	6023      	str	r3, [r4, #0]
    2838:	f7ff f8a2 	bl	1980 <_sbrk>
    283c:	1c43      	adds	r3, r0, #1
    283e:	d103      	bne.n	2848 <_sbrk_r+0x1c>
    2840:	6823      	ldr	r3, [r4, #0]
    2842:	2b00      	cmp	r3, #0
    2844:	d000      	beq.n	2848 <_sbrk_r+0x1c>
    2846:	602b      	str	r3, [r5, #0]
    2848:	bd70      	pop	{r4, r5, r6, pc}
    284a:	46c0      	nop			; (mov r8, r8)
    284c:	20000188 	.word	0x20000188

00002850 <__sread>:
    2850:	b570      	push	{r4, r5, r6, lr}
    2852:	000c      	movs	r4, r1
    2854:	250e      	movs	r5, #14
    2856:	5f49      	ldrsh	r1, [r1, r5]
    2858:	f000 f97e 	bl	2b58 <_read_r>
    285c:	2800      	cmp	r0, #0
    285e:	db03      	blt.n	2868 <__sread+0x18>
    2860:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2862:	181b      	adds	r3, r3, r0
    2864:	6563      	str	r3, [r4, #84]	; 0x54
    2866:	bd70      	pop	{r4, r5, r6, pc}
    2868:	89a3      	ldrh	r3, [r4, #12]
    286a:	4a02      	ldr	r2, [pc, #8]	; (2874 <__sread+0x24>)
    286c:	4013      	ands	r3, r2
    286e:	81a3      	strh	r3, [r4, #12]
    2870:	e7f9      	b.n	2866 <__sread+0x16>
    2872:	46c0      	nop			; (mov r8, r8)
    2874:	ffffefff 	.word	0xffffefff

00002878 <__swrite>:
    2878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    287a:	001f      	movs	r7, r3
    287c:	898b      	ldrh	r3, [r1, #12]
    287e:	0005      	movs	r5, r0
    2880:	000c      	movs	r4, r1
    2882:	0016      	movs	r6, r2
    2884:	05db      	lsls	r3, r3, #23
    2886:	d505      	bpl.n	2894 <__swrite+0x1c>
    2888:	230e      	movs	r3, #14
    288a:	5ec9      	ldrsh	r1, [r1, r3]
    288c:	2200      	movs	r2, #0
    288e:	2302      	movs	r3, #2
    2890:	f000 f940 	bl	2b14 <_lseek_r>
    2894:	89a3      	ldrh	r3, [r4, #12]
    2896:	4a05      	ldr	r2, [pc, #20]	; (28ac <__swrite+0x34>)
    2898:	0028      	movs	r0, r5
    289a:	4013      	ands	r3, r2
    289c:	81a3      	strh	r3, [r4, #12]
    289e:	0032      	movs	r2, r6
    28a0:	230e      	movs	r3, #14
    28a2:	5ee1      	ldrsh	r1, [r4, r3]
    28a4:	003b      	movs	r3, r7
    28a6:	f000 f875 	bl	2994 <_write_r>
    28aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28ac:	ffffefff 	.word	0xffffefff

000028b0 <__sseek>:
    28b0:	b570      	push	{r4, r5, r6, lr}
    28b2:	000c      	movs	r4, r1
    28b4:	250e      	movs	r5, #14
    28b6:	5f49      	ldrsh	r1, [r1, r5]
    28b8:	f000 f92c 	bl	2b14 <_lseek_r>
    28bc:	89a3      	ldrh	r3, [r4, #12]
    28be:	1c42      	adds	r2, r0, #1
    28c0:	d103      	bne.n	28ca <__sseek+0x1a>
    28c2:	4a05      	ldr	r2, [pc, #20]	; (28d8 <__sseek+0x28>)
    28c4:	4013      	ands	r3, r2
    28c6:	81a3      	strh	r3, [r4, #12]
    28c8:	bd70      	pop	{r4, r5, r6, pc}
    28ca:	2280      	movs	r2, #128	; 0x80
    28cc:	0152      	lsls	r2, r2, #5
    28ce:	4313      	orrs	r3, r2
    28d0:	81a3      	strh	r3, [r4, #12]
    28d2:	6560      	str	r0, [r4, #84]	; 0x54
    28d4:	e7f8      	b.n	28c8 <__sseek+0x18>
    28d6:	46c0      	nop			; (mov r8, r8)
    28d8:	ffffefff 	.word	0xffffefff

000028dc <__sclose>:
    28dc:	b510      	push	{r4, lr}
    28de:	230e      	movs	r3, #14
    28e0:	5ec9      	ldrsh	r1, [r1, r3]
    28e2:	f000 f8e1 	bl	2aa8 <_close_r>
    28e6:	bd10      	pop	{r4, pc}

000028e8 <__swbuf_r>:
    28e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28ea:	0005      	movs	r5, r0
    28ec:	000e      	movs	r6, r1
    28ee:	0014      	movs	r4, r2
    28f0:	2800      	cmp	r0, #0
    28f2:	d004      	beq.n	28fe <__swbuf_r+0x16>
    28f4:	6983      	ldr	r3, [r0, #24]
    28f6:	2b00      	cmp	r3, #0
    28f8:	d101      	bne.n	28fe <__swbuf_r+0x16>
    28fa:	f7ff fb17 	bl	1f2c <__sinit>
    28fe:	4b22      	ldr	r3, [pc, #136]	; (2988 <__swbuf_r+0xa0>)
    2900:	429c      	cmp	r4, r3
    2902:	d12d      	bne.n	2960 <__swbuf_r+0x78>
    2904:	686c      	ldr	r4, [r5, #4]
    2906:	69a3      	ldr	r3, [r4, #24]
    2908:	60a3      	str	r3, [r4, #8]
    290a:	89a3      	ldrh	r3, [r4, #12]
    290c:	071b      	lsls	r3, r3, #28
    290e:	d531      	bpl.n	2974 <__swbuf_r+0x8c>
    2910:	6923      	ldr	r3, [r4, #16]
    2912:	2b00      	cmp	r3, #0
    2914:	d02e      	beq.n	2974 <__swbuf_r+0x8c>
    2916:	6823      	ldr	r3, [r4, #0]
    2918:	6922      	ldr	r2, [r4, #16]
    291a:	b2f7      	uxtb	r7, r6
    291c:	1a98      	subs	r0, r3, r2
    291e:	6963      	ldr	r3, [r4, #20]
    2920:	b2f6      	uxtb	r6, r6
    2922:	4298      	cmp	r0, r3
    2924:	db05      	blt.n	2932 <__swbuf_r+0x4a>
    2926:	0021      	movs	r1, r4
    2928:	0028      	movs	r0, r5
    292a:	f7ff fa91 	bl	1e50 <_fflush_r>
    292e:	2800      	cmp	r0, #0
    2930:	d126      	bne.n	2980 <__swbuf_r+0x98>
    2932:	68a3      	ldr	r3, [r4, #8]
    2934:	3001      	adds	r0, #1
    2936:	3b01      	subs	r3, #1
    2938:	60a3      	str	r3, [r4, #8]
    293a:	6823      	ldr	r3, [r4, #0]
    293c:	1c5a      	adds	r2, r3, #1
    293e:	6022      	str	r2, [r4, #0]
    2940:	701f      	strb	r7, [r3, #0]
    2942:	6963      	ldr	r3, [r4, #20]
    2944:	4298      	cmp	r0, r3
    2946:	d004      	beq.n	2952 <__swbuf_r+0x6a>
    2948:	89a3      	ldrh	r3, [r4, #12]
    294a:	07db      	lsls	r3, r3, #31
    294c:	d51a      	bpl.n	2984 <__swbuf_r+0x9c>
    294e:	2e0a      	cmp	r6, #10
    2950:	d118      	bne.n	2984 <__swbuf_r+0x9c>
    2952:	0021      	movs	r1, r4
    2954:	0028      	movs	r0, r5
    2956:	f7ff fa7b 	bl	1e50 <_fflush_r>
    295a:	2800      	cmp	r0, #0
    295c:	d012      	beq.n	2984 <__swbuf_r+0x9c>
    295e:	e00f      	b.n	2980 <__swbuf_r+0x98>
    2960:	4b0a      	ldr	r3, [pc, #40]	; (298c <__swbuf_r+0xa4>)
    2962:	429c      	cmp	r4, r3
    2964:	d101      	bne.n	296a <__swbuf_r+0x82>
    2966:	68ac      	ldr	r4, [r5, #8]
    2968:	e7cd      	b.n	2906 <__swbuf_r+0x1e>
    296a:	4b09      	ldr	r3, [pc, #36]	; (2990 <__swbuf_r+0xa8>)
    296c:	429c      	cmp	r4, r3
    296e:	d1ca      	bne.n	2906 <__swbuf_r+0x1e>
    2970:	68ec      	ldr	r4, [r5, #12]
    2972:	e7c8      	b.n	2906 <__swbuf_r+0x1e>
    2974:	0021      	movs	r1, r4
    2976:	0028      	movs	r0, r5
    2978:	f000 f820 	bl	29bc <__swsetup_r>
    297c:	2800      	cmp	r0, #0
    297e:	d0ca      	beq.n	2916 <__swbuf_r+0x2e>
    2980:	2601      	movs	r6, #1
    2982:	4276      	negs	r6, r6
    2984:	0030      	movs	r0, r6
    2986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2988:	00002c20 	.word	0x00002c20
    298c:	00002c40 	.word	0x00002c40
    2990:	00002c00 	.word	0x00002c00

00002994 <_write_r>:
    2994:	b570      	push	{r4, r5, r6, lr}
    2996:	0005      	movs	r5, r0
    2998:	0008      	movs	r0, r1
    299a:	0011      	movs	r1, r2
    299c:	2200      	movs	r2, #0
    299e:	4c06      	ldr	r4, [pc, #24]	; (29b8 <_write_r+0x24>)
    29a0:	6022      	str	r2, [r4, #0]
    29a2:	001a      	movs	r2, r3
    29a4:	f7fd fd1c 	bl	3e0 <_write>
    29a8:	1c43      	adds	r3, r0, #1
    29aa:	d103      	bne.n	29b4 <_write_r+0x20>
    29ac:	6823      	ldr	r3, [r4, #0]
    29ae:	2b00      	cmp	r3, #0
    29b0:	d000      	beq.n	29b4 <_write_r+0x20>
    29b2:	602b      	str	r3, [r5, #0]
    29b4:	bd70      	pop	{r4, r5, r6, pc}
    29b6:	46c0      	nop			; (mov r8, r8)
    29b8:	20000188 	.word	0x20000188

000029bc <__swsetup_r>:
    29bc:	4b36      	ldr	r3, [pc, #216]	; (2a98 <__swsetup_r+0xdc>)
    29be:	b570      	push	{r4, r5, r6, lr}
    29c0:	681d      	ldr	r5, [r3, #0]
    29c2:	0006      	movs	r6, r0
    29c4:	000c      	movs	r4, r1
    29c6:	2d00      	cmp	r5, #0
    29c8:	d005      	beq.n	29d6 <__swsetup_r+0x1a>
    29ca:	69ab      	ldr	r3, [r5, #24]
    29cc:	2b00      	cmp	r3, #0
    29ce:	d102      	bne.n	29d6 <__swsetup_r+0x1a>
    29d0:	0028      	movs	r0, r5
    29d2:	f7ff faab 	bl	1f2c <__sinit>
    29d6:	4b31      	ldr	r3, [pc, #196]	; (2a9c <__swsetup_r+0xe0>)
    29d8:	429c      	cmp	r4, r3
    29da:	d10f      	bne.n	29fc <__swsetup_r+0x40>
    29dc:	686c      	ldr	r4, [r5, #4]
    29de:	230c      	movs	r3, #12
    29e0:	5ee2      	ldrsh	r2, [r4, r3]
    29e2:	b293      	uxth	r3, r2
    29e4:	0719      	lsls	r1, r3, #28
    29e6:	d42d      	bmi.n	2a44 <__swsetup_r+0x88>
    29e8:	06d9      	lsls	r1, r3, #27
    29ea:	d411      	bmi.n	2a10 <__swsetup_r+0x54>
    29ec:	2309      	movs	r3, #9
    29ee:	2001      	movs	r0, #1
    29f0:	6033      	str	r3, [r6, #0]
    29f2:	3337      	adds	r3, #55	; 0x37
    29f4:	4313      	orrs	r3, r2
    29f6:	81a3      	strh	r3, [r4, #12]
    29f8:	4240      	negs	r0, r0
    29fa:	bd70      	pop	{r4, r5, r6, pc}
    29fc:	4b28      	ldr	r3, [pc, #160]	; (2aa0 <__swsetup_r+0xe4>)
    29fe:	429c      	cmp	r4, r3
    2a00:	d101      	bne.n	2a06 <__swsetup_r+0x4a>
    2a02:	68ac      	ldr	r4, [r5, #8]
    2a04:	e7eb      	b.n	29de <__swsetup_r+0x22>
    2a06:	4b27      	ldr	r3, [pc, #156]	; (2aa4 <__swsetup_r+0xe8>)
    2a08:	429c      	cmp	r4, r3
    2a0a:	d1e8      	bne.n	29de <__swsetup_r+0x22>
    2a0c:	68ec      	ldr	r4, [r5, #12]
    2a0e:	e7e6      	b.n	29de <__swsetup_r+0x22>
    2a10:	075b      	lsls	r3, r3, #29
    2a12:	d513      	bpl.n	2a3c <__swsetup_r+0x80>
    2a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2a16:	2900      	cmp	r1, #0
    2a18:	d008      	beq.n	2a2c <__swsetup_r+0x70>
    2a1a:	0023      	movs	r3, r4
    2a1c:	3344      	adds	r3, #68	; 0x44
    2a1e:	4299      	cmp	r1, r3
    2a20:	d002      	beq.n	2a28 <__swsetup_r+0x6c>
    2a22:	0030      	movs	r0, r6
    2a24:	f7ff fb8e 	bl	2144 <_free_r>
    2a28:	2300      	movs	r3, #0
    2a2a:	6363      	str	r3, [r4, #52]	; 0x34
    2a2c:	2224      	movs	r2, #36	; 0x24
    2a2e:	89a3      	ldrh	r3, [r4, #12]
    2a30:	4393      	bics	r3, r2
    2a32:	81a3      	strh	r3, [r4, #12]
    2a34:	2300      	movs	r3, #0
    2a36:	6063      	str	r3, [r4, #4]
    2a38:	6923      	ldr	r3, [r4, #16]
    2a3a:	6023      	str	r3, [r4, #0]
    2a3c:	2308      	movs	r3, #8
    2a3e:	89a2      	ldrh	r2, [r4, #12]
    2a40:	4313      	orrs	r3, r2
    2a42:	81a3      	strh	r3, [r4, #12]
    2a44:	6923      	ldr	r3, [r4, #16]
    2a46:	2b00      	cmp	r3, #0
    2a48:	d10b      	bne.n	2a62 <__swsetup_r+0xa6>
    2a4a:	21a0      	movs	r1, #160	; 0xa0
    2a4c:	2280      	movs	r2, #128	; 0x80
    2a4e:	89a3      	ldrh	r3, [r4, #12]
    2a50:	0089      	lsls	r1, r1, #2
    2a52:	0092      	lsls	r2, r2, #2
    2a54:	400b      	ands	r3, r1
    2a56:	4293      	cmp	r3, r2
    2a58:	d003      	beq.n	2a62 <__swsetup_r+0xa6>
    2a5a:	0021      	movs	r1, r4
    2a5c:	0030      	movs	r0, r6
    2a5e:	f7ff fb23 	bl	20a8 <__smakebuf_r>
    2a62:	2301      	movs	r3, #1
    2a64:	89a2      	ldrh	r2, [r4, #12]
    2a66:	4013      	ands	r3, r2
    2a68:	d011      	beq.n	2a8e <__swsetup_r+0xd2>
    2a6a:	2300      	movs	r3, #0
    2a6c:	60a3      	str	r3, [r4, #8]
    2a6e:	6963      	ldr	r3, [r4, #20]
    2a70:	425b      	negs	r3, r3
    2a72:	61a3      	str	r3, [r4, #24]
    2a74:	2000      	movs	r0, #0
    2a76:	6923      	ldr	r3, [r4, #16]
    2a78:	4283      	cmp	r3, r0
    2a7a:	d1be      	bne.n	29fa <__swsetup_r+0x3e>
    2a7c:	230c      	movs	r3, #12
    2a7e:	5ee2      	ldrsh	r2, [r4, r3]
    2a80:	0613      	lsls	r3, r2, #24
    2a82:	d5ba      	bpl.n	29fa <__swsetup_r+0x3e>
    2a84:	2340      	movs	r3, #64	; 0x40
    2a86:	4313      	orrs	r3, r2
    2a88:	81a3      	strh	r3, [r4, #12]
    2a8a:	3801      	subs	r0, #1
    2a8c:	e7b5      	b.n	29fa <__swsetup_r+0x3e>
    2a8e:	0792      	lsls	r2, r2, #30
    2a90:	d400      	bmi.n	2a94 <__swsetup_r+0xd8>
    2a92:	6963      	ldr	r3, [r4, #20]
    2a94:	60a3      	str	r3, [r4, #8]
    2a96:	e7ed      	b.n	2a74 <__swsetup_r+0xb8>
    2a98:	20000008 	.word	0x20000008
    2a9c:	00002c20 	.word	0x00002c20
    2aa0:	00002c40 	.word	0x00002c40
    2aa4:	00002c00 	.word	0x00002c00

00002aa8 <_close_r>:
    2aa8:	2300      	movs	r3, #0
    2aaa:	b570      	push	{r4, r5, r6, lr}
    2aac:	4c06      	ldr	r4, [pc, #24]	; (2ac8 <_close_r+0x20>)
    2aae:	0005      	movs	r5, r0
    2ab0:	0008      	movs	r0, r1
    2ab2:	6023      	str	r3, [r4, #0]
    2ab4:	f7fe ff76 	bl	19a4 <_close>
    2ab8:	1c43      	adds	r3, r0, #1
    2aba:	d103      	bne.n	2ac4 <_close_r+0x1c>
    2abc:	6823      	ldr	r3, [r4, #0]
    2abe:	2b00      	cmp	r3, #0
    2ac0:	d000      	beq.n	2ac4 <_close_r+0x1c>
    2ac2:	602b      	str	r3, [r5, #0]
    2ac4:	bd70      	pop	{r4, r5, r6, pc}
    2ac6:	46c0      	nop			; (mov r8, r8)
    2ac8:	20000188 	.word	0x20000188

00002acc <_fstat_r>:
    2acc:	2300      	movs	r3, #0
    2ace:	b570      	push	{r4, r5, r6, lr}
    2ad0:	4c06      	ldr	r4, [pc, #24]	; (2aec <_fstat_r+0x20>)
    2ad2:	0005      	movs	r5, r0
    2ad4:	0008      	movs	r0, r1
    2ad6:	0011      	movs	r1, r2
    2ad8:	6023      	str	r3, [r4, #0]
    2ada:	f7fe ff66 	bl	19aa <_fstat>
    2ade:	1c43      	adds	r3, r0, #1
    2ae0:	d103      	bne.n	2aea <_fstat_r+0x1e>
    2ae2:	6823      	ldr	r3, [r4, #0]
    2ae4:	2b00      	cmp	r3, #0
    2ae6:	d000      	beq.n	2aea <_fstat_r+0x1e>
    2ae8:	602b      	str	r3, [r5, #0]
    2aea:	bd70      	pop	{r4, r5, r6, pc}
    2aec:	20000188 	.word	0x20000188

00002af0 <_isatty_r>:
    2af0:	2300      	movs	r3, #0
    2af2:	b570      	push	{r4, r5, r6, lr}
    2af4:	4c06      	ldr	r4, [pc, #24]	; (2b10 <_isatty_r+0x20>)
    2af6:	0005      	movs	r5, r0
    2af8:	0008      	movs	r0, r1
    2afa:	6023      	str	r3, [r4, #0]
    2afc:	f7fe ff5a 	bl	19b4 <_isatty>
    2b00:	1c43      	adds	r3, r0, #1
    2b02:	d103      	bne.n	2b0c <_isatty_r+0x1c>
    2b04:	6823      	ldr	r3, [r4, #0]
    2b06:	2b00      	cmp	r3, #0
    2b08:	d000      	beq.n	2b0c <_isatty_r+0x1c>
    2b0a:	602b      	str	r3, [r5, #0]
    2b0c:	bd70      	pop	{r4, r5, r6, pc}
    2b0e:	46c0      	nop			; (mov r8, r8)
    2b10:	20000188 	.word	0x20000188

00002b14 <_lseek_r>:
    2b14:	b570      	push	{r4, r5, r6, lr}
    2b16:	0005      	movs	r5, r0
    2b18:	0008      	movs	r0, r1
    2b1a:	0011      	movs	r1, r2
    2b1c:	2200      	movs	r2, #0
    2b1e:	4c06      	ldr	r4, [pc, #24]	; (2b38 <_lseek_r+0x24>)
    2b20:	6022      	str	r2, [r4, #0]
    2b22:	001a      	movs	r2, r3
    2b24:	f7fe ff48 	bl	19b8 <_lseek>
    2b28:	1c43      	adds	r3, r0, #1
    2b2a:	d103      	bne.n	2b34 <_lseek_r+0x20>
    2b2c:	6823      	ldr	r3, [r4, #0]
    2b2e:	2b00      	cmp	r3, #0
    2b30:	d000      	beq.n	2b34 <_lseek_r+0x20>
    2b32:	602b      	str	r3, [r5, #0]
    2b34:	bd70      	pop	{r4, r5, r6, pc}
    2b36:	46c0      	nop			; (mov r8, r8)
    2b38:	20000188 	.word	0x20000188

00002b3c <memchr>:
    2b3c:	b2c9      	uxtb	r1, r1
    2b3e:	1882      	adds	r2, r0, r2
    2b40:	4290      	cmp	r0, r2
    2b42:	d101      	bne.n	2b48 <memchr+0xc>
    2b44:	2000      	movs	r0, #0
    2b46:	4770      	bx	lr
    2b48:	7803      	ldrb	r3, [r0, #0]
    2b4a:	428b      	cmp	r3, r1
    2b4c:	d0fb      	beq.n	2b46 <memchr+0xa>
    2b4e:	3001      	adds	r0, #1
    2b50:	e7f6      	b.n	2b40 <memchr+0x4>

00002b52 <__malloc_lock>:
    2b52:	4770      	bx	lr

00002b54 <__malloc_unlock>:
    2b54:	4770      	bx	lr
	...

00002b58 <_read_r>:
    2b58:	b570      	push	{r4, r5, r6, lr}
    2b5a:	0005      	movs	r5, r0
    2b5c:	0008      	movs	r0, r1
    2b5e:	0011      	movs	r1, r2
    2b60:	2200      	movs	r2, #0
    2b62:	4c06      	ldr	r4, [pc, #24]	; (2b7c <_read_r+0x24>)
    2b64:	6022      	str	r2, [r4, #0]
    2b66:	001a      	movs	r2, r3
    2b68:	f7fd fc18 	bl	39c <_read>
    2b6c:	1c43      	adds	r3, r0, #1
    2b6e:	d103      	bne.n	2b78 <_read_r+0x20>
    2b70:	6823      	ldr	r3, [r4, #0]
    2b72:	2b00      	cmp	r3, #0
    2b74:	d000      	beq.n	2b78 <_read_r+0x20>
    2b76:	602b      	str	r3, [r5, #0]
    2b78:	bd70      	pop	{r4, r5, r6, pc}
    2b7a:	46c0      	nop			; (mov r8, r8)
    2b7c:	20000188 	.word	0x20000188
    2b80:	6c6c6548 	.word	0x6c6c6548
    2b84:	6f77206f 	.word	0x6f77206f
    2b88:	20646c72 	.word	0x20646c72
    2b8c:	0a212121 	.word	0x0a212121
    2b90:	0000000d 	.word	0x0000000d
    2b94:	0d0a7325 	.word	0x0d0a7325
    2b98:	00000000 	.word	0x00000000
    2b9c:	42000800 	.word	0x42000800
    2ba0:	42000c00 	.word	0x42000c00
    2ba4:	42001000 	.word	0x42001000
    2ba8:	42001400 	.word	0x42001400
    2bac:	42001800 	.word	0x42001800
    2bb0:	42001c00 	.word	0x42001c00
    2bb4:	0000130a 	.word	0x0000130a
    2bb8:	00001306 	.word	0x00001306
    2bbc:	00001306 	.word	0x00001306
    2bc0:	0000136c 	.word	0x0000136c
    2bc4:	0000136c 	.word	0x0000136c
    2bc8:	0000131e 	.word	0x0000131e
    2bcc:	00001310 	.word	0x00001310
    2bd0:	00001324 	.word	0x00001324
    2bd4:	0000135a 	.word	0x0000135a
    2bd8:	000013f4 	.word	0x000013f4
    2bdc:	000013d4 	.word	0x000013d4
    2be0:	000013d4 	.word	0x000013d4
    2be4:	00001460 	.word	0x00001460
    2be8:	000013e6 	.word	0x000013e6
    2bec:	00001402 	.word	0x00001402
    2bf0:	000013d8 	.word	0x000013d8
    2bf4:	00001410 	.word	0x00001410
    2bf8:	00001450 	.word	0x00001450

00002bfc <_global_impure_ptr>:
    2bfc:	2000000c                                ... 

00002c00 <__sf_fake_stderr>:
	...

00002c20 <__sf_fake_stdin>:
	...

00002c40 <__sf_fake_stdout>:
	...
    2c60:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2c70:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2c80:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2c90:	00006665                                ef..

00002c94 <_init>:
    2c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c96:	46c0      	nop			; (mov r8, r8)
    2c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2c9a:	bc08      	pop	{r3}
    2c9c:	469e      	mov	lr, r3
    2c9e:	4770      	bx	lr

00002ca0 <__init_array_start>:
    2ca0:	000000dd 	.word	0x000000dd

00002ca4 <_fini>:
    2ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2caa:	bc08      	pop	{r3}
    2cac:	469e      	mov	lr, r3
    2cae:	4770      	bx	lr

00002cb0 <__fini_array_start>:
    2cb0:	000000b5 	.word	0x000000b5
