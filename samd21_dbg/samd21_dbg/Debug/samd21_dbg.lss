
samd21_dbg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026c0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  000026c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c0  20000068  00002728  00020068  2**2
                  ALLOC
  3 .stack        00002000  20000128  000027e8  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   000206af  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000030e5  00000000  00000000  00040798  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003c4c  00000000  00000000  0004387d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000438  00000000  00000000  000474c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000468  00000000  00000000  00047901  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a0fd  00000000  00000000  00047d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b9a3  00000000  00000000  00061e66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000887af  00000000  00000000  0006d809  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001104  00000000  00000000  000f5fb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	28 21 00 20 b1 12 00 00 ad 12 00 00 ad 12 00 00     (!. ............
	...
      2c:	ad 12 00 00 00 00 00 00 00 00 00 00 ad 12 00 00     ................
      3c:	ad 12 00 00 ad 12 00 00 ad 12 00 00 ad 12 00 00     ................
      4c:	ad 12 00 00 ad 12 00 00 ad 12 00 00 ad 12 00 00     ................
      5c:	ad 12 00 00 ad 12 00 00 39 0c 00 00 49 0c 00 00     ........9...I...
      6c:	59 0c 00 00 69 0c 00 00 79 0c 00 00 89 0c 00 00     Y...i...y.......
      7c:	ad 12 00 00 ad 12 00 00 ad 12 00 00 ad 12 00 00     ................
      8c:	ad 12 00 00 ad 12 00 00 00 00 00 00 00 00 00 00     ................
      9c:	ad 12 00 00 ad 12 00 00 ad 12 00 00 ad 12 00 00     ................
      ac:	ad 12 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	000026c0 	.word	0x000026c0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	000026c0 	.word	0x000026c0
     10c:	000026c0 	.word	0x000026c0
     110:	00000000 	.word	0x00000000

00000114 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	b082      	sub	sp, #8
     118:	0005      	movs	r5, r0
     11a:	000e      	movs	r6, r1
	uint16_t temp = 0;
     11c:	2200      	movs	r2, #0
     11e:	466b      	mov	r3, sp
     120:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     122:	4c06      	ldr	r4, [pc, #24]	; (13c <usart_serial_getchar+0x28>)
     124:	466b      	mov	r3, sp
     126:	1d99      	adds	r1, r3, #6
     128:	0028      	movs	r0, r5
     12a:	47a0      	blx	r4
     12c:	2800      	cmp	r0, #0
     12e:	d1f9      	bne.n	124 <usart_serial_getchar+0x10>

	*c = temp;
     130:	466b      	mov	r3, sp
     132:	3306      	adds	r3, #6
     134:	881b      	ldrh	r3, [r3, #0]
     136:	7033      	strb	r3, [r6, #0]
}
     138:	b002      	add	sp, #8
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	000009cb 	.word	0x000009cb

00000140 <usart_serial_putchar>:
{
     140:	b570      	push	{r4, r5, r6, lr}
     142:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     144:	b28c      	uxth	r4, r1
     146:	4e03      	ldr	r6, [pc, #12]	; (154 <usart_serial_putchar+0x14>)
     148:	0021      	movs	r1, r4
     14a:	0028      	movs	r0, r5
     14c:	47b0      	blx	r6
     14e:	2800      	cmp	r0, #0
     150:	d1fa      	bne.n	148 <usart_serial_putchar+0x8>
}
     152:	bd70      	pop	{r4, r5, r6, pc}
     154:	000009a5 	.word	0x000009a5

00000158 <console_init>:
	usart_enable(&module);
 }


 void console_init(void)
 {
     158:	b5f0      	push	{r4, r5, r6, r7, lr}
     15a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     15c:	2380      	movs	r3, #128	; 0x80
     15e:	05db      	lsls	r3, r3, #23
     160:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     162:	2300      	movs	r3, #0
     164:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     166:	22ff      	movs	r2, #255	; 0xff
     168:	4669      	mov	r1, sp
     16a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     16c:	2200      	movs	r2, #0
     16e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     170:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     172:	2401      	movs	r4, #1
     174:	2124      	movs	r1, #36	; 0x24
     176:	4668      	mov	r0, sp
     178:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
     17a:	3101      	adds	r1, #1
     17c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
     17e:	3101      	adds	r1, #1
     180:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
     182:	3101      	adds	r1, #1
     184:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
     186:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     188:	3105      	adds	r1, #5
     18a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
     18c:	3101      	adds	r1, #1
     18e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     190:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     192:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     194:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     196:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     198:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     19a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
     19c:	2313      	movs	r3, #19
     19e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     1a0:	7742      	strb	r2, [r0, #29]
	cfg.baudrate = 115200;
     1a2:	23e1      	movs	r3, #225	; 0xe1
     1a4:	025b      	lsls	r3, r3, #9
     1a6:	9308      	str	r3, [sp, #32]
	cfg.pinmux_pad0 = PINMUX_UNUSED;
     1a8:	2301      	movs	r3, #1
     1aa:	425b      	negs	r3, r3
     1ac:	930c      	str	r3, [sp, #48]	; 0x30
	cfg.pinmux_pad1 = PINMUX_UNUSED;
     1ae:	930d      	str	r3, [sp, #52]	; 0x34
	cfg.pinmux_pad2 = PINMUX_PA10C_SERCOM0_PAD2;
     1b0:	4b1a      	ldr	r3, [pc, #104]	; (21c <console_init+0xc4>)
     1b2:	930e      	str	r3, [sp, #56]	; 0x38
	cfg.pinmux_pad3 = PINMUX_PA11C_SERCOM0_PAD3;
     1b4:	4b1a      	ldr	r3, [pc, #104]	; (220 <console_init+0xc8>)
     1b6:	930f      	str	r3, [sp, #60]	; 0x3c
	cfg.mux_setting = USART_RX_3_TX_2_XCK_3;
     1b8:	23c4      	movs	r3, #196	; 0xc4
     1ba:	039b      	lsls	r3, r3, #14
     1bc:	9303      	str	r3, [sp, #12]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     1be:	4d19      	ldr	r5, [pc, #100]	; (224 <console_init+0xcc>)
     1c0:	4b19      	ldr	r3, [pc, #100]	; (228 <console_init+0xd0>)
     1c2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     1c4:	4a19      	ldr	r2, [pc, #100]	; (22c <console_init+0xd4>)
     1c6:	4b1a      	ldr	r3, [pc, #104]	; (230 <console_init+0xd8>)
     1c8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     1ca:	4a1a      	ldr	r2, [pc, #104]	; (234 <console_init+0xdc>)
     1cc:	4b1a      	ldr	r3, [pc, #104]	; (238 <console_init+0xe0>)
     1ce:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     1d0:	466a      	mov	r2, sp
     1d2:	491a      	ldr	r1, [pc, #104]	; (23c <console_init+0xe4>)
     1d4:	0028      	movs	r0, r5
     1d6:	4b1a      	ldr	r3, [pc, #104]	; (240 <console_init+0xe8>)
     1d8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     1da:	4f1a      	ldr	r7, [pc, #104]	; (244 <console_init+0xec>)
     1dc:	683b      	ldr	r3, [r7, #0]
     1de:	6898      	ldr	r0, [r3, #8]
     1e0:	2100      	movs	r1, #0
     1e2:	4e19      	ldr	r6, [pc, #100]	; (248 <console_init+0xf0>)
     1e4:	47b0      	blx	r6
	setbuf(stdin, NULL);
     1e6:	683b      	ldr	r3, [r7, #0]
     1e8:	6858      	ldr	r0, [r3, #4]
     1ea:	2100      	movs	r1, #0
     1ec:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     1ee:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     1f0:	0030      	movs	r0, r6
     1f2:	4b16      	ldr	r3, [pc, #88]	; (24c <console_init+0xf4>)
     1f4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1f6:	231f      	movs	r3, #31
     1f8:	4018      	ands	r0, r3
     1fa:	4084      	lsls	r4, r0
     1fc:	4b14      	ldr	r3, [pc, #80]	; (250 <console_init+0xf8>)
     1fe:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     200:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     202:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     204:	2b00      	cmp	r3, #0
     206:	d1fc      	bne.n	202 <console_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     208:	6833      	ldr	r3, [r6, #0]
     20a:	2202      	movs	r2, #2
     20c:	4313      	orrs	r3, r2
     20e:	6033      	str	r3, [r6, #0]
	console_hardware_init();
	printf("Hello world !!!\n\r");
     210:	4810      	ldr	r0, [pc, #64]	; (254 <console_init+0xfc>)
     212:	4b11      	ldr	r3, [pc, #68]	; (258 <console_init+0x100>)
     214:	4798      	blx	r3
     216:	b011      	add	sp, #68	; 0x44
     218:	bdf0      	pop	{r4, r5, r6, r7, pc}
     21a:	46c0      	nop			; (mov r8, r8)
     21c:	000a0002 	.word	0x000a0002
     220:	000b0002 	.word	0x000b0002
     224:	20000084 	.word	0x20000084
     228:	20000108 	.word	0x20000108
     22c:	00000141 	.word	0x00000141
     230:	20000104 	.word	0x20000104
     234:	00000115 	.word	0x00000115
     238:	20000100 	.word	0x20000100
     23c:	42000800 	.word	0x42000800
     240:	00000669 	.word	0x00000669
     244:	20000004 	.word	0x20000004
     248:	000015e5 	.word	0x000015e5
     24c:	00000c09 	.word	0x00000c09
     250:	e000e100 	.word	0xe000e100
     254:	00002594 	.word	0x00002594
     258:	000015b1 	.word	0x000015b1

0000025c <spi_slave_init>:


void spi_slave_init(void)
{
	
}
     25c:	4770      	bx	lr
	...

00000260 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     260:	b5f0      	push	{r4, r5, r6, r7, lr}
     262:	46c6      	mov	lr, r8
     264:	b500      	push	{lr}
     266:	000c      	movs	r4, r1
     268:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     26a:	2800      	cmp	r0, #0
     26c:	d10f      	bne.n	28e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
     26e:	2a00      	cmp	r2, #0
     270:	dd11      	ble.n	296 <_read+0x36>
     272:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     274:	4e09      	ldr	r6, [pc, #36]	; (29c <_read+0x3c>)
     276:	4d0a      	ldr	r5, [pc, #40]	; (2a0 <_read+0x40>)
     278:	6830      	ldr	r0, [r6, #0]
     27a:	0021      	movs	r1, r4
     27c:	682b      	ldr	r3, [r5, #0]
     27e:	4798      	blx	r3
		ptr++;
     280:	3401      	adds	r4, #1
	for (; len > 0; --len) {
     282:	42bc      	cmp	r4, r7
     284:	d1f8      	bne.n	278 <_read+0x18>
		nChars++;
	}
	return nChars;
}
     286:	4640      	mov	r0, r8
     288:	bc04      	pop	{r2}
     28a:	4690      	mov	r8, r2
     28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
     28e:	2301      	movs	r3, #1
     290:	425b      	negs	r3, r3
     292:	4698      	mov	r8, r3
     294:	e7f7      	b.n	286 <_read+0x26>
	for (; len > 0; --len) {
     296:	4680      	mov	r8, r0
     298:	e7f5      	b.n	286 <_read+0x26>
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	20000108 	.word	0x20000108
     2a0:	20000100 	.word	0x20000100

000002a4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     2a6:	46c6      	mov	lr, r8
     2a8:	b500      	push	{lr}
     2aa:	000e      	movs	r6, r1
     2ac:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     2ae:	3801      	subs	r0, #1
     2b0:	2802      	cmp	r0, #2
     2b2:	d810      	bhi.n	2d6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     2b4:	2a00      	cmp	r2, #0
     2b6:	d011      	beq.n	2dc <_write+0x38>
     2b8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     2ba:	4b0c      	ldr	r3, [pc, #48]	; (2ec <_write+0x48>)
     2bc:	4698      	mov	r8, r3
     2be:	4f0c      	ldr	r7, [pc, #48]	; (2f0 <_write+0x4c>)
     2c0:	4643      	mov	r3, r8
     2c2:	6818      	ldr	r0, [r3, #0]
     2c4:	5d31      	ldrb	r1, [r6, r4]
     2c6:	683b      	ldr	r3, [r7, #0]
     2c8:	4798      	blx	r3
     2ca:	2800      	cmp	r0, #0
     2cc:	db08      	blt.n	2e0 <_write+0x3c>
			return -1;
		}
		++nChars;
     2ce:	3401      	adds	r4, #1
	for (; len != 0; --len) {
     2d0:	42a5      	cmp	r5, r4
     2d2:	d1f5      	bne.n	2c0 <_write+0x1c>
     2d4:	e006      	b.n	2e4 <_write+0x40>
		return -1;
     2d6:	2401      	movs	r4, #1
     2d8:	4264      	negs	r4, r4
     2da:	e003      	b.n	2e4 <_write+0x40>
	for (; len != 0; --len) {
     2dc:	0014      	movs	r4, r2
     2de:	e001      	b.n	2e4 <_write+0x40>
			return -1;
     2e0:	2401      	movs	r4, #1
     2e2:	4264      	negs	r4, r4
	}
	return nChars;
}
     2e4:	0020      	movs	r0, r4
     2e6:	bc04      	pop	{r2}
     2e8:	4690      	mov	r8, r2
     2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2ec:	20000108 	.word	0x20000108
     2f0:	20000104 	.word	0x20000104

000002f4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     2f6:	46de      	mov	lr, fp
     2f8:	4657      	mov	r7, sl
     2fa:	464e      	mov	r6, r9
     2fc:	4645      	mov	r5, r8
     2fe:	b5e0      	push	{r5, r6, r7, lr}
     300:	b087      	sub	sp, #28
     302:	4680      	mov	r8, r0
     304:	9104      	str	r1, [sp, #16]
     306:	0016      	movs	r6, r2
     308:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     30a:	2200      	movs	r2, #0
     30c:	2300      	movs	r3, #0
     30e:	2100      	movs	r1, #0
     310:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     312:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     314:	2001      	movs	r0, #1
     316:	0021      	movs	r1, r4
     318:	9600      	str	r6, [sp, #0]
     31a:	9701      	str	r7, [sp, #4]
     31c:	465c      	mov	r4, fp
     31e:	9403      	str	r4, [sp, #12]
     320:	4644      	mov	r4, r8
     322:	9405      	str	r4, [sp, #20]
     324:	e013      	b.n	34e <long_division+0x5a>
     326:	2420      	movs	r4, #32
     328:	1a64      	subs	r4, r4, r1
     32a:	0005      	movs	r5, r0
     32c:	40e5      	lsrs	r5, r4
     32e:	46a8      	mov	r8, r5
     330:	e014      	b.n	35c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     332:	9c00      	ldr	r4, [sp, #0]
     334:	9d01      	ldr	r5, [sp, #4]
     336:	1b12      	subs	r2, r2, r4
     338:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     33a:	465c      	mov	r4, fp
     33c:	464d      	mov	r5, r9
     33e:	432c      	orrs	r4, r5
     340:	46a3      	mov	fp, r4
     342:	9c03      	ldr	r4, [sp, #12]
     344:	4645      	mov	r5, r8
     346:	432c      	orrs	r4, r5
     348:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     34a:	3901      	subs	r1, #1
     34c:	d325      	bcc.n	39a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     34e:	2420      	movs	r4, #32
     350:	4264      	negs	r4, r4
     352:	190c      	adds	r4, r1, r4
     354:	d4e7      	bmi.n	326 <long_division+0x32>
     356:	0005      	movs	r5, r0
     358:	40a5      	lsls	r5, r4
     35a:	46a8      	mov	r8, r5
     35c:	0004      	movs	r4, r0
     35e:	408c      	lsls	r4, r1
     360:	46a1      	mov	r9, r4
		r = r << 1;
     362:	1892      	adds	r2, r2, r2
     364:	415b      	adcs	r3, r3
     366:	0014      	movs	r4, r2
     368:	001d      	movs	r5, r3
		if (n & bit_shift) {
     36a:	9e05      	ldr	r6, [sp, #20]
     36c:	464f      	mov	r7, r9
     36e:	403e      	ands	r6, r7
     370:	46b4      	mov	ip, r6
     372:	9e04      	ldr	r6, [sp, #16]
     374:	4647      	mov	r7, r8
     376:	403e      	ands	r6, r7
     378:	46b2      	mov	sl, r6
     37a:	4666      	mov	r6, ip
     37c:	4657      	mov	r7, sl
     37e:	433e      	orrs	r6, r7
     380:	d003      	beq.n	38a <long_division+0x96>
			r |= 0x01;
     382:	0006      	movs	r6, r0
     384:	4326      	orrs	r6, r4
     386:	0032      	movs	r2, r6
     388:	002b      	movs	r3, r5
		if (r >= d) {
     38a:	9c00      	ldr	r4, [sp, #0]
     38c:	9d01      	ldr	r5, [sp, #4]
     38e:	429d      	cmp	r5, r3
     390:	d8db      	bhi.n	34a <long_division+0x56>
     392:	d1ce      	bne.n	332 <long_division+0x3e>
     394:	4294      	cmp	r4, r2
     396:	d8d8      	bhi.n	34a <long_division+0x56>
     398:	e7cb      	b.n	332 <long_division+0x3e>
     39a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     39c:	4658      	mov	r0, fp
     39e:	0019      	movs	r1, r3
     3a0:	b007      	add	sp, #28
     3a2:	bc3c      	pop	{r2, r3, r4, r5}
     3a4:	4690      	mov	r8, r2
     3a6:	4699      	mov	r9, r3
     3a8:	46a2      	mov	sl, r4
     3aa:	46ab      	mov	fp, r5
     3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

000003ae <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     3ae:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     3b0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3b2:	2340      	movs	r3, #64	; 0x40
     3b4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     3b6:	4281      	cmp	r1, r0
     3b8:	d202      	bcs.n	3c0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     3ba:	0018      	movs	r0, r3
     3bc:	bd10      	pop	{r4, pc}
		baud_calculated++;
     3be:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     3c0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     3c2:	1c63      	adds	r3, r4, #1
     3c4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     3c6:	4288      	cmp	r0, r1
     3c8:	d9f9      	bls.n	3be <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3ca:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     3cc:	2cff      	cmp	r4, #255	; 0xff
     3ce:	d8f4      	bhi.n	3ba <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     3d0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     3d2:	2300      	movs	r3, #0
     3d4:	e7f1      	b.n	3ba <_sercom_get_sync_baud_val+0xc>
	...

000003d8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3da:	b083      	sub	sp, #12
     3dc:	000f      	movs	r7, r1
     3de:	0016      	movs	r6, r2
     3e0:	aa08      	add	r2, sp, #32
     3e2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     3e4:	0004      	movs	r4, r0
     3e6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3e8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     3ea:	42bc      	cmp	r4, r7
     3ec:	d902      	bls.n	3f4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     3ee:	0010      	movs	r0, r2
     3f0:	b003      	add	sp, #12
     3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     3f4:	2b00      	cmp	r3, #0
     3f6:	d114      	bne.n	422 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     3f8:	0002      	movs	r2, r0
     3fa:	0008      	movs	r0, r1
     3fc:	2100      	movs	r1, #0
     3fe:	4c19      	ldr	r4, [pc, #100]	; (464 <_sercom_get_async_baud_val+0x8c>)
     400:	47a0      	blx	r4
     402:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     404:	003a      	movs	r2, r7
     406:	2300      	movs	r3, #0
     408:	2000      	movs	r0, #0
     40a:	4c17      	ldr	r4, [pc, #92]	; (468 <_sercom_get_async_baud_val+0x90>)
     40c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     40e:	2200      	movs	r2, #0
     410:	2301      	movs	r3, #1
     412:	1a12      	subs	r2, r2, r0
     414:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     416:	0c12      	lsrs	r2, r2, #16
     418:	041b      	lsls	r3, r3, #16
     41a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     41c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     41e:	2200      	movs	r2, #0
     420:	e7e5      	b.n	3ee <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     422:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     424:	2b01      	cmp	r3, #1
     426:	d1f9      	bne.n	41c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     428:	000a      	movs	r2, r1
     42a:	2300      	movs	r3, #0
     42c:	2100      	movs	r1, #0
     42e:	4c0d      	ldr	r4, [pc, #52]	; (464 <_sercom_get_async_baud_val+0x8c>)
     430:	47a0      	blx	r4
     432:	0002      	movs	r2, r0
     434:	000b      	movs	r3, r1
     436:	9200      	str	r2, [sp, #0]
     438:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     43a:	0038      	movs	r0, r7
     43c:	2100      	movs	r1, #0
     43e:	4c0a      	ldr	r4, [pc, #40]	; (468 <_sercom_get_async_baud_val+0x90>)
     440:	47a0      	blx	r4
     442:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     444:	2380      	movs	r3, #128	; 0x80
     446:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     448:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     44a:	4298      	cmp	r0, r3
     44c:	d8cf      	bhi.n	3ee <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     44e:	0f79      	lsrs	r1, r7, #29
     450:	00f8      	lsls	r0, r7, #3
     452:	9a00      	ldr	r2, [sp, #0]
     454:	9b01      	ldr	r3, [sp, #4]
     456:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     458:	00ea      	lsls	r2, r5, #3
     45a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     45c:	b2d2      	uxtb	r2, r2
     45e:	0352      	lsls	r2, r2, #13
     460:	432a      	orrs	r2, r5
     462:	e7db      	b.n	41c <_sercom_get_async_baud_val+0x44>
     464:	00001505 	.word	0x00001505
     468:	000002f5 	.word	0x000002f5

0000046c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     46c:	b510      	push	{r4, lr}
     46e:	b082      	sub	sp, #8
     470:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     472:	4b0e      	ldr	r3, [pc, #56]	; (4ac <sercom_set_gclk_generator+0x40>)
     474:	781b      	ldrb	r3, [r3, #0]
     476:	2b00      	cmp	r3, #0
     478:	d007      	beq.n	48a <sercom_set_gclk_generator+0x1e>
     47a:	2900      	cmp	r1, #0
     47c:	d105      	bne.n	48a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     47e:	4b0b      	ldr	r3, [pc, #44]	; (4ac <sercom_set_gclk_generator+0x40>)
     480:	785b      	ldrb	r3, [r3, #1]
     482:	4283      	cmp	r3, r0
     484:	d010      	beq.n	4a8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     486:	201d      	movs	r0, #29
     488:	e00c      	b.n	4a4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     48a:	a901      	add	r1, sp, #4
     48c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     48e:	2013      	movs	r0, #19
     490:	4b07      	ldr	r3, [pc, #28]	; (4b0 <sercom_set_gclk_generator+0x44>)
     492:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     494:	2013      	movs	r0, #19
     496:	4b07      	ldr	r3, [pc, #28]	; (4b4 <sercom_set_gclk_generator+0x48>)
     498:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     49a:	4b04      	ldr	r3, [pc, #16]	; (4ac <sercom_set_gclk_generator+0x40>)
     49c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     49e:	2201      	movs	r2, #1
     4a0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     4a2:	2000      	movs	r0, #0
}
     4a4:	b002      	add	sp, #8
     4a6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     4a8:	2000      	movs	r0, #0
     4aa:	e7fb      	b.n	4a4 <sercom_set_gclk_generator+0x38>
     4ac:	200000b8 	.word	0x200000b8
     4b0:	00001155 	.word	0x00001155
     4b4:	000010c9 	.word	0x000010c9

000004b8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     4b8:	4b40      	ldr	r3, [pc, #256]	; (5bc <_sercom_get_default_pad+0x104>)
     4ba:	4298      	cmp	r0, r3
     4bc:	d031      	beq.n	522 <_sercom_get_default_pad+0x6a>
     4be:	d90a      	bls.n	4d6 <_sercom_get_default_pad+0x1e>
     4c0:	4b3f      	ldr	r3, [pc, #252]	; (5c0 <_sercom_get_default_pad+0x108>)
     4c2:	4298      	cmp	r0, r3
     4c4:	d04d      	beq.n	562 <_sercom_get_default_pad+0xaa>
     4c6:	4b3f      	ldr	r3, [pc, #252]	; (5c4 <_sercom_get_default_pad+0x10c>)
     4c8:	4298      	cmp	r0, r3
     4ca:	d05a      	beq.n	582 <_sercom_get_default_pad+0xca>
     4cc:	4b3e      	ldr	r3, [pc, #248]	; (5c8 <_sercom_get_default_pad+0x110>)
     4ce:	4298      	cmp	r0, r3
     4d0:	d037      	beq.n	542 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     4d2:	2000      	movs	r0, #0
}
     4d4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     4d6:	4b3d      	ldr	r3, [pc, #244]	; (5cc <_sercom_get_default_pad+0x114>)
     4d8:	4298      	cmp	r0, r3
     4da:	d00c      	beq.n	4f6 <_sercom_get_default_pad+0x3e>
     4dc:	4b3c      	ldr	r3, [pc, #240]	; (5d0 <_sercom_get_default_pad+0x118>)
     4de:	4298      	cmp	r0, r3
     4e0:	d1f7      	bne.n	4d2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4e2:	2901      	cmp	r1, #1
     4e4:	d017      	beq.n	516 <_sercom_get_default_pad+0x5e>
     4e6:	2900      	cmp	r1, #0
     4e8:	d05d      	beq.n	5a6 <_sercom_get_default_pad+0xee>
     4ea:	2902      	cmp	r1, #2
     4ec:	d015      	beq.n	51a <_sercom_get_default_pad+0x62>
     4ee:	2903      	cmp	r1, #3
     4f0:	d015      	beq.n	51e <_sercom_get_default_pad+0x66>
	return 0;
     4f2:	2000      	movs	r0, #0
     4f4:	e7ee      	b.n	4d4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4f6:	2901      	cmp	r1, #1
     4f8:	d007      	beq.n	50a <_sercom_get_default_pad+0x52>
     4fa:	2900      	cmp	r1, #0
     4fc:	d051      	beq.n	5a2 <_sercom_get_default_pad+0xea>
     4fe:	2902      	cmp	r1, #2
     500:	d005      	beq.n	50e <_sercom_get_default_pad+0x56>
     502:	2903      	cmp	r1, #3
     504:	d005      	beq.n	512 <_sercom_get_default_pad+0x5a>
	return 0;
     506:	2000      	movs	r0, #0
     508:	e7e4      	b.n	4d4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     50a:	4832      	ldr	r0, [pc, #200]	; (5d4 <_sercom_get_default_pad+0x11c>)
     50c:	e7e2      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     50e:	4832      	ldr	r0, [pc, #200]	; (5d8 <_sercom_get_default_pad+0x120>)
     510:	e7e0      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     512:	4832      	ldr	r0, [pc, #200]	; (5dc <_sercom_get_default_pad+0x124>)
     514:	e7de      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     516:	4832      	ldr	r0, [pc, #200]	; (5e0 <_sercom_get_default_pad+0x128>)
     518:	e7dc      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     51a:	4832      	ldr	r0, [pc, #200]	; (5e4 <_sercom_get_default_pad+0x12c>)
     51c:	e7da      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     51e:	4832      	ldr	r0, [pc, #200]	; (5e8 <_sercom_get_default_pad+0x130>)
     520:	e7d8      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     522:	2901      	cmp	r1, #1
     524:	d007      	beq.n	536 <_sercom_get_default_pad+0x7e>
     526:	2900      	cmp	r1, #0
     528:	d03f      	beq.n	5aa <_sercom_get_default_pad+0xf2>
     52a:	2902      	cmp	r1, #2
     52c:	d005      	beq.n	53a <_sercom_get_default_pad+0x82>
     52e:	2903      	cmp	r1, #3
     530:	d005      	beq.n	53e <_sercom_get_default_pad+0x86>
	return 0;
     532:	2000      	movs	r0, #0
     534:	e7ce      	b.n	4d4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     536:	482d      	ldr	r0, [pc, #180]	; (5ec <_sercom_get_default_pad+0x134>)
     538:	e7cc      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     53a:	482d      	ldr	r0, [pc, #180]	; (5f0 <_sercom_get_default_pad+0x138>)
     53c:	e7ca      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     53e:	482d      	ldr	r0, [pc, #180]	; (5f4 <_sercom_get_default_pad+0x13c>)
     540:	e7c8      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     542:	2901      	cmp	r1, #1
     544:	d007      	beq.n	556 <_sercom_get_default_pad+0x9e>
     546:	2900      	cmp	r1, #0
     548:	d031      	beq.n	5ae <_sercom_get_default_pad+0xf6>
     54a:	2902      	cmp	r1, #2
     54c:	d005      	beq.n	55a <_sercom_get_default_pad+0xa2>
     54e:	2903      	cmp	r1, #3
     550:	d005      	beq.n	55e <_sercom_get_default_pad+0xa6>
	return 0;
     552:	2000      	movs	r0, #0
     554:	e7be      	b.n	4d4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     556:	4828      	ldr	r0, [pc, #160]	; (5f8 <_sercom_get_default_pad+0x140>)
     558:	e7bc      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     55a:	4828      	ldr	r0, [pc, #160]	; (5fc <_sercom_get_default_pad+0x144>)
     55c:	e7ba      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     55e:	4828      	ldr	r0, [pc, #160]	; (600 <_sercom_get_default_pad+0x148>)
     560:	e7b8      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     562:	2901      	cmp	r1, #1
     564:	d007      	beq.n	576 <_sercom_get_default_pad+0xbe>
     566:	2900      	cmp	r1, #0
     568:	d023      	beq.n	5b2 <_sercom_get_default_pad+0xfa>
     56a:	2902      	cmp	r1, #2
     56c:	d005      	beq.n	57a <_sercom_get_default_pad+0xc2>
     56e:	2903      	cmp	r1, #3
     570:	d005      	beq.n	57e <_sercom_get_default_pad+0xc6>
	return 0;
     572:	2000      	movs	r0, #0
     574:	e7ae      	b.n	4d4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     576:	4823      	ldr	r0, [pc, #140]	; (604 <_sercom_get_default_pad+0x14c>)
     578:	e7ac      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     57a:	4823      	ldr	r0, [pc, #140]	; (608 <_sercom_get_default_pad+0x150>)
     57c:	e7aa      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     57e:	4823      	ldr	r0, [pc, #140]	; (60c <_sercom_get_default_pad+0x154>)
     580:	e7a8      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     582:	2901      	cmp	r1, #1
     584:	d007      	beq.n	596 <_sercom_get_default_pad+0xde>
     586:	2900      	cmp	r1, #0
     588:	d015      	beq.n	5b6 <_sercom_get_default_pad+0xfe>
     58a:	2902      	cmp	r1, #2
     58c:	d005      	beq.n	59a <_sercom_get_default_pad+0xe2>
     58e:	2903      	cmp	r1, #3
     590:	d005      	beq.n	59e <_sercom_get_default_pad+0xe6>
	return 0;
     592:	2000      	movs	r0, #0
     594:	e79e      	b.n	4d4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     596:	481e      	ldr	r0, [pc, #120]	; (610 <_sercom_get_default_pad+0x158>)
     598:	e79c      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     59a:	481e      	ldr	r0, [pc, #120]	; (614 <_sercom_get_default_pad+0x15c>)
     59c:	e79a      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     59e:	481e      	ldr	r0, [pc, #120]	; (618 <_sercom_get_default_pad+0x160>)
     5a0:	e798      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     5a2:	481e      	ldr	r0, [pc, #120]	; (61c <_sercom_get_default_pad+0x164>)
     5a4:	e796      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     5a6:	2003      	movs	r0, #3
     5a8:	e794      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     5aa:	481d      	ldr	r0, [pc, #116]	; (620 <_sercom_get_default_pad+0x168>)
     5ac:	e792      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     5ae:	481d      	ldr	r0, [pc, #116]	; (624 <_sercom_get_default_pad+0x16c>)
     5b0:	e790      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     5b2:	481d      	ldr	r0, [pc, #116]	; (628 <_sercom_get_default_pad+0x170>)
     5b4:	e78e      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     5b6:	481d      	ldr	r0, [pc, #116]	; (62c <_sercom_get_default_pad+0x174>)
     5b8:	e78c      	b.n	4d4 <_sercom_get_default_pad+0x1c>
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	42001000 	.word	0x42001000
     5c0:	42001800 	.word	0x42001800
     5c4:	42001c00 	.word	0x42001c00
     5c8:	42001400 	.word	0x42001400
     5cc:	42000800 	.word	0x42000800
     5d0:	42000c00 	.word	0x42000c00
     5d4:	00050003 	.word	0x00050003
     5d8:	00060003 	.word	0x00060003
     5dc:	00070003 	.word	0x00070003
     5e0:	00010003 	.word	0x00010003
     5e4:	001e0003 	.word	0x001e0003
     5e8:	001f0003 	.word	0x001f0003
     5ec:	00090003 	.word	0x00090003
     5f0:	000a0003 	.word	0x000a0003
     5f4:	000b0003 	.word	0x000b0003
     5f8:	00110003 	.word	0x00110003
     5fc:	00120003 	.word	0x00120003
     600:	00130003 	.word	0x00130003
     604:	000d0003 	.word	0x000d0003
     608:	000e0003 	.word	0x000e0003
     60c:	000f0003 	.word	0x000f0003
     610:	00170003 	.word	0x00170003
     614:	00180003 	.word	0x00180003
     618:	00190003 	.word	0x00190003
     61c:	00040003 	.word	0x00040003
     620:	00080003 	.word	0x00080003
     624:	00100003 	.word	0x00100003
     628:	000c0003 	.word	0x000c0003
     62c:	00160003 	.word	0x00160003

00000630 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     630:	b530      	push	{r4, r5, lr}
     632:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     634:	4b0b      	ldr	r3, [pc, #44]	; (664 <_sercom_get_sercom_inst_index+0x34>)
     636:	466a      	mov	r2, sp
     638:	cb32      	ldmia	r3!, {r1, r4, r5}
     63a:	c232      	stmia	r2!, {r1, r4, r5}
     63c:	cb32      	ldmia	r3!, {r1, r4, r5}
     63e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     640:	9b00      	ldr	r3, [sp, #0]
     642:	4283      	cmp	r3, r0
     644:	d00b      	beq.n	65e <_sercom_get_sercom_inst_index+0x2e>
     646:	2301      	movs	r3, #1
     648:	009a      	lsls	r2, r3, #2
     64a:	4669      	mov	r1, sp
     64c:	5852      	ldr	r2, [r2, r1]
     64e:	4282      	cmp	r2, r0
     650:	d006      	beq.n	660 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     652:	3301      	adds	r3, #1
     654:	2b06      	cmp	r3, #6
     656:	d1f7      	bne.n	648 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     658:	2000      	movs	r0, #0
}
     65a:	b007      	add	sp, #28
     65c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     65e:	2300      	movs	r3, #0
			return i;
     660:	b2d8      	uxtb	r0, r3
     662:	e7fa      	b.n	65a <_sercom_get_sercom_inst_index+0x2a>
     664:	000025a8 	.word	0x000025a8

00000668 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     668:	b5f0      	push	{r4, r5, r6, r7, lr}
     66a:	46de      	mov	lr, fp
     66c:	4657      	mov	r7, sl
     66e:	464e      	mov	r6, r9
     670:	4645      	mov	r5, r8
     672:	b5e0      	push	{r5, r6, r7, lr}
     674:	b091      	sub	sp, #68	; 0x44
     676:	0005      	movs	r5, r0
     678:	000c      	movs	r4, r1
     67a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     67c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     67e:	0008      	movs	r0, r1
     680:	4bba      	ldr	r3, [pc, #744]	; (96c <usart_init+0x304>)
     682:	4798      	blx	r3
     684:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     686:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     688:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     68a:	07db      	lsls	r3, r3, #31
     68c:	d506      	bpl.n	69c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     68e:	b011      	add	sp, #68	; 0x44
     690:	bc3c      	pop	{r2, r3, r4, r5}
     692:	4690      	mov	r8, r2
     694:	4699      	mov	r9, r3
     696:	46a2      	mov	sl, r4
     698:	46ab      	mov	fp, r5
     69a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     69c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     69e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     6a0:	079b      	lsls	r3, r3, #30
     6a2:	d4f4      	bmi.n	68e <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     6a4:	49b2      	ldr	r1, [pc, #712]	; (970 <usart_init+0x308>)
     6a6:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     6a8:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     6aa:	2301      	movs	r3, #1
     6ac:	40bb      	lsls	r3, r7
     6ae:	4303      	orrs	r3, r0
     6b0:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     6b2:	a90f      	add	r1, sp, #60	; 0x3c
     6b4:	272d      	movs	r7, #45	; 0x2d
     6b6:	5df3      	ldrb	r3, [r6, r7]
     6b8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     6ba:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     6bc:	b2d3      	uxtb	r3, r2
     6be:	9302      	str	r3, [sp, #8]
     6c0:	0018      	movs	r0, r3
     6c2:	4bac      	ldr	r3, [pc, #688]	; (974 <usart_init+0x30c>)
     6c4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     6c6:	9802      	ldr	r0, [sp, #8]
     6c8:	4bab      	ldr	r3, [pc, #684]	; (978 <usart_init+0x310>)
     6ca:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     6cc:	5df0      	ldrb	r0, [r6, r7]
     6ce:	2100      	movs	r1, #0
     6d0:	4baa      	ldr	r3, [pc, #680]	; (97c <usart_init+0x314>)
     6d2:	4798      	blx	r3
	module->character_size = config->character_size;
     6d4:	7af3      	ldrb	r3, [r6, #11]
     6d6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     6d8:	2324      	movs	r3, #36	; 0x24
     6da:	5cf3      	ldrb	r3, [r6, r3]
     6dc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     6de:	2325      	movs	r3, #37	; 0x25
     6e0:	5cf3      	ldrb	r3, [r6, r3]
     6e2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     6e4:	7ef3      	ldrb	r3, [r6, #27]
     6e6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     6e8:	7f33      	ldrb	r3, [r6, #28]
     6ea:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     6ec:	682b      	ldr	r3, [r5, #0]
     6ee:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     6f0:	0018      	movs	r0, r3
     6f2:	4b9e      	ldr	r3, [pc, #632]	; (96c <usart_init+0x304>)
     6f4:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     6f6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     6f8:	2200      	movs	r2, #0
     6fa:	230e      	movs	r3, #14
     6fc:	a906      	add	r1, sp, #24
     6fe:	468c      	mov	ip, r1
     700:	4463      	add	r3, ip
     702:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     704:	8a32      	ldrh	r2, [r6, #16]
     706:	9202      	str	r2, [sp, #8]
     708:	2380      	movs	r3, #128	; 0x80
     70a:	01db      	lsls	r3, r3, #7
     70c:	429a      	cmp	r2, r3
     70e:	d100      	bne.n	712 <usart_init+0xaa>
     710:	e09a      	b.n	848 <usart_init+0x1e0>
     712:	d90f      	bls.n	734 <usart_init+0xcc>
     714:	23c0      	movs	r3, #192	; 0xc0
     716:	01db      	lsls	r3, r3, #7
     718:	9a02      	ldr	r2, [sp, #8]
     71a:	429a      	cmp	r2, r3
     71c:	d100      	bne.n	720 <usart_init+0xb8>
     71e:	e08e      	b.n	83e <usart_init+0x1d6>
     720:	2380      	movs	r3, #128	; 0x80
     722:	021b      	lsls	r3, r3, #8
     724:	429a      	cmp	r2, r3
     726:	d000      	beq.n	72a <usart_init+0xc2>
     728:	e11b      	b.n	962 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     72a:	2303      	movs	r3, #3
     72c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     72e:	2300      	movs	r3, #0
     730:	9307      	str	r3, [sp, #28]
     732:	e008      	b.n	746 <usart_init+0xde>
	switch (config->sample_rate) {
     734:	2380      	movs	r3, #128	; 0x80
     736:	019b      	lsls	r3, r3, #6
     738:	429a      	cmp	r2, r3
     73a:	d000      	beq.n	73e <usart_init+0xd6>
     73c:	e111      	b.n	962 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     73e:	2310      	movs	r3, #16
     740:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     742:	3b0f      	subs	r3, #15
     744:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     746:	6833      	ldr	r3, [r6, #0]
     748:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     74a:	68f3      	ldr	r3, [r6, #12]
     74c:	469b      	mov	fp, r3
		config->sample_adjustment |
     74e:	6973      	ldr	r3, [r6, #20]
     750:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     752:	7e33      	ldrb	r3, [r6, #24]
     754:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     756:	2326      	movs	r3, #38	; 0x26
     758:	5cf3      	ldrb	r3, [r6, r3]
     75a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     75c:	6873      	ldr	r3, [r6, #4]
     75e:	4699      	mov	r9, r3
	switch (transfer_mode)
     760:	2b00      	cmp	r3, #0
     762:	d100      	bne.n	766 <usart_init+0xfe>
     764:	e09c      	b.n	8a0 <usart_init+0x238>
     766:	2380      	movs	r3, #128	; 0x80
     768:	055b      	lsls	r3, r3, #21
     76a:	4599      	cmp	r9, r3
     76c:	d100      	bne.n	770 <usart_init+0x108>
     76e:	e080      	b.n	872 <usart_init+0x20a>
	if(config->encoding_format_enable) {
     770:	7e73      	ldrb	r3, [r6, #25]
     772:	2b00      	cmp	r3, #0
     774:	d002      	beq.n	77c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     776:	7eb3      	ldrb	r3, [r6, #26]
     778:	4642      	mov	r2, r8
     77a:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     77c:	230e      	movs	r3, #14
     77e:	aa06      	add	r2, sp, #24
     780:	4694      	mov	ip, r2
     782:	4463      	add	r3, ip
     784:	881b      	ldrh	r3, [r3, #0]
     786:	4642      	mov	r2, r8
     788:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     78a:	9b05      	ldr	r3, [sp, #20]
     78c:	465a      	mov	r2, fp
     78e:	4313      	orrs	r3, r2
     790:	9a03      	ldr	r2, [sp, #12]
     792:	4313      	orrs	r3, r2
     794:	464a      	mov	r2, r9
     796:	4313      	orrs	r3, r2
     798:	9f02      	ldr	r7, [sp, #8]
     79a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     79c:	9b04      	ldr	r3, [sp, #16]
     79e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     7a0:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     7a2:	4653      	mov	r3, sl
     7a4:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     7a6:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     7a8:	2327      	movs	r3, #39	; 0x27
     7aa:	5cf3      	ldrb	r3, [r6, r3]
     7ac:	2b00      	cmp	r3, #0
     7ae:	d101      	bne.n	7b4 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     7b0:	3304      	adds	r3, #4
     7b2:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     7b4:	7e73      	ldrb	r3, [r6, #25]
     7b6:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     7b8:	7f32      	ldrb	r2, [r6, #28]
     7ba:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     7bc:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     7be:	7f72      	ldrb	r2, [r6, #29]
     7c0:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     7c2:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     7c4:	2224      	movs	r2, #36	; 0x24
     7c6:	5cb2      	ldrb	r2, [r6, r2]
     7c8:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     7ca:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     7cc:	2225      	movs	r2, #37	; 0x25
     7ce:	5cb2      	ldrb	r2, [r6, r2]
     7d0:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     7d2:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     7d4:	7ab1      	ldrb	r1, [r6, #10]
     7d6:	7af2      	ldrb	r2, [r6, #11]
     7d8:	4311      	orrs	r1, r2
     7da:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     7dc:	8933      	ldrh	r3, [r6, #8]
     7de:	2bff      	cmp	r3, #255	; 0xff
     7e0:	d100      	bne.n	7e4 <usart_init+0x17c>
     7e2:	e081      	b.n	8e8 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     7e4:	2280      	movs	r2, #128	; 0x80
     7e6:	0452      	lsls	r2, r2, #17
     7e8:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     7ea:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     7ec:	232c      	movs	r3, #44	; 0x2c
     7ee:	5cf3      	ldrb	r3, [r6, r3]
     7f0:	2b00      	cmp	r3, #0
     7f2:	d103      	bne.n	7fc <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     7f4:	4b62      	ldr	r3, [pc, #392]	; (980 <usart_init+0x318>)
     7f6:	789b      	ldrb	r3, [r3, #2]
     7f8:	079b      	lsls	r3, r3, #30
     7fa:	d501      	bpl.n	800 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     7fc:	2380      	movs	r3, #128	; 0x80
     7fe:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     800:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     802:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     804:	2b00      	cmp	r3, #0
     806:	d1fc      	bne.n	802 <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
     808:	4643      	mov	r3, r8
     80a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     80c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     80e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     810:	2b00      	cmp	r3, #0
     812:	d1fc      	bne.n	80e <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
     814:	4643      	mov	r3, r8
     816:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     818:	ab0e      	add	r3, sp, #56	; 0x38
     81a:	2280      	movs	r2, #128	; 0x80
     81c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     81e:	2200      	movs	r2, #0
     820:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     822:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     824:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     826:	6b33      	ldr	r3, [r6, #48]	; 0x30
     828:	930a      	str	r3, [sp, #40]	; 0x28
     82a:	6b73      	ldr	r3, [r6, #52]	; 0x34
     82c:	930b      	str	r3, [sp, #44]	; 0x2c
     82e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     830:	930c      	str	r3, [sp, #48]	; 0x30
     832:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     834:	9302      	str	r3, [sp, #8]
     836:	930d      	str	r3, [sp, #52]	; 0x34
     838:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     83a:	ae0a      	add	r6, sp, #40	; 0x28
     83c:	e063      	b.n	906 <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     83e:	2308      	movs	r3, #8
     840:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     842:	3b07      	subs	r3, #7
     844:	9307      	str	r3, [sp, #28]
     846:	e77e      	b.n	746 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     848:	6833      	ldr	r3, [r6, #0]
     84a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     84c:	68f3      	ldr	r3, [r6, #12]
     84e:	469b      	mov	fp, r3
		config->sample_adjustment |
     850:	6973      	ldr	r3, [r6, #20]
     852:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     854:	7e33      	ldrb	r3, [r6, #24]
     856:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     858:	2326      	movs	r3, #38	; 0x26
     85a:	5cf3      	ldrb	r3, [r6, r3]
     85c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     85e:	6873      	ldr	r3, [r6, #4]
     860:	4699      	mov	r9, r3
	switch (transfer_mode)
     862:	2b00      	cmp	r3, #0
     864:	d018      	beq.n	898 <usart_init+0x230>
     866:	2380      	movs	r3, #128	; 0x80
     868:	055b      	lsls	r3, r3, #21
     86a:	4599      	cmp	r9, r3
     86c:	d001      	beq.n	872 <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
     86e:	2000      	movs	r0, #0
     870:	e025      	b.n	8be <usart_init+0x256>
			if (!config->use_external_clock) {
     872:	2327      	movs	r3, #39	; 0x27
     874:	5cf3      	ldrb	r3, [r6, r3]
     876:	2b00      	cmp	r3, #0
     878:	d000      	beq.n	87c <usart_init+0x214>
     87a:	e779      	b.n	770 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     87c:	6a33      	ldr	r3, [r6, #32]
     87e:	001f      	movs	r7, r3
     880:	b2c0      	uxtb	r0, r0
     882:	4b40      	ldr	r3, [pc, #256]	; (984 <usart_init+0x31c>)
     884:	4798      	blx	r3
     886:	0001      	movs	r1, r0
     888:	220e      	movs	r2, #14
     88a:	ab06      	add	r3, sp, #24
     88c:	469c      	mov	ip, r3
     88e:	4462      	add	r2, ip
     890:	0038      	movs	r0, r7
     892:	4b3d      	ldr	r3, [pc, #244]	; (988 <usart_init+0x320>)
     894:	4798      	blx	r3
     896:	e012      	b.n	8be <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     898:	2308      	movs	r3, #8
     89a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     89c:	2300      	movs	r3, #0
     89e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     8a0:	2327      	movs	r3, #39	; 0x27
     8a2:	5cf3      	ldrb	r3, [r6, r3]
     8a4:	2b00      	cmp	r3, #0
     8a6:	d00e      	beq.n	8c6 <usart_init+0x25e>
				status_code =
     8a8:	9b06      	ldr	r3, [sp, #24]
     8aa:	9300      	str	r3, [sp, #0]
     8ac:	9b07      	ldr	r3, [sp, #28]
     8ae:	220e      	movs	r2, #14
     8b0:	a906      	add	r1, sp, #24
     8b2:	468c      	mov	ip, r1
     8b4:	4462      	add	r2, ip
     8b6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     8b8:	6a30      	ldr	r0, [r6, #32]
     8ba:	4f34      	ldr	r7, [pc, #208]	; (98c <usart_init+0x324>)
     8bc:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     8be:	2800      	cmp	r0, #0
     8c0:	d000      	beq.n	8c4 <usart_init+0x25c>
     8c2:	e6e4      	b.n	68e <usart_init+0x26>
     8c4:	e754      	b.n	770 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     8c6:	6a33      	ldr	r3, [r6, #32]
     8c8:	001f      	movs	r7, r3
     8ca:	b2c0      	uxtb	r0, r0
     8cc:	4b2d      	ldr	r3, [pc, #180]	; (984 <usart_init+0x31c>)
     8ce:	4798      	blx	r3
     8d0:	0001      	movs	r1, r0
				status_code =
     8d2:	9b06      	ldr	r3, [sp, #24]
     8d4:	9300      	str	r3, [sp, #0]
     8d6:	9b07      	ldr	r3, [sp, #28]
     8d8:	220e      	movs	r2, #14
     8da:	a806      	add	r0, sp, #24
     8dc:	4684      	mov	ip, r0
     8de:	4462      	add	r2, ip
     8e0:	0038      	movs	r0, r7
     8e2:	4f2a      	ldr	r7, [pc, #168]	; (98c <usart_init+0x324>)
     8e4:	47b8      	blx	r7
     8e6:	e7ea      	b.n	8be <usart_init+0x256>
		if(config->lin_slave_enable) {
     8e8:	7ef3      	ldrb	r3, [r6, #27]
     8ea:	2b00      	cmp	r3, #0
     8ec:	d100      	bne.n	8f0 <usart_init+0x288>
     8ee:	e77d      	b.n	7ec <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     8f0:	2380      	movs	r3, #128	; 0x80
     8f2:	04db      	lsls	r3, r3, #19
     8f4:	431f      	orrs	r7, r3
     8f6:	e779      	b.n	7ec <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     8f8:	0020      	movs	r0, r4
     8fa:	4b25      	ldr	r3, [pc, #148]	; (990 <usart_init+0x328>)
     8fc:	4798      	blx	r3
     8fe:	e007      	b.n	910 <usart_init+0x2a8>
     900:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     902:	2f04      	cmp	r7, #4
     904:	d00d      	beq.n	922 <usart_init+0x2ba>
     906:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     908:	00bb      	lsls	r3, r7, #2
     90a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     90c:	2800      	cmp	r0, #0
     90e:	d0f3      	beq.n	8f8 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
     910:	1c43      	adds	r3, r0, #1
     912:	d0f5      	beq.n	900 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     914:	a90e      	add	r1, sp, #56	; 0x38
     916:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     918:	0c00      	lsrs	r0, r0, #16
     91a:	b2c0      	uxtb	r0, r0
     91c:	4b1d      	ldr	r3, [pc, #116]	; (994 <usart_init+0x32c>)
     91e:	4798      	blx	r3
     920:	e7ee      	b.n	900 <usart_init+0x298>
		module->callback[i]            = NULL;
     922:	2300      	movs	r3, #0
     924:	60eb      	str	r3, [r5, #12]
     926:	612b      	str	r3, [r5, #16]
     928:	616b      	str	r3, [r5, #20]
     92a:	61ab      	str	r3, [r5, #24]
     92c:	61eb      	str	r3, [r5, #28]
     92e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     930:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     932:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     934:	2200      	movs	r2, #0
     936:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     938:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     93a:	3330      	adds	r3, #48	; 0x30
     93c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     93e:	3301      	adds	r3, #1
     940:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     942:	3301      	adds	r3, #1
     944:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     946:	3301      	adds	r3, #1
     948:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     94a:	6828      	ldr	r0, [r5, #0]
     94c:	4b07      	ldr	r3, [pc, #28]	; (96c <usart_init+0x304>)
     94e:	4798      	blx	r3
     950:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     952:	4911      	ldr	r1, [pc, #68]	; (998 <usart_init+0x330>)
     954:	4b11      	ldr	r3, [pc, #68]	; (99c <usart_init+0x334>)
     956:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     958:	00a4      	lsls	r4, r4, #2
     95a:	4b11      	ldr	r3, [pc, #68]	; (9a0 <usart_init+0x338>)
     95c:	50e5      	str	r5, [r4, r3]
	return status_code;
     95e:	2000      	movs	r0, #0
     960:	e695      	b.n	68e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     962:	2310      	movs	r3, #16
     964:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     966:	2300      	movs	r3, #0
     968:	9307      	str	r3, [sp, #28]
     96a:	e6ec      	b.n	746 <usart_init+0xde>
     96c:	00000631 	.word	0x00000631
     970:	40000400 	.word	0x40000400
     974:	00001155 	.word	0x00001155
     978:	000010c9 	.word	0x000010c9
     97c:	0000046d 	.word	0x0000046d
     980:	41002000 	.word	0x41002000
     984:	00001171 	.word	0x00001171
     988:	000003af 	.word	0x000003af
     98c:	000003d9 	.word	0x000003d9
     990:	000004b9 	.word	0x000004b9
     994:	0000124d 	.word	0x0000124d
     998:	00000a35 	.word	0x00000a35
     99c:	00000bcd 	.word	0x00000bcd
     9a0:	2000010c 	.word	0x2000010c

000009a4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     9a4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     9a6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     9a8:	2a00      	cmp	r2, #0
     9aa:	d101      	bne.n	9b0 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     9ac:	0018      	movs	r0, r3
     9ae:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     9b0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     9b2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     9b4:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     9b6:	2a00      	cmp	r2, #0
     9b8:	d1f8      	bne.n	9ac <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     9ba:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
     9bc:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     9be:	2102      	movs	r1, #2
     9c0:	7e13      	ldrb	r3, [r2, #24]
     9c2:	420b      	tst	r3, r1
     9c4:	d0fc      	beq.n	9c0 <usart_write_wait+0x1c>
	return STATUS_OK;
     9c6:	2300      	movs	r3, #0
     9c8:	e7f0      	b.n	9ac <usart_write_wait+0x8>

000009ca <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     9ca:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     9cc:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     9ce:	2a00      	cmp	r2, #0
     9d0:	d101      	bne.n	9d6 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     9d2:	0018      	movs	r0, r3
     9d4:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     9d6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     9d8:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     9da:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     9dc:	2a00      	cmp	r2, #0
     9de:	d1f8      	bne.n	9d2 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     9e0:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     9e2:	7e10      	ldrb	r0, [r2, #24]
     9e4:	0740      	lsls	r0, r0, #29
     9e6:	d5f4      	bpl.n	9d2 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     9e8:	8b53      	ldrh	r3, [r2, #26]
     9ea:	b2db      	uxtb	r3, r3
	if (error_code) {
     9ec:	0698      	lsls	r0, r3, #26
     9ee:	d01d      	beq.n	a2c <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     9f0:	0798      	lsls	r0, r3, #30
     9f2:	d503      	bpl.n	9fc <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     9f4:	2302      	movs	r3, #2
     9f6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     9f8:	3318      	adds	r3, #24
     9fa:	e7ea      	b.n	9d2 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     9fc:	0758      	lsls	r0, r3, #29
     9fe:	d503      	bpl.n	a08 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     a00:	2304      	movs	r3, #4
     a02:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     a04:	331a      	adds	r3, #26
     a06:	e7e4      	b.n	9d2 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a08:	07d8      	lsls	r0, r3, #31
     a0a:	d503      	bpl.n	a14 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     a0c:	2301      	movs	r3, #1
     a0e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     a10:	3312      	adds	r3, #18
     a12:	e7de      	b.n	9d2 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     a14:	06d8      	lsls	r0, r3, #27
     a16:	d503      	bpl.n	a20 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     a18:	2310      	movs	r3, #16
     a1a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     a1c:	3332      	adds	r3, #50	; 0x32
     a1e:	e7d8      	b.n	9d2 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     a20:	069b      	lsls	r3, r3, #26
     a22:	d503      	bpl.n	a2c <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     a24:	2320      	movs	r3, #32
     a26:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     a28:	3321      	adds	r3, #33	; 0x21
     a2a:	e7d2      	b.n	9d2 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     a2c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     a2e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     a30:	2300      	movs	r3, #0
     a32:	e7ce      	b.n	9d2 <usart_read_wait+0x8>

00000a34 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     a36:	0080      	lsls	r0, r0, #2
     a38:	4b62      	ldr	r3, [pc, #392]	; (bc4 <_usart_interrupt_handler+0x190>)
     a3a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     a3c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     a3e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     a40:	2b00      	cmp	r3, #0
     a42:	d1fc      	bne.n	a3e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     a44:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     a46:	7da6      	ldrb	r6, [r4, #22]
     a48:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     a4a:	2330      	movs	r3, #48	; 0x30
     a4c:	5ceb      	ldrb	r3, [r5, r3]
     a4e:	2231      	movs	r2, #49	; 0x31
     a50:	5caf      	ldrb	r7, [r5, r2]
     a52:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     a54:	07f3      	lsls	r3, r6, #31
     a56:	d522      	bpl.n	a9e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     a58:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     a5a:	b29b      	uxth	r3, r3
     a5c:	2b00      	cmp	r3, #0
     a5e:	d01c      	beq.n	a9a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a60:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     a62:	7813      	ldrb	r3, [r2, #0]
     a64:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     a66:	1c51      	adds	r1, r2, #1
     a68:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a6a:	7969      	ldrb	r1, [r5, #5]
     a6c:	2901      	cmp	r1, #1
     a6e:	d00e      	beq.n	a8e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a70:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     a72:	05db      	lsls	r3, r3, #23
     a74:	0ddb      	lsrs	r3, r3, #23
     a76:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     a78:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     a7a:	3b01      	subs	r3, #1
     a7c:	b29b      	uxth	r3, r3
     a7e:	85eb      	strh	r3, [r5, #46]	; 0x2e
     a80:	2b00      	cmp	r3, #0
     a82:	d10c      	bne.n	a9e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     a84:	3301      	adds	r3, #1
     a86:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     a88:	3301      	adds	r3, #1
     a8a:	75a3      	strb	r3, [r4, #22]
     a8c:	e007      	b.n	a9e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     a8e:	7851      	ldrb	r1, [r2, #1]
     a90:	0209      	lsls	r1, r1, #8
     a92:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     a94:	3202      	adds	r2, #2
     a96:	62aa      	str	r2, [r5, #40]	; 0x28
     a98:	e7eb      	b.n	a72 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     a9a:	2301      	movs	r3, #1
     a9c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     a9e:	07b3      	lsls	r3, r6, #30
     aa0:	d506      	bpl.n	ab0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     aa2:	2302      	movs	r3, #2
     aa4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     aa6:	2200      	movs	r2, #0
     aa8:	3331      	adds	r3, #49	; 0x31
     aaa:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     aac:	07fb      	lsls	r3, r7, #31
     aae:	d41a      	bmi.n	ae6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     ab0:	0773      	lsls	r3, r6, #29
     ab2:	d565      	bpl.n	b80 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     ab4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     ab6:	b29b      	uxth	r3, r3
     ab8:	2b00      	cmp	r3, #0
     aba:	d05f      	beq.n	b7c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     abc:	8b63      	ldrh	r3, [r4, #26]
     abe:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     ac0:	071a      	lsls	r2, r3, #28
     ac2:	d414      	bmi.n	aee <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     ac4:	223f      	movs	r2, #63	; 0x3f
     ac6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     ac8:	2b00      	cmp	r3, #0
     aca:	d034      	beq.n	b36 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     acc:	079a      	lsls	r2, r3, #30
     ace:	d511      	bpl.n	af4 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     ad0:	221a      	movs	r2, #26
     ad2:	2332      	movs	r3, #50	; 0x32
     ad4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     ad6:	3b30      	subs	r3, #48	; 0x30
     ad8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     ada:	077b      	lsls	r3, r7, #29
     adc:	d550      	bpl.n	b80 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     ade:	0028      	movs	r0, r5
     ae0:	696b      	ldr	r3, [r5, #20]
     ae2:	4798      	blx	r3
     ae4:	e04c      	b.n	b80 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     ae6:	0028      	movs	r0, r5
     ae8:	68eb      	ldr	r3, [r5, #12]
     aea:	4798      	blx	r3
     aec:	e7e0      	b.n	ab0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     aee:	2237      	movs	r2, #55	; 0x37
     af0:	4013      	ands	r3, r2
     af2:	e7e9      	b.n	ac8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     af4:	075a      	lsls	r2, r3, #29
     af6:	d505      	bpl.n	b04 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     af8:	221e      	movs	r2, #30
     afa:	2332      	movs	r3, #50	; 0x32
     afc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     afe:	3b2e      	subs	r3, #46	; 0x2e
     b00:	8363      	strh	r3, [r4, #26]
     b02:	e7ea      	b.n	ada <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     b04:	07da      	lsls	r2, r3, #31
     b06:	d505      	bpl.n	b14 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     b08:	2213      	movs	r2, #19
     b0a:	2332      	movs	r3, #50	; 0x32
     b0c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     b0e:	3b31      	subs	r3, #49	; 0x31
     b10:	8363      	strh	r3, [r4, #26]
     b12:	e7e2      	b.n	ada <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     b14:	06da      	lsls	r2, r3, #27
     b16:	d505      	bpl.n	b24 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     b18:	2242      	movs	r2, #66	; 0x42
     b1a:	2332      	movs	r3, #50	; 0x32
     b1c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     b1e:	3b22      	subs	r3, #34	; 0x22
     b20:	8363      	strh	r3, [r4, #26]
     b22:	e7da      	b.n	ada <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     b24:	2220      	movs	r2, #32
     b26:	421a      	tst	r2, r3
     b28:	d0d7      	beq.n	ada <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     b2a:	3221      	adds	r2, #33	; 0x21
     b2c:	2332      	movs	r3, #50	; 0x32
     b2e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     b30:	3b12      	subs	r3, #18
     b32:	8363      	strh	r3, [r4, #26]
     b34:	e7d1      	b.n	ada <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     b36:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     b38:	05db      	lsls	r3, r3, #23
     b3a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     b3c:	b2da      	uxtb	r2, r3
     b3e:	6a69      	ldr	r1, [r5, #36]	; 0x24
     b40:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     b42:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     b44:	1c51      	adds	r1, r2, #1
     b46:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b48:	7969      	ldrb	r1, [r5, #5]
     b4a:	2901      	cmp	r1, #1
     b4c:	d010      	beq.n	b70 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     b4e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     b50:	3b01      	subs	r3, #1
     b52:	b29b      	uxth	r3, r3
     b54:	85ab      	strh	r3, [r5, #44]	; 0x2c
     b56:	2b00      	cmp	r3, #0
     b58:	d112      	bne.n	b80 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     b5a:	3304      	adds	r3, #4
     b5c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     b5e:	2200      	movs	r2, #0
     b60:	332e      	adds	r3, #46	; 0x2e
     b62:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     b64:	07bb      	lsls	r3, r7, #30
     b66:	d50b      	bpl.n	b80 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     b68:	0028      	movs	r0, r5
     b6a:	692b      	ldr	r3, [r5, #16]
     b6c:	4798      	blx	r3
     b6e:	e007      	b.n	b80 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     b70:	0a1b      	lsrs	r3, r3, #8
     b72:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     b74:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     b76:	3301      	adds	r3, #1
     b78:	626b      	str	r3, [r5, #36]	; 0x24
     b7a:	e7e8      	b.n	b4e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     b7c:	2304      	movs	r3, #4
     b7e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     b80:	06f3      	lsls	r3, r6, #27
     b82:	d504      	bpl.n	b8e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     b84:	2310      	movs	r3, #16
     b86:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     b88:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     b8a:	06fb      	lsls	r3, r7, #27
     b8c:	d40e      	bmi.n	bac <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     b8e:	06b3      	lsls	r3, r6, #26
     b90:	d504      	bpl.n	b9c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     b92:	2320      	movs	r3, #32
     b94:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     b96:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     b98:	073b      	lsls	r3, r7, #28
     b9a:	d40b      	bmi.n	bb4 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     b9c:	0733      	lsls	r3, r6, #28
     b9e:	d504      	bpl.n	baa <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     ba0:	2308      	movs	r3, #8
     ba2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     ba4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     ba6:	06bb      	lsls	r3, r7, #26
     ba8:	d408      	bmi.n	bbc <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     bac:	0028      	movs	r0, r5
     bae:	69eb      	ldr	r3, [r5, #28]
     bb0:	4798      	blx	r3
     bb2:	e7ec      	b.n	b8e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     bb4:	0028      	movs	r0, r5
     bb6:	69ab      	ldr	r3, [r5, #24]
     bb8:	4798      	blx	r3
     bba:	e7ef      	b.n	b9c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     bbc:	6a2b      	ldr	r3, [r5, #32]
     bbe:	0028      	movs	r0, r5
     bc0:	4798      	blx	r3
}
     bc2:	e7f2      	b.n	baa <_usart_interrupt_handler+0x176>
     bc4:	2000010c 	.word	0x2000010c

00000bc8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     bc8:	4770      	bx	lr
	...

00000bcc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     bce:	4b0a      	ldr	r3, [pc, #40]	; (bf8 <_sercom_set_handler+0x2c>)
     bd0:	781b      	ldrb	r3, [r3, #0]
     bd2:	2b00      	cmp	r3, #0
     bd4:	d10c      	bne.n	bf0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     bd6:	4f09      	ldr	r7, [pc, #36]	; (bfc <_sercom_set_handler+0x30>)
     bd8:	4e09      	ldr	r6, [pc, #36]	; (c00 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     bda:	4d0a      	ldr	r5, [pc, #40]	; (c04 <_sercom_set_handler+0x38>)
     bdc:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     bde:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     be0:	195a      	adds	r2, r3, r5
     be2:	6014      	str	r4, [r2, #0]
     be4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     be6:	2b18      	cmp	r3, #24
     be8:	d1f9      	bne.n	bde <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     bea:	2201      	movs	r2, #1
     bec:	4b02      	ldr	r3, [pc, #8]	; (bf8 <_sercom_set_handler+0x2c>)
     bee:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     bf0:	0080      	lsls	r0, r0, #2
     bf2:	4b02      	ldr	r3, [pc, #8]	; (bfc <_sercom_set_handler+0x30>)
     bf4:	50c1      	str	r1, [r0, r3]
}
     bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bf8:	200000ba 	.word	0x200000ba
     bfc:	200000bc 	.word	0x200000bc
     c00:	00000bc9 	.word	0x00000bc9
     c04:	2000010c 	.word	0x2000010c

00000c08 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     c08:	b500      	push	{lr}
     c0a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     c0c:	2309      	movs	r3, #9
     c0e:	466a      	mov	r2, sp
     c10:	7013      	strb	r3, [r2, #0]
     c12:	3301      	adds	r3, #1
     c14:	7053      	strb	r3, [r2, #1]
     c16:	3301      	adds	r3, #1
     c18:	7093      	strb	r3, [r2, #2]
     c1a:	3301      	adds	r3, #1
     c1c:	70d3      	strb	r3, [r2, #3]
     c1e:	3301      	adds	r3, #1
     c20:	7113      	strb	r3, [r2, #4]
     c22:	3301      	adds	r3, #1
     c24:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     c26:	4b03      	ldr	r3, [pc, #12]	; (c34 <_sercom_get_interrupt_vector+0x2c>)
     c28:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     c2a:	466b      	mov	r3, sp
     c2c:	5618      	ldrsb	r0, [r3, r0]
}
     c2e:	b003      	add	sp, #12
     c30:	bd00      	pop	{pc}
     c32:	46c0      	nop			; (mov r8, r8)
     c34:	00000631 	.word	0x00000631

00000c38 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     c38:	b510      	push	{r4, lr}
     c3a:	4b02      	ldr	r3, [pc, #8]	; (c44 <SERCOM0_Handler+0xc>)
     c3c:	681b      	ldr	r3, [r3, #0]
     c3e:	2000      	movs	r0, #0
     c40:	4798      	blx	r3
     c42:	bd10      	pop	{r4, pc}
     c44:	200000bc 	.word	0x200000bc

00000c48 <SERCOM1_Handler>:
     c48:	b510      	push	{r4, lr}
     c4a:	4b02      	ldr	r3, [pc, #8]	; (c54 <SERCOM1_Handler+0xc>)
     c4c:	685b      	ldr	r3, [r3, #4]
     c4e:	2001      	movs	r0, #1
     c50:	4798      	blx	r3
     c52:	bd10      	pop	{r4, pc}
     c54:	200000bc 	.word	0x200000bc

00000c58 <SERCOM2_Handler>:
     c58:	b510      	push	{r4, lr}
     c5a:	4b02      	ldr	r3, [pc, #8]	; (c64 <SERCOM2_Handler+0xc>)
     c5c:	689b      	ldr	r3, [r3, #8]
     c5e:	2002      	movs	r0, #2
     c60:	4798      	blx	r3
     c62:	bd10      	pop	{r4, pc}
     c64:	200000bc 	.word	0x200000bc

00000c68 <SERCOM3_Handler>:
     c68:	b510      	push	{r4, lr}
     c6a:	4b02      	ldr	r3, [pc, #8]	; (c74 <SERCOM3_Handler+0xc>)
     c6c:	68db      	ldr	r3, [r3, #12]
     c6e:	2003      	movs	r0, #3
     c70:	4798      	blx	r3
     c72:	bd10      	pop	{r4, pc}
     c74:	200000bc 	.word	0x200000bc

00000c78 <SERCOM4_Handler>:
     c78:	b510      	push	{r4, lr}
     c7a:	4b02      	ldr	r3, [pc, #8]	; (c84 <SERCOM4_Handler+0xc>)
     c7c:	691b      	ldr	r3, [r3, #16]
     c7e:	2004      	movs	r0, #4
     c80:	4798      	blx	r3
     c82:	bd10      	pop	{r4, pc}
     c84:	200000bc 	.word	0x200000bc

00000c88 <SERCOM5_Handler>:
     c88:	b510      	push	{r4, lr}
     c8a:	4b02      	ldr	r3, [pc, #8]	; (c94 <SERCOM5_Handler+0xc>)
     c8c:	695b      	ldr	r3, [r3, #20]
     c8e:	2005      	movs	r0, #5
     c90:	4798      	blx	r3
     c92:	bd10      	pop	{r4, pc}
     c94:	200000bc 	.word	0x200000bc

00000c98 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     c98:	4770      	bx	lr
	...

00000c9c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     c9c:	4b0c      	ldr	r3, [pc, #48]	; (cd0 <cpu_irq_enter_critical+0x34>)
     c9e:	681b      	ldr	r3, [r3, #0]
     ca0:	2b00      	cmp	r3, #0
     ca2:	d106      	bne.n	cb2 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     ca4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     ca8:	2b00      	cmp	r3, #0
     caa:	d007      	beq.n	cbc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     cac:	2200      	movs	r2, #0
     cae:	4b09      	ldr	r3, [pc, #36]	; (cd4 <cpu_irq_enter_critical+0x38>)
     cb0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     cb2:	4a07      	ldr	r2, [pc, #28]	; (cd0 <cpu_irq_enter_critical+0x34>)
     cb4:	6813      	ldr	r3, [r2, #0]
     cb6:	3301      	adds	r3, #1
     cb8:	6013      	str	r3, [r2, #0]
}
     cba:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     cbc:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     cbe:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     cc2:	2200      	movs	r2, #0
     cc4:	4b04      	ldr	r3, [pc, #16]	; (cd8 <cpu_irq_enter_critical+0x3c>)
     cc6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     cc8:	3201      	adds	r2, #1
     cca:	4b02      	ldr	r3, [pc, #8]	; (cd4 <cpu_irq_enter_critical+0x38>)
     ccc:	701a      	strb	r2, [r3, #0]
     cce:	e7f0      	b.n	cb2 <cpu_irq_enter_critical+0x16>
     cd0:	200000d4 	.word	0x200000d4
     cd4:	200000d8 	.word	0x200000d8
     cd8:	20000000 	.word	0x20000000

00000cdc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     cdc:	4b08      	ldr	r3, [pc, #32]	; (d00 <cpu_irq_leave_critical+0x24>)
     cde:	681a      	ldr	r2, [r3, #0]
     ce0:	3a01      	subs	r2, #1
     ce2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     ce4:	681b      	ldr	r3, [r3, #0]
     ce6:	2b00      	cmp	r3, #0
     ce8:	d109      	bne.n	cfe <cpu_irq_leave_critical+0x22>
     cea:	4b06      	ldr	r3, [pc, #24]	; (d04 <cpu_irq_leave_critical+0x28>)
     cec:	781b      	ldrb	r3, [r3, #0]
     cee:	2b00      	cmp	r3, #0
     cf0:	d005      	beq.n	cfe <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     cf2:	2201      	movs	r2, #1
     cf4:	4b04      	ldr	r3, [pc, #16]	; (d08 <cpu_irq_leave_critical+0x2c>)
     cf6:	701a      	strb	r2, [r3, #0]
     cf8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     cfc:	b662      	cpsie	i
	}
}
     cfe:	4770      	bx	lr
     d00:	200000d4 	.word	0x200000d4
     d04:	200000d8 	.word	0x200000d8
     d08:	20000000 	.word	0x20000000

00000d0c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     d0c:	b510      	push	{r4, lr}
	switch (clock_source) {
     d0e:	2808      	cmp	r0, #8
     d10:	d803      	bhi.n	d1a <system_clock_source_get_hz+0xe>
     d12:	0080      	lsls	r0, r0, #2
     d14:	4b1c      	ldr	r3, [pc, #112]	; (d88 <system_clock_source_get_hz+0x7c>)
     d16:	581b      	ldr	r3, [r3, r0]
     d18:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     d1a:	2000      	movs	r0, #0
     d1c:	e032      	b.n	d84 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     d1e:	4b1b      	ldr	r3, [pc, #108]	; (d8c <system_clock_source_get_hz+0x80>)
     d20:	6918      	ldr	r0, [r3, #16]
     d22:	e02f      	b.n	d84 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     d24:	4b1a      	ldr	r3, [pc, #104]	; (d90 <system_clock_source_get_hz+0x84>)
     d26:	6a1b      	ldr	r3, [r3, #32]
     d28:	059b      	lsls	r3, r3, #22
     d2a:	0f9b      	lsrs	r3, r3, #30
     d2c:	4819      	ldr	r0, [pc, #100]	; (d94 <system_clock_source_get_hz+0x88>)
     d2e:	40d8      	lsrs	r0, r3
     d30:	e028      	b.n	d84 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     d32:	4b16      	ldr	r3, [pc, #88]	; (d8c <system_clock_source_get_hz+0x80>)
     d34:	6958      	ldr	r0, [r3, #20]
     d36:	e025      	b.n	d84 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     d38:	4b14      	ldr	r3, [pc, #80]	; (d8c <system_clock_source_get_hz+0x80>)
     d3a:	681b      	ldr	r3, [r3, #0]
			return 0;
     d3c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     d3e:	079b      	lsls	r3, r3, #30
     d40:	d520      	bpl.n	d84 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     d42:	4913      	ldr	r1, [pc, #76]	; (d90 <system_clock_source_get_hz+0x84>)
     d44:	2210      	movs	r2, #16
     d46:	68cb      	ldr	r3, [r1, #12]
     d48:	421a      	tst	r2, r3
     d4a:	d0fc      	beq.n	d46 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     d4c:	4b0f      	ldr	r3, [pc, #60]	; (d8c <system_clock_source_get_hz+0x80>)
     d4e:	681a      	ldr	r2, [r3, #0]
     d50:	2324      	movs	r3, #36	; 0x24
     d52:	4013      	ands	r3, r2
     d54:	2b04      	cmp	r3, #4
     d56:	d001      	beq.n	d5c <system_clock_source_get_hz+0x50>
			return 48000000UL;
     d58:	480f      	ldr	r0, [pc, #60]	; (d98 <system_clock_source_get_hz+0x8c>)
     d5a:	e013      	b.n	d84 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     d5c:	2000      	movs	r0, #0
     d5e:	4b0f      	ldr	r3, [pc, #60]	; (d9c <system_clock_source_get_hz+0x90>)
     d60:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     d62:	4b0a      	ldr	r3, [pc, #40]	; (d8c <system_clock_source_get_hz+0x80>)
     d64:	689b      	ldr	r3, [r3, #8]
     d66:	041b      	lsls	r3, r3, #16
     d68:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     d6a:	4358      	muls	r0, r3
     d6c:	e00a      	b.n	d84 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     d6e:	2350      	movs	r3, #80	; 0x50
     d70:	4a07      	ldr	r2, [pc, #28]	; (d90 <system_clock_source_get_hz+0x84>)
     d72:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     d74:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     d76:	075b      	lsls	r3, r3, #29
     d78:	d504      	bpl.n	d84 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     d7a:	4b04      	ldr	r3, [pc, #16]	; (d8c <system_clock_source_get_hz+0x80>)
     d7c:	68d8      	ldr	r0, [r3, #12]
     d7e:	e001      	b.n	d84 <system_clock_source_get_hz+0x78>
		return 32768UL;
     d80:	2080      	movs	r0, #128	; 0x80
     d82:	0200      	lsls	r0, r0, #8
	}
}
     d84:	bd10      	pop	{r4, pc}
     d86:	46c0      	nop			; (mov r8, r8)
     d88:	000025c0 	.word	0x000025c0
     d8c:	200000dc 	.word	0x200000dc
     d90:	40000800 	.word	0x40000800
     d94:	007a1200 	.word	0x007a1200
     d98:	02dc6c00 	.word	0x02dc6c00
     d9c:	00001171 	.word	0x00001171

00000da0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     da0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     da2:	490c      	ldr	r1, [pc, #48]	; (dd4 <system_clock_source_osc8m_set_config+0x34>)
     da4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     da6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     da8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     daa:	7840      	ldrb	r0, [r0, #1]
     dac:	2201      	movs	r2, #1
     dae:	4010      	ands	r0, r2
     db0:	0180      	lsls	r0, r0, #6
     db2:	2640      	movs	r6, #64	; 0x40
     db4:	43b3      	bics	r3, r6
     db6:	4303      	orrs	r3, r0
     db8:	402a      	ands	r2, r5
     dba:	01d2      	lsls	r2, r2, #7
     dbc:	2080      	movs	r0, #128	; 0x80
     dbe:	4383      	bics	r3, r0
     dc0:	4313      	orrs	r3, r2
     dc2:	2203      	movs	r2, #3
     dc4:	4022      	ands	r2, r4
     dc6:	0212      	lsls	r2, r2, #8
     dc8:	4803      	ldr	r0, [pc, #12]	; (dd8 <system_clock_source_osc8m_set_config+0x38>)
     dca:	4003      	ands	r3, r0
     dcc:	4313      	orrs	r3, r2
     dce:	620b      	str	r3, [r1, #32]
}
     dd0:	bd70      	pop	{r4, r5, r6, pc}
     dd2:	46c0      	nop			; (mov r8, r8)
     dd4:	40000800 	.word	0x40000800
     dd8:	fffffcff 	.word	0xfffffcff

00000ddc <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     ddc:	2808      	cmp	r0, #8
     dde:	d803      	bhi.n	de8 <system_clock_source_enable+0xc>
     de0:	0080      	lsls	r0, r0, #2
     de2:	4b25      	ldr	r3, [pc, #148]	; (e78 <system_clock_source_enable+0x9c>)
     de4:	581b      	ldr	r3, [r3, r0]
     de6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     de8:	2017      	movs	r0, #23
     dea:	e044      	b.n	e76 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     dec:	4a23      	ldr	r2, [pc, #140]	; (e7c <system_clock_source_enable+0xa0>)
     dee:	6a13      	ldr	r3, [r2, #32]
     df0:	2102      	movs	r1, #2
     df2:	430b      	orrs	r3, r1
     df4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     df6:	2000      	movs	r0, #0
     df8:	e03d      	b.n	e76 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     dfa:	4a20      	ldr	r2, [pc, #128]	; (e7c <system_clock_source_enable+0xa0>)
     dfc:	6993      	ldr	r3, [r2, #24]
     dfe:	2102      	movs	r1, #2
     e00:	430b      	orrs	r3, r1
     e02:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     e04:	2000      	movs	r0, #0
		break;
     e06:	e036      	b.n	e76 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     e08:	4a1c      	ldr	r2, [pc, #112]	; (e7c <system_clock_source_enable+0xa0>)
     e0a:	8a13      	ldrh	r3, [r2, #16]
     e0c:	2102      	movs	r1, #2
     e0e:	430b      	orrs	r3, r1
     e10:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     e12:	2000      	movs	r0, #0
		break;
     e14:	e02f      	b.n	e76 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     e16:	4a19      	ldr	r2, [pc, #100]	; (e7c <system_clock_source_enable+0xa0>)
     e18:	8a93      	ldrh	r3, [r2, #20]
     e1a:	2102      	movs	r1, #2
     e1c:	430b      	orrs	r3, r1
     e1e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     e20:	2000      	movs	r0, #0
		break;
     e22:	e028      	b.n	e76 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     e24:	4916      	ldr	r1, [pc, #88]	; (e80 <system_clock_source_enable+0xa4>)
     e26:	680b      	ldr	r3, [r1, #0]
     e28:	2202      	movs	r2, #2
     e2a:	4313      	orrs	r3, r2
     e2c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     e2e:	4b13      	ldr	r3, [pc, #76]	; (e7c <system_clock_source_enable+0xa0>)
     e30:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     e32:	0019      	movs	r1, r3
     e34:	320e      	adds	r2, #14
     e36:	68cb      	ldr	r3, [r1, #12]
     e38:	421a      	tst	r2, r3
     e3a:	d0fc      	beq.n	e36 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     e3c:	4a10      	ldr	r2, [pc, #64]	; (e80 <system_clock_source_enable+0xa4>)
     e3e:	6891      	ldr	r1, [r2, #8]
     e40:	4b0e      	ldr	r3, [pc, #56]	; (e7c <system_clock_source_enable+0xa0>)
     e42:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     e44:	6852      	ldr	r2, [r2, #4]
     e46:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     e48:	2200      	movs	r2, #0
     e4a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     e4c:	0019      	movs	r1, r3
     e4e:	3210      	adds	r2, #16
     e50:	68cb      	ldr	r3, [r1, #12]
     e52:	421a      	tst	r2, r3
     e54:	d0fc      	beq.n	e50 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     e56:	4b0a      	ldr	r3, [pc, #40]	; (e80 <system_clock_source_enable+0xa4>)
     e58:	681b      	ldr	r3, [r3, #0]
     e5a:	b29b      	uxth	r3, r3
     e5c:	4a07      	ldr	r2, [pc, #28]	; (e7c <system_clock_source_enable+0xa0>)
     e5e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     e60:	2000      	movs	r0, #0
     e62:	e008      	b.n	e76 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     e64:	4905      	ldr	r1, [pc, #20]	; (e7c <system_clock_source_enable+0xa0>)
     e66:	2244      	movs	r2, #68	; 0x44
     e68:	5c8b      	ldrb	r3, [r1, r2]
     e6a:	2002      	movs	r0, #2
     e6c:	4303      	orrs	r3, r0
     e6e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     e70:	2000      	movs	r0, #0
		break;
     e72:	e000      	b.n	e76 <system_clock_source_enable+0x9a>
		return STATUS_OK;
     e74:	2000      	movs	r0, #0
}
     e76:	4770      	bx	lr
     e78:	000025e4 	.word	0x000025e4
     e7c:	40000800 	.word	0x40000800
     e80:	200000dc 	.word	0x200000dc

00000e84 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     e84:	b530      	push	{r4, r5, lr}
     e86:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e88:	22c2      	movs	r2, #194	; 0xc2
     e8a:	00d2      	lsls	r2, r2, #3
     e8c:	4b1a      	ldr	r3, [pc, #104]	; (ef8 <system_clock_init+0x74>)
     e8e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     e90:	4a1a      	ldr	r2, [pc, #104]	; (efc <system_clock_init+0x78>)
     e92:	6853      	ldr	r3, [r2, #4]
     e94:	211e      	movs	r1, #30
     e96:	438b      	bics	r3, r1
     e98:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     e9a:	2301      	movs	r3, #1
     e9c:	466a      	mov	r2, sp
     e9e:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     ea0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     ea2:	4d17      	ldr	r5, [pc, #92]	; (f00 <system_clock_init+0x7c>)
     ea4:	b2e0      	uxtb	r0, r4
     ea6:	4669      	mov	r1, sp
     ea8:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     eaa:	3401      	adds	r4, #1
     eac:	2c25      	cmp	r4, #37	; 0x25
     eae:	d1f9      	bne.n	ea4 <system_clock_init+0x20>
	config->run_in_standby  = false;
     eb0:	a803      	add	r0, sp, #12
     eb2:	2400      	movs	r4, #0
     eb4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     eb6:	2501      	movs	r5, #1
     eb8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     eba:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     ebc:	4b11      	ldr	r3, [pc, #68]	; (f04 <system_clock_init+0x80>)
     ebe:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     ec0:	2006      	movs	r0, #6
     ec2:	4b11      	ldr	r3, [pc, #68]	; (f08 <system_clock_init+0x84>)
     ec4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     ec6:	4b11      	ldr	r3, [pc, #68]	; (f0c <system_clock_init+0x88>)
     ec8:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     eca:	4b11      	ldr	r3, [pc, #68]	; (f10 <system_clock_init+0x8c>)
     ecc:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     ece:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     ed0:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     ed2:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     ed4:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     ed6:	466b      	mov	r3, sp
     ed8:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35 || (WLR089)
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     eda:	2306      	movs	r3, #6
     edc:	466a      	mov	r2, sp
     ede:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     ee0:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     ee2:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     ee4:	4669      	mov	r1, sp
     ee6:	2000      	movs	r0, #0
     ee8:	4b0a      	ldr	r3, [pc, #40]	; (f14 <system_clock_init+0x90>)
     eea:	4798      	blx	r3
     eec:	2000      	movs	r0, #0
     eee:	4b0a      	ldr	r3, [pc, #40]	; (f18 <system_clock_init+0x94>)
     ef0:	4798      	blx	r3
#endif
}
     ef2:	b005      	add	sp, #20
     ef4:	bd30      	pop	{r4, r5, pc}
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	40000800 	.word	0x40000800
     efc:	41004000 	.word	0x41004000
     f00:	00001155 	.word	0x00001155
     f04:	00000da1 	.word	0x00000da1
     f08:	00000ddd 	.word	0x00000ddd
     f0c:	00000f1d 	.word	0x00000f1d
     f10:	40000400 	.word	0x40000400
     f14:	00000f41 	.word	0x00000f41
     f18:	00000ff9 	.word	0x00000ff9

00000f1c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     f1c:	4a06      	ldr	r2, [pc, #24]	; (f38 <system_gclk_init+0x1c>)
     f1e:	6993      	ldr	r3, [r2, #24]
     f20:	2108      	movs	r1, #8
     f22:	430b      	orrs	r3, r1
     f24:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     f26:	2201      	movs	r2, #1
     f28:	4b04      	ldr	r3, [pc, #16]	; (f3c <system_gclk_init+0x20>)
     f2a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     f2c:	0019      	movs	r1, r3
     f2e:	780b      	ldrb	r3, [r1, #0]
     f30:	4213      	tst	r3, r2
     f32:	d1fc      	bne.n	f2e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     f34:	4770      	bx	lr
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	40000400 	.word	0x40000400
     f3c:	40000c00 	.word	0x40000c00

00000f40 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     f40:	b570      	push	{r4, r5, r6, lr}
     f42:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     f44:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     f46:	780d      	ldrb	r5, [r1, #0]
     f48:	022d      	lsls	r5, r5, #8
     f4a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     f4c:	784b      	ldrb	r3, [r1, #1]
     f4e:	2b00      	cmp	r3, #0
     f50:	d002      	beq.n	f58 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     f52:	2380      	movs	r3, #128	; 0x80
     f54:	02db      	lsls	r3, r3, #11
     f56:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     f58:	7a4b      	ldrb	r3, [r1, #9]
     f5a:	2b00      	cmp	r3, #0
     f5c:	d002      	beq.n	f64 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     f5e:	2380      	movs	r3, #128	; 0x80
     f60:	031b      	lsls	r3, r3, #12
     f62:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     f64:	6848      	ldr	r0, [r1, #4]
     f66:	2801      	cmp	r0, #1
     f68:	d910      	bls.n	f8c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     f6a:	1e43      	subs	r3, r0, #1
     f6c:	4218      	tst	r0, r3
     f6e:	d134      	bne.n	fda <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     f70:	2802      	cmp	r0, #2
     f72:	d930      	bls.n	fd6 <system_gclk_gen_set_config+0x96>
     f74:	2302      	movs	r3, #2
     f76:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     f78:	3201      	adds	r2, #1
						mask <<= 1) {
     f7a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     f7c:	4298      	cmp	r0, r3
     f7e:	d8fb      	bhi.n	f78 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     f80:	0212      	lsls	r2, r2, #8
     f82:	4332      	orrs	r2, r6
     f84:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     f86:	2380      	movs	r3, #128	; 0x80
     f88:	035b      	lsls	r3, r3, #13
     f8a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     f8c:	7a0b      	ldrb	r3, [r1, #8]
     f8e:	2b00      	cmp	r3, #0
     f90:	d002      	beq.n	f98 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     f92:	2380      	movs	r3, #128	; 0x80
     f94:	039b      	lsls	r3, r3, #14
     f96:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f98:	4a13      	ldr	r2, [pc, #76]	; (fe8 <system_gclk_gen_set_config+0xa8>)
     f9a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     f9c:	b25b      	sxtb	r3, r3
     f9e:	2b00      	cmp	r3, #0
     fa0:	dbfb      	blt.n	f9a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
     fa2:	4b12      	ldr	r3, [pc, #72]	; (fec <system_gclk_gen_set_config+0xac>)
     fa4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     fa6:	4b12      	ldr	r3, [pc, #72]	; (ff0 <system_gclk_gen_set_config+0xb0>)
     fa8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     faa:	4a0f      	ldr	r2, [pc, #60]	; (fe8 <system_gclk_gen_set_config+0xa8>)
     fac:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     fae:	b25b      	sxtb	r3, r3
     fb0:	2b00      	cmp	r3, #0
     fb2:	dbfb      	blt.n	fac <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     fb4:	4b0c      	ldr	r3, [pc, #48]	; (fe8 <system_gclk_gen_set_config+0xa8>)
     fb6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fb8:	001a      	movs	r2, r3
     fba:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     fbc:	b25b      	sxtb	r3, r3
     fbe:	2b00      	cmp	r3, #0
     fc0:	dbfb      	blt.n	fba <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     fc2:	4a09      	ldr	r2, [pc, #36]	; (fe8 <system_gclk_gen_set_config+0xa8>)
     fc4:	6853      	ldr	r3, [r2, #4]
     fc6:	2180      	movs	r1, #128	; 0x80
     fc8:	0249      	lsls	r1, r1, #9
     fca:	400b      	ands	r3, r1
     fcc:	431d      	orrs	r5, r3
     fce:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
     fd0:	4b08      	ldr	r3, [pc, #32]	; (ff4 <system_gclk_gen_set_config+0xb4>)
     fd2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     fd4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     fd6:	2200      	movs	r2, #0
     fd8:	e7d2      	b.n	f80 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     fda:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     fdc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     fde:	2380      	movs	r3, #128	; 0x80
     fe0:	029b      	lsls	r3, r3, #10
     fe2:	431d      	orrs	r5, r3
     fe4:	e7d2      	b.n	f8c <system_gclk_gen_set_config+0x4c>
     fe6:	46c0      	nop			; (mov r8, r8)
     fe8:	40000c00 	.word	0x40000c00
     fec:	00000c9d 	.word	0x00000c9d
     ff0:	40000c08 	.word	0x40000c08
     ff4:	00000cdd 	.word	0x00000cdd

00000ff8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     ff8:	b510      	push	{r4, lr}
     ffa:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ffc:	4a0b      	ldr	r2, [pc, #44]	; (102c <system_gclk_gen_enable+0x34>)
     ffe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1000:	b25b      	sxtb	r3, r3
    1002:	2b00      	cmp	r3, #0
    1004:	dbfb      	blt.n	ffe <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1006:	4b0a      	ldr	r3, [pc, #40]	; (1030 <system_gclk_gen_enable+0x38>)
    1008:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    100a:	4b0a      	ldr	r3, [pc, #40]	; (1034 <system_gclk_gen_enable+0x3c>)
    100c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    100e:	4a07      	ldr	r2, [pc, #28]	; (102c <system_gclk_gen_enable+0x34>)
    1010:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1012:	b25b      	sxtb	r3, r3
    1014:	2b00      	cmp	r3, #0
    1016:	dbfb      	blt.n	1010 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1018:	4a04      	ldr	r2, [pc, #16]	; (102c <system_gclk_gen_enable+0x34>)
    101a:	6851      	ldr	r1, [r2, #4]
    101c:	2380      	movs	r3, #128	; 0x80
    101e:	025b      	lsls	r3, r3, #9
    1020:	430b      	orrs	r3, r1
    1022:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1024:	4b04      	ldr	r3, [pc, #16]	; (1038 <system_gclk_gen_enable+0x40>)
    1026:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1028:	bd10      	pop	{r4, pc}
    102a:	46c0      	nop			; (mov r8, r8)
    102c:	40000c00 	.word	0x40000c00
    1030:	00000c9d 	.word	0x00000c9d
    1034:	40000c04 	.word	0x40000c04
    1038:	00000cdd 	.word	0x00000cdd

0000103c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    103c:	b570      	push	{r4, r5, r6, lr}
    103e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1040:	4a1a      	ldr	r2, [pc, #104]	; (10ac <system_gclk_gen_get_hz+0x70>)
    1042:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1044:	b25b      	sxtb	r3, r3
    1046:	2b00      	cmp	r3, #0
    1048:	dbfb      	blt.n	1042 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    104a:	4b19      	ldr	r3, [pc, #100]	; (10b0 <system_gclk_gen_get_hz+0x74>)
    104c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    104e:	4b19      	ldr	r3, [pc, #100]	; (10b4 <system_gclk_gen_get_hz+0x78>)
    1050:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1052:	4a16      	ldr	r2, [pc, #88]	; (10ac <system_gclk_gen_get_hz+0x70>)
    1054:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1056:	b25b      	sxtb	r3, r3
    1058:	2b00      	cmp	r3, #0
    105a:	dbfb      	blt.n	1054 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    105c:	4e13      	ldr	r6, [pc, #76]	; (10ac <system_gclk_gen_get_hz+0x70>)
    105e:	6870      	ldr	r0, [r6, #4]
    1060:	04c0      	lsls	r0, r0, #19
    1062:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1064:	4b14      	ldr	r3, [pc, #80]	; (10b8 <system_gclk_gen_get_hz+0x7c>)
    1066:	4798      	blx	r3
    1068:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    106a:	4b12      	ldr	r3, [pc, #72]	; (10b4 <system_gclk_gen_get_hz+0x78>)
    106c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    106e:	6876      	ldr	r6, [r6, #4]
    1070:	02f6      	lsls	r6, r6, #11
    1072:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1074:	4b11      	ldr	r3, [pc, #68]	; (10bc <system_gclk_gen_get_hz+0x80>)
    1076:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1078:	4a0c      	ldr	r2, [pc, #48]	; (10ac <system_gclk_gen_get_hz+0x70>)
    107a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    107c:	b25b      	sxtb	r3, r3
    107e:	2b00      	cmp	r3, #0
    1080:	dbfb      	blt.n	107a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1082:	4b0a      	ldr	r3, [pc, #40]	; (10ac <system_gclk_gen_get_hz+0x70>)
    1084:	689c      	ldr	r4, [r3, #8]
    1086:	0224      	lsls	r4, r4, #8
    1088:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    108a:	4b0d      	ldr	r3, [pc, #52]	; (10c0 <system_gclk_gen_get_hz+0x84>)
    108c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    108e:	2e00      	cmp	r6, #0
    1090:	d107      	bne.n	10a2 <system_gclk_gen_get_hz+0x66>
    1092:	2c01      	cmp	r4, #1
    1094:	d907      	bls.n	10a6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1096:	0021      	movs	r1, r4
    1098:	0028      	movs	r0, r5
    109a:	4b0a      	ldr	r3, [pc, #40]	; (10c4 <system_gclk_gen_get_hz+0x88>)
    109c:	4798      	blx	r3
    109e:	0005      	movs	r5, r0
    10a0:	e001      	b.n	10a6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    10a2:	3401      	adds	r4, #1
    10a4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    10a6:	0028      	movs	r0, r5
    10a8:	bd70      	pop	{r4, r5, r6, pc}
    10aa:	46c0      	nop			; (mov r8, r8)
    10ac:	40000c00 	.word	0x40000c00
    10b0:	00000c9d 	.word	0x00000c9d
    10b4:	40000c04 	.word	0x40000c04
    10b8:	00000d0d 	.word	0x00000d0d
    10bc:	40000c08 	.word	0x40000c08
    10c0:	00000cdd 	.word	0x00000cdd
    10c4:	000013ed 	.word	0x000013ed

000010c8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    10c8:	b510      	push	{r4, lr}
    10ca:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    10cc:	4b06      	ldr	r3, [pc, #24]	; (10e8 <system_gclk_chan_enable+0x20>)
    10ce:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    10d0:	4b06      	ldr	r3, [pc, #24]	; (10ec <system_gclk_chan_enable+0x24>)
    10d2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    10d4:	4a06      	ldr	r2, [pc, #24]	; (10f0 <system_gclk_chan_enable+0x28>)
    10d6:	8853      	ldrh	r3, [r2, #2]
    10d8:	2180      	movs	r1, #128	; 0x80
    10da:	01c9      	lsls	r1, r1, #7
    10dc:	430b      	orrs	r3, r1
    10de:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    10e0:	4b04      	ldr	r3, [pc, #16]	; (10f4 <system_gclk_chan_enable+0x2c>)
    10e2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    10e4:	bd10      	pop	{r4, pc}
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	00000c9d 	.word	0x00000c9d
    10ec:	40000c02 	.word	0x40000c02
    10f0:	40000c00 	.word	0x40000c00
    10f4:	00000cdd 	.word	0x00000cdd

000010f8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    10f8:	b510      	push	{r4, lr}
    10fa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    10fc:	4b0f      	ldr	r3, [pc, #60]	; (113c <system_gclk_chan_disable+0x44>)
    10fe:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1100:	4b0f      	ldr	r3, [pc, #60]	; (1140 <system_gclk_chan_disable+0x48>)
    1102:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1104:	4a0f      	ldr	r2, [pc, #60]	; (1144 <system_gclk_chan_disable+0x4c>)
    1106:	8853      	ldrh	r3, [r2, #2]
    1108:	051b      	lsls	r3, r3, #20
    110a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    110c:	8853      	ldrh	r3, [r2, #2]
    110e:	490e      	ldr	r1, [pc, #56]	; (1148 <system_gclk_chan_disable+0x50>)
    1110:	400b      	ands	r3, r1
    1112:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1114:	8853      	ldrh	r3, [r2, #2]
    1116:	490d      	ldr	r1, [pc, #52]	; (114c <system_gclk_chan_disable+0x54>)
    1118:	400b      	ands	r3, r1
    111a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    111c:	0011      	movs	r1, r2
    111e:	2280      	movs	r2, #128	; 0x80
    1120:	01d2      	lsls	r2, r2, #7
    1122:	884b      	ldrh	r3, [r1, #2]
    1124:	4213      	tst	r3, r2
    1126:	d1fc      	bne.n	1122 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1128:	4906      	ldr	r1, [pc, #24]	; (1144 <system_gclk_chan_disable+0x4c>)
    112a:	884a      	ldrh	r2, [r1, #2]
    112c:	0203      	lsls	r3, r0, #8
    112e:	4806      	ldr	r0, [pc, #24]	; (1148 <system_gclk_chan_disable+0x50>)
    1130:	4002      	ands	r2, r0
    1132:	4313      	orrs	r3, r2
    1134:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1136:	4b06      	ldr	r3, [pc, #24]	; (1150 <system_gclk_chan_disable+0x58>)
    1138:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    113a:	bd10      	pop	{r4, pc}
    113c:	00000c9d 	.word	0x00000c9d
    1140:	40000c02 	.word	0x40000c02
    1144:	40000c00 	.word	0x40000c00
    1148:	fffff0ff 	.word	0xfffff0ff
    114c:	ffffbfff 	.word	0xffffbfff
    1150:	00000cdd 	.word	0x00000cdd

00001154 <system_gclk_chan_set_config>:
{
    1154:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1156:	780c      	ldrb	r4, [r1, #0]
    1158:	0224      	lsls	r4, r4, #8
    115a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    115c:	4b02      	ldr	r3, [pc, #8]	; (1168 <system_gclk_chan_set_config+0x14>)
    115e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1160:	b2a4      	uxth	r4, r4
    1162:	4b02      	ldr	r3, [pc, #8]	; (116c <system_gclk_chan_set_config+0x18>)
    1164:	805c      	strh	r4, [r3, #2]
}
    1166:	bd10      	pop	{r4, pc}
    1168:	000010f9 	.word	0x000010f9
    116c:	40000c00 	.word	0x40000c00

00001170 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1170:	b510      	push	{r4, lr}
    1172:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1174:	4b06      	ldr	r3, [pc, #24]	; (1190 <system_gclk_chan_get_hz+0x20>)
    1176:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1178:	4b06      	ldr	r3, [pc, #24]	; (1194 <system_gclk_chan_get_hz+0x24>)
    117a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    117c:	4b06      	ldr	r3, [pc, #24]	; (1198 <system_gclk_chan_get_hz+0x28>)
    117e:	885c      	ldrh	r4, [r3, #2]
    1180:	0524      	lsls	r4, r4, #20
    1182:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1184:	4b05      	ldr	r3, [pc, #20]	; (119c <system_gclk_chan_get_hz+0x2c>)
    1186:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1188:	0020      	movs	r0, r4
    118a:	4b05      	ldr	r3, [pc, #20]	; (11a0 <system_gclk_chan_get_hz+0x30>)
    118c:	4798      	blx	r3
}
    118e:	bd10      	pop	{r4, pc}
    1190:	00000c9d 	.word	0x00000c9d
    1194:	40000c02 	.word	0x40000c02
    1198:	40000c00 	.word	0x40000c00
    119c:	00000cdd 	.word	0x00000cdd
    11a0:	0000103d 	.word	0x0000103d

000011a4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    11a4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    11a6:	78d3      	ldrb	r3, [r2, #3]
    11a8:	2b00      	cmp	r3, #0
    11aa:	d135      	bne.n	1218 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    11ac:	7813      	ldrb	r3, [r2, #0]
    11ae:	2b80      	cmp	r3, #128	; 0x80
    11b0:	d029      	beq.n	1206 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    11b2:	061b      	lsls	r3, r3, #24
    11b4:	2480      	movs	r4, #128	; 0x80
    11b6:	0264      	lsls	r4, r4, #9
    11b8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    11ba:	7854      	ldrb	r4, [r2, #1]
    11bc:	2502      	movs	r5, #2
    11be:	43ac      	bics	r4, r5
    11c0:	d106      	bne.n	11d0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    11c2:	7894      	ldrb	r4, [r2, #2]
    11c4:	2c00      	cmp	r4, #0
    11c6:	d120      	bne.n	120a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    11c8:	2480      	movs	r4, #128	; 0x80
    11ca:	02a4      	lsls	r4, r4, #10
    11cc:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    11ce:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    11d0:	7854      	ldrb	r4, [r2, #1]
    11d2:	3c01      	subs	r4, #1
    11d4:	2c01      	cmp	r4, #1
    11d6:	d91c      	bls.n	1212 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    11d8:	040d      	lsls	r5, r1, #16
    11da:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    11dc:	24a0      	movs	r4, #160	; 0xa0
    11de:	05e4      	lsls	r4, r4, #23
    11e0:	432c      	orrs	r4, r5
    11e2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    11e4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    11e6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    11e8:	24d0      	movs	r4, #208	; 0xd0
    11ea:	0624      	lsls	r4, r4, #24
    11ec:	432c      	orrs	r4, r5
    11ee:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    11f0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    11f2:	78d4      	ldrb	r4, [r2, #3]
    11f4:	2c00      	cmp	r4, #0
    11f6:	d122      	bne.n	123e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    11f8:	035b      	lsls	r3, r3, #13
    11fa:	d51c      	bpl.n	1236 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    11fc:	7893      	ldrb	r3, [r2, #2]
    11fe:	2b01      	cmp	r3, #1
    1200:	d01e      	beq.n	1240 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1202:	6141      	str	r1, [r0, #20]
    1204:	e017      	b.n	1236 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1206:	2300      	movs	r3, #0
    1208:	e7d7      	b.n	11ba <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    120a:	24c0      	movs	r4, #192	; 0xc0
    120c:	02e4      	lsls	r4, r4, #11
    120e:	4323      	orrs	r3, r4
    1210:	e7dd      	b.n	11ce <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1212:	4c0d      	ldr	r4, [pc, #52]	; (1248 <_system_pinmux_config+0xa4>)
    1214:	4023      	ands	r3, r4
    1216:	e7df      	b.n	11d8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1218:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    121a:	040c      	lsls	r4, r1, #16
    121c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    121e:	23a0      	movs	r3, #160	; 0xa0
    1220:	05db      	lsls	r3, r3, #23
    1222:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1224:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1226:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1228:	23d0      	movs	r3, #208	; 0xd0
    122a:	061b      	lsls	r3, r3, #24
    122c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    122e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1230:	78d3      	ldrb	r3, [r2, #3]
    1232:	2b00      	cmp	r3, #0
    1234:	d103      	bne.n	123e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1236:	7853      	ldrb	r3, [r2, #1]
    1238:	3b01      	subs	r3, #1
    123a:	2b01      	cmp	r3, #1
    123c:	d902      	bls.n	1244 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    123e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1240:	6181      	str	r1, [r0, #24]
    1242:	e7f8      	b.n	1236 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1244:	6081      	str	r1, [r0, #8]
}
    1246:	e7fa      	b.n	123e <_system_pinmux_config+0x9a>
    1248:	fffbffff 	.word	0xfffbffff

0000124c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    124c:	b510      	push	{r4, lr}
    124e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1250:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1252:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1254:	2900      	cmp	r1, #0
    1256:	d104      	bne.n	1262 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1258:	0943      	lsrs	r3, r0, #5
    125a:	01db      	lsls	r3, r3, #7
    125c:	4905      	ldr	r1, [pc, #20]	; (1274 <system_pinmux_pin_set_config+0x28>)
    125e:	468c      	mov	ip, r1
    1260:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1262:	241f      	movs	r4, #31
    1264:	4020      	ands	r0, r4
    1266:	2101      	movs	r1, #1
    1268:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    126a:	0018      	movs	r0, r3
    126c:	4b02      	ldr	r3, [pc, #8]	; (1278 <system_pinmux_pin_set_config+0x2c>)
    126e:	4798      	blx	r3
}
    1270:	bd10      	pop	{r4, pc}
    1272:	46c0      	nop			; (mov r8, r8)
    1274:	41004400 	.word	0x41004400
    1278:	000011a5 	.word	0x000011a5

0000127c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    127c:	4770      	bx	lr
	...

00001280 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1280:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1282:	4b05      	ldr	r3, [pc, #20]	; (1298 <system_init+0x18>)
    1284:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1286:	4b05      	ldr	r3, [pc, #20]	; (129c <system_init+0x1c>)
    1288:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    128a:	4b05      	ldr	r3, [pc, #20]	; (12a0 <system_init+0x20>)
    128c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    128e:	4b05      	ldr	r3, [pc, #20]	; (12a4 <system_init+0x24>)
    1290:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1292:	4b05      	ldr	r3, [pc, #20]	; (12a8 <system_init+0x28>)
    1294:	4798      	blx	r3
}
    1296:	bd10      	pop	{r4, pc}
    1298:	00000e85 	.word	0x00000e85
    129c:	00000c99 	.word	0x00000c99
    12a0:	0000127d 	.word	0x0000127d
    12a4:	0000127d 	.word	0x0000127d
    12a8:	0000127d 	.word	0x0000127d

000012ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    12ac:	e7fe      	b.n	12ac <Dummy_Handler>
	...

000012b0 <Reset_Handler>:
{
    12b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    12b2:	4a2a      	ldr	r2, [pc, #168]	; (135c <Reset_Handler+0xac>)
    12b4:	4b2a      	ldr	r3, [pc, #168]	; (1360 <Reset_Handler+0xb0>)
    12b6:	429a      	cmp	r2, r3
    12b8:	d011      	beq.n	12de <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    12ba:	001a      	movs	r2, r3
    12bc:	4b29      	ldr	r3, [pc, #164]	; (1364 <Reset_Handler+0xb4>)
    12be:	429a      	cmp	r2, r3
    12c0:	d20d      	bcs.n	12de <Reset_Handler+0x2e>
    12c2:	4a29      	ldr	r2, [pc, #164]	; (1368 <Reset_Handler+0xb8>)
    12c4:	3303      	adds	r3, #3
    12c6:	1a9b      	subs	r3, r3, r2
    12c8:	089b      	lsrs	r3, r3, #2
    12ca:	3301      	adds	r3, #1
    12cc:	009b      	lsls	r3, r3, #2
    12ce:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    12d0:	4823      	ldr	r0, [pc, #140]	; (1360 <Reset_Handler+0xb0>)
    12d2:	4922      	ldr	r1, [pc, #136]	; (135c <Reset_Handler+0xac>)
    12d4:	588c      	ldr	r4, [r1, r2]
    12d6:	5084      	str	r4, [r0, r2]
    12d8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    12da:	429a      	cmp	r2, r3
    12dc:	d1fa      	bne.n	12d4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    12de:	4a23      	ldr	r2, [pc, #140]	; (136c <Reset_Handler+0xbc>)
    12e0:	4b23      	ldr	r3, [pc, #140]	; (1370 <Reset_Handler+0xc0>)
    12e2:	429a      	cmp	r2, r3
    12e4:	d20a      	bcs.n	12fc <Reset_Handler+0x4c>
    12e6:	43d3      	mvns	r3, r2
    12e8:	4921      	ldr	r1, [pc, #132]	; (1370 <Reset_Handler+0xc0>)
    12ea:	185b      	adds	r3, r3, r1
    12ec:	2103      	movs	r1, #3
    12ee:	438b      	bics	r3, r1
    12f0:	3304      	adds	r3, #4
    12f2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    12f4:	2100      	movs	r1, #0
    12f6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    12f8:	4293      	cmp	r3, r2
    12fa:	d1fc      	bne.n	12f6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    12fc:	4a1d      	ldr	r2, [pc, #116]	; (1374 <Reset_Handler+0xc4>)
    12fe:	21ff      	movs	r1, #255	; 0xff
    1300:	4b1d      	ldr	r3, [pc, #116]	; (1378 <Reset_Handler+0xc8>)
    1302:	438b      	bics	r3, r1
    1304:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1306:	39fd      	subs	r1, #253	; 0xfd
    1308:	2390      	movs	r3, #144	; 0x90
    130a:	005b      	lsls	r3, r3, #1
    130c:	4a1b      	ldr	r2, [pc, #108]	; (137c <Reset_Handler+0xcc>)
    130e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1310:	4a1b      	ldr	r2, [pc, #108]	; (1380 <Reset_Handler+0xd0>)
    1312:	78d3      	ldrb	r3, [r2, #3]
    1314:	2503      	movs	r5, #3
    1316:	43ab      	bics	r3, r5
    1318:	2402      	movs	r4, #2
    131a:	4323      	orrs	r3, r4
    131c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    131e:	78d3      	ldrb	r3, [r2, #3]
    1320:	270c      	movs	r7, #12
    1322:	43bb      	bics	r3, r7
    1324:	2608      	movs	r6, #8
    1326:	4333      	orrs	r3, r6
    1328:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    132a:	4b16      	ldr	r3, [pc, #88]	; (1384 <Reset_Handler+0xd4>)
    132c:	7b98      	ldrb	r0, [r3, #14]
    132e:	2230      	movs	r2, #48	; 0x30
    1330:	4390      	bics	r0, r2
    1332:	2220      	movs	r2, #32
    1334:	4310      	orrs	r0, r2
    1336:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1338:	7b99      	ldrb	r1, [r3, #14]
    133a:	43b9      	bics	r1, r7
    133c:	4331      	orrs	r1, r6
    133e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1340:	7b9a      	ldrb	r2, [r3, #14]
    1342:	43aa      	bics	r2, r5
    1344:	4322      	orrs	r2, r4
    1346:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1348:	4a0f      	ldr	r2, [pc, #60]	; (1388 <Reset_Handler+0xd8>)
    134a:	6853      	ldr	r3, [r2, #4]
    134c:	2180      	movs	r1, #128	; 0x80
    134e:	430b      	orrs	r3, r1
    1350:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1352:	4b0e      	ldr	r3, [pc, #56]	; (138c <Reset_Handler+0xdc>)
    1354:	4798      	blx	r3
        main();
    1356:	4b0e      	ldr	r3, [pc, #56]	; (1390 <Reset_Handler+0xe0>)
    1358:	4798      	blx	r3
    135a:	e7fe      	b.n	135a <Reset_Handler+0xaa>
    135c:	000026c0 	.word	0x000026c0
    1360:	20000000 	.word	0x20000000
    1364:	20000068 	.word	0x20000068
    1368:	20000004 	.word	0x20000004
    136c:	20000068 	.word	0x20000068
    1370:	20000128 	.word	0x20000128
    1374:	e000ed00 	.word	0xe000ed00
    1378:	00000000 	.word	0x00000000
    137c:	41007000 	.word	0x41007000
    1380:	41005000 	.word	0x41005000
    1384:	41004800 	.word	0x41004800
    1388:	41004000 	.word	0x41004000
    138c:	00001559 	.word	0x00001559
    1390:	000013d1 	.word	0x000013d1

00001394 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1394:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1396:	4a06      	ldr	r2, [pc, #24]	; (13b0 <_sbrk+0x1c>)
    1398:	6812      	ldr	r2, [r2, #0]
    139a:	2a00      	cmp	r2, #0
    139c:	d004      	beq.n	13a8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    139e:	4a04      	ldr	r2, [pc, #16]	; (13b0 <_sbrk+0x1c>)
    13a0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    13a2:	18c3      	adds	r3, r0, r3
    13a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    13a6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    13a8:	4902      	ldr	r1, [pc, #8]	; (13b4 <_sbrk+0x20>)
    13aa:	4a01      	ldr	r2, [pc, #4]	; (13b0 <_sbrk+0x1c>)
    13ac:	6011      	str	r1, [r2, #0]
    13ae:	e7f6      	b.n	139e <_sbrk+0xa>
    13b0:	200000f4 	.word	0x200000f4
    13b4:	20002128 	.word	0x20002128

000013b8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    13b8:	2001      	movs	r0, #1
    13ba:	4240      	negs	r0, r0
    13bc:	4770      	bx	lr

000013be <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    13be:	2380      	movs	r3, #128	; 0x80
    13c0:	019b      	lsls	r3, r3, #6
    13c2:	604b      	str	r3, [r1, #4]

	return 0;
}
    13c4:	2000      	movs	r0, #0
    13c6:	4770      	bx	lr

000013c8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    13c8:	2001      	movs	r0, #1
    13ca:	4770      	bx	lr

000013cc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    13cc:	2000      	movs	r0, #0
    13ce:	4770      	bx	lr

000013d0 <main>:
#include <asf.h>
#include "console.h"
#include "spi_slave.h"

int main (void)
{
    13d0:	b510      	push	{r4, lr}
	system_init();
    13d2:	4b03      	ldr	r3, [pc, #12]	; (13e0 <main+0x10>)
    13d4:	4798      	blx	r3
	console_init();
    13d6:	4b03      	ldr	r3, [pc, #12]	; (13e4 <main+0x14>)
    13d8:	4798      	blx	r3
	spi_slave_init();
    13da:	4b03      	ldr	r3, [pc, #12]	; (13e8 <main+0x18>)
    13dc:	4798      	blx	r3
    13de:	e7fe      	b.n	13de <main+0xe>
    13e0:	00001281 	.word	0x00001281
    13e4:	00000159 	.word	0x00000159
    13e8:	0000025d 	.word	0x0000025d

000013ec <__udivsi3>:
    13ec:	2200      	movs	r2, #0
    13ee:	0843      	lsrs	r3, r0, #1
    13f0:	428b      	cmp	r3, r1
    13f2:	d374      	bcc.n	14de <__udivsi3+0xf2>
    13f4:	0903      	lsrs	r3, r0, #4
    13f6:	428b      	cmp	r3, r1
    13f8:	d35f      	bcc.n	14ba <__udivsi3+0xce>
    13fa:	0a03      	lsrs	r3, r0, #8
    13fc:	428b      	cmp	r3, r1
    13fe:	d344      	bcc.n	148a <__udivsi3+0x9e>
    1400:	0b03      	lsrs	r3, r0, #12
    1402:	428b      	cmp	r3, r1
    1404:	d328      	bcc.n	1458 <__udivsi3+0x6c>
    1406:	0c03      	lsrs	r3, r0, #16
    1408:	428b      	cmp	r3, r1
    140a:	d30d      	bcc.n	1428 <__udivsi3+0x3c>
    140c:	22ff      	movs	r2, #255	; 0xff
    140e:	0209      	lsls	r1, r1, #8
    1410:	ba12      	rev	r2, r2
    1412:	0c03      	lsrs	r3, r0, #16
    1414:	428b      	cmp	r3, r1
    1416:	d302      	bcc.n	141e <__udivsi3+0x32>
    1418:	1212      	asrs	r2, r2, #8
    141a:	0209      	lsls	r1, r1, #8
    141c:	d065      	beq.n	14ea <__udivsi3+0xfe>
    141e:	0b03      	lsrs	r3, r0, #12
    1420:	428b      	cmp	r3, r1
    1422:	d319      	bcc.n	1458 <__udivsi3+0x6c>
    1424:	e000      	b.n	1428 <__udivsi3+0x3c>
    1426:	0a09      	lsrs	r1, r1, #8
    1428:	0bc3      	lsrs	r3, r0, #15
    142a:	428b      	cmp	r3, r1
    142c:	d301      	bcc.n	1432 <__udivsi3+0x46>
    142e:	03cb      	lsls	r3, r1, #15
    1430:	1ac0      	subs	r0, r0, r3
    1432:	4152      	adcs	r2, r2
    1434:	0b83      	lsrs	r3, r0, #14
    1436:	428b      	cmp	r3, r1
    1438:	d301      	bcc.n	143e <__udivsi3+0x52>
    143a:	038b      	lsls	r3, r1, #14
    143c:	1ac0      	subs	r0, r0, r3
    143e:	4152      	adcs	r2, r2
    1440:	0b43      	lsrs	r3, r0, #13
    1442:	428b      	cmp	r3, r1
    1444:	d301      	bcc.n	144a <__udivsi3+0x5e>
    1446:	034b      	lsls	r3, r1, #13
    1448:	1ac0      	subs	r0, r0, r3
    144a:	4152      	adcs	r2, r2
    144c:	0b03      	lsrs	r3, r0, #12
    144e:	428b      	cmp	r3, r1
    1450:	d301      	bcc.n	1456 <__udivsi3+0x6a>
    1452:	030b      	lsls	r3, r1, #12
    1454:	1ac0      	subs	r0, r0, r3
    1456:	4152      	adcs	r2, r2
    1458:	0ac3      	lsrs	r3, r0, #11
    145a:	428b      	cmp	r3, r1
    145c:	d301      	bcc.n	1462 <__udivsi3+0x76>
    145e:	02cb      	lsls	r3, r1, #11
    1460:	1ac0      	subs	r0, r0, r3
    1462:	4152      	adcs	r2, r2
    1464:	0a83      	lsrs	r3, r0, #10
    1466:	428b      	cmp	r3, r1
    1468:	d301      	bcc.n	146e <__udivsi3+0x82>
    146a:	028b      	lsls	r3, r1, #10
    146c:	1ac0      	subs	r0, r0, r3
    146e:	4152      	adcs	r2, r2
    1470:	0a43      	lsrs	r3, r0, #9
    1472:	428b      	cmp	r3, r1
    1474:	d301      	bcc.n	147a <__udivsi3+0x8e>
    1476:	024b      	lsls	r3, r1, #9
    1478:	1ac0      	subs	r0, r0, r3
    147a:	4152      	adcs	r2, r2
    147c:	0a03      	lsrs	r3, r0, #8
    147e:	428b      	cmp	r3, r1
    1480:	d301      	bcc.n	1486 <__udivsi3+0x9a>
    1482:	020b      	lsls	r3, r1, #8
    1484:	1ac0      	subs	r0, r0, r3
    1486:	4152      	adcs	r2, r2
    1488:	d2cd      	bcs.n	1426 <__udivsi3+0x3a>
    148a:	09c3      	lsrs	r3, r0, #7
    148c:	428b      	cmp	r3, r1
    148e:	d301      	bcc.n	1494 <__udivsi3+0xa8>
    1490:	01cb      	lsls	r3, r1, #7
    1492:	1ac0      	subs	r0, r0, r3
    1494:	4152      	adcs	r2, r2
    1496:	0983      	lsrs	r3, r0, #6
    1498:	428b      	cmp	r3, r1
    149a:	d301      	bcc.n	14a0 <__udivsi3+0xb4>
    149c:	018b      	lsls	r3, r1, #6
    149e:	1ac0      	subs	r0, r0, r3
    14a0:	4152      	adcs	r2, r2
    14a2:	0943      	lsrs	r3, r0, #5
    14a4:	428b      	cmp	r3, r1
    14a6:	d301      	bcc.n	14ac <__udivsi3+0xc0>
    14a8:	014b      	lsls	r3, r1, #5
    14aa:	1ac0      	subs	r0, r0, r3
    14ac:	4152      	adcs	r2, r2
    14ae:	0903      	lsrs	r3, r0, #4
    14b0:	428b      	cmp	r3, r1
    14b2:	d301      	bcc.n	14b8 <__udivsi3+0xcc>
    14b4:	010b      	lsls	r3, r1, #4
    14b6:	1ac0      	subs	r0, r0, r3
    14b8:	4152      	adcs	r2, r2
    14ba:	08c3      	lsrs	r3, r0, #3
    14bc:	428b      	cmp	r3, r1
    14be:	d301      	bcc.n	14c4 <__udivsi3+0xd8>
    14c0:	00cb      	lsls	r3, r1, #3
    14c2:	1ac0      	subs	r0, r0, r3
    14c4:	4152      	adcs	r2, r2
    14c6:	0883      	lsrs	r3, r0, #2
    14c8:	428b      	cmp	r3, r1
    14ca:	d301      	bcc.n	14d0 <__udivsi3+0xe4>
    14cc:	008b      	lsls	r3, r1, #2
    14ce:	1ac0      	subs	r0, r0, r3
    14d0:	4152      	adcs	r2, r2
    14d2:	0843      	lsrs	r3, r0, #1
    14d4:	428b      	cmp	r3, r1
    14d6:	d301      	bcc.n	14dc <__udivsi3+0xf0>
    14d8:	004b      	lsls	r3, r1, #1
    14da:	1ac0      	subs	r0, r0, r3
    14dc:	4152      	adcs	r2, r2
    14de:	1a41      	subs	r1, r0, r1
    14e0:	d200      	bcs.n	14e4 <__udivsi3+0xf8>
    14e2:	4601      	mov	r1, r0
    14e4:	4152      	adcs	r2, r2
    14e6:	4610      	mov	r0, r2
    14e8:	4770      	bx	lr
    14ea:	e7ff      	b.n	14ec <__udivsi3+0x100>
    14ec:	b501      	push	{r0, lr}
    14ee:	2000      	movs	r0, #0
    14f0:	f000 f806 	bl	1500 <__aeabi_idiv0>
    14f4:	bd02      	pop	{r1, pc}
    14f6:	46c0      	nop			; (mov r8, r8)

000014f8 <__aeabi_uidivmod>:
    14f8:	2900      	cmp	r1, #0
    14fa:	d0f7      	beq.n	14ec <__udivsi3+0x100>
    14fc:	e776      	b.n	13ec <__udivsi3>
    14fe:	4770      	bx	lr

00001500 <__aeabi_idiv0>:
    1500:	4770      	bx	lr
    1502:	46c0      	nop			; (mov r8, r8)

00001504 <__aeabi_lmul>:
    1504:	b5f0      	push	{r4, r5, r6, r7, lr}
    1506:	46ce      	mov	lr, r9
    1508:	4647      	mov	r7, r8
    150a:	0415      	lsls	r5, r2, #16
    150c:	0c2d      	lsrs	r5, r5, #16
    150e:	002e      	movs	r6, r5
    1510:	b580      	push	{r7, lr}
    1512:	0407      	lsls	r7, r0, #16
    1514:	0c14      	lsrs	r4, r2, #16
    1516:	0c3f      	lsrs	r7, r7, #16
    1518:	4699      	mov	r9, r3
    151a:	0c03      	lsrs	r3, r0, #16
    151c:	437e      	muls	r6, r7
    151e:	435d      	muls	r5, r3
    1520:	4367      	muls	r7, r4
    1522:	4363      	muls	r3, r4
    1524:	197f      	adds	r7, r7, r5
    1526:	0c34      	lsrs	r4, r6, #16
    1528:	19e4      	adds	r4, r4, r7
    152a:	469c      	mov	ip, r3
    152c:	42a5      	cmp	r5, r4
    152e:	d903      	bls.n	1538 <__aeabi_lmul+0x34>
    1530:	2380      	movs	r3, #128	; 0x80
    1532:	025b      	lsls	r3, r3, #9
    1534:	4698      	mov	r8, r3
    1536:	44c4      	add	ip, r8
    1538:	464b      	mov	r3, r9
    153a:	4351      	muls	r1, r2
    153c:	4343      	muls	r3, r0
    153e:	0436      	lsls	r6, r6, #16
    1540:	0c36      	lsrs	r6, r6, #16
    1542:	0c25      	lsrs	r5, r4, #16
    1544:	0424      	lsls	r4, r4, #16
    1546:	4465      	add	r5, ip
    1548:	19a4      	adds	r4, r4, r6
    154a:	1859      	adds	r1, r3, r1
    154c:	1949      	adds	r1, r1, r5
    154e:	0020      	movs	r0, r4
    1550:	bc0c      	pop	{r2, r3}
    1552:	4690      	mov	r8, r2
    1554:	4699      	mov	r9, r3
    1556:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001558 <__libc_init_array>:
    1558:	b570      	push	{r4, r5, r6, lr}
    155a:	2600      	movs	r6, #0
    155c:	4d0c      	ldr	r5, [pc, #48]	; (1590 <__libc_init_array+0x38>)
    155e:	4c0d      	ldr	r4, [pc, #52]	; (1594 <__libc_init_array+0x3c>)
    1560:	1b64      	subs	r4, r4, r5
    1562:	10a4      	asrs	r4, r4, #2
    1564:	42a6      	cmp	r6, r4
    1566:	d109      	bne.n	157c <__libc_init_array+0x24>
    1568:	2600      	movs	r6, #0
    156a:	f001 f899 	bl	26a0 <_init>
    156e:	4d0a      	ldr	r5, [pc, #40]	; (1598 <__libc_init_array+0x40>)
    1570:	4c0a      	ldr	r4, [pc, #40]	; (159c <__libc_init_array+0x44>)
    1572:	1b64      	subs	r4, r4, r5
    1574:	10a4      	asrs	r4, r4, #2
    1576:	42a6      	cmp	r6, r4
    1578:	d105      	bne.n	1586 <__libc_init_array+0x2e>
    157a:	bd70      	pop	{r4, r5, r6, pc}
    157c:	00b3      	lsls	r3, r6, #2
    157e:	58eb      	ldr	r3, [r5, r3]
    1580:	4798      	blx	r3
    1582:	3601      	adds	r6, #1
    1584:	e7ee      	b.n	1564 <__libc_init_array+0xc>
    1586:	00b3      	lsls	r3, r6, #2
    1588:	58eb      	ldr	r3, [r5, r3]
    158a:	4798      	blx	r3
    158c:	3601      	adds	r6, #1
    158e:	e7f2      	b.n	1576 <__libc_init_array+0x1e>
    1590:	000026ac 	.word	0x000026ac
    1594:	000026ac 	.word	0x000026ac
    1598:	000026ac 	.word	0x000026ac
    159c:	000026b0 	.word	0x000026b0

000015a0 <memset>:
    15a0:	0003      	movs	r3, r0
    15a2:	1882      	adds	r2, r0, r2
    15a4:	4293      	cmp	r3, r2
    15a6:	d100      	bne.n	15aa <memset+0xa>
    15a8:	4770      	bx	lr
    15aa:	7019      	strb	r1, [r3, #0]
    15ac:	3301      	adds	r3, #1
    15ae:	e7f9      	b.n	15a4 <memset+0x4>

000015b0 <iprintf>:
    15b0:	b40f      	push	{r0, r1, r2, r3}
    15b2:	4b0b      	ldr	r3, [pc, #44]	; (15e0 <iprintf+0x30>)
    15b4:	b513      	push	{r0, r1, r4, lr}
    15b6:	681c      	ldr	r4, [r3, #0]
    15b8:	2c00      	cmp	r4, #0
    15ba:	d005      	beq.n	15c8 <iprintf+0x18>
    15bc:	69a3      	ldr	r3, [r4, #24]
    15be:	2b00      	cmp	r3, #0
    15c0:	d102      	bne.n	15c8 <iprintf+0x18>
    15c2:	0020      	movs	r0, r4
    15c4:	f000 f9bc 	bl	1940 <__sinit>
    15c8:	ab05      	add	r3, sp, #20
    15ca:	9a04      	ldr	r2, [sp, #16]
    15cc:	68a1      	ldr	r1, [r4, #8]
    15ce:	0020      	movs	r0, r4
    15d0:	9301      	str	r3, [sp, #4]
    15d2:	f000 fb91 	bl	1cf8 <_vfiprintf_r>
    15d6:	bc16      	pop	{r1, r2, r4}
    15d8:	bc08      	pop	{r3}
    15da:	b004      	add	sp, #16
    15dc:	4718      	bx	r3
    15de:	46c0      	nop			; (mov r8, r8)
    15e0:	20000004 	.word	0x20000004

000015e4 <setbuf>:
    15e4:	424a      	negs	r2, r1
    15e6:	414a      	adcs	r2, r1
    15e8:	2380      	movs	r3, #128	; 0x80
    15ea:	b510      	push	{r4, lr}
    15ec:	0052      	lsls	r2, r2, #1
    15ee:	00db      	lsls	r3, r3, #3
    15f0:	f000 f802 	bl	15f8 <setvbuf>
    15f4:	bd10      	pop	{r4, pc}
	...

000015f8 <setvbuf>:
    15f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15fa:	001d      	movs	r5, r3
    15fc:	4b4f      	ldr	r3, [pc, #316]	; (173c <setvbuf+0x144>)
    15fe:	b085      	sub	sp, #20
    1600:	681e      	ldr	r6, [r3, #0]
    1602:	0004      	movs	r4, r0
    1604:	000f      	movs	r7, r1
    1606:	9200      	str	r2, [sp, #0]
    1608:	2e00      	cmp	r6, #0
    160a:	d005      	beq.n	1618 <setvbuf+0x20>
    160c:	69b3      	ldr	r3, [r6, #24]
    160e:	2b00      	cmp	r3, #0
    1610:	d102      	bne.n	1618 <setvbuf+0x20>
    1612:	0030      	movs	r0, r6
    1614:	f000 f994 	bl	1940 <__sinit>
    1618:	4b49      	ldr	r3, [pc, #292]	; (1740 <setvbuf+0x148>)
    161a:	429c      	cmp	r4, r3
    161c:	d150      	bne.n	16c0 <setvbuf+0xc8>
    161e:	6874      	ldr	r4, [r6, #4]
    1620:	9b00      	ldr	r3, [sp, #0]
    1622:	2b02      	cmp	r3, #2
    1624:	d005      	beq.n	1632 <setvbuf+0x3a>
    1626:	2b01      	cmp	r3, #1
    1628:	d900      	bls.n	162c <setvbuf+0x34>
    162a:	e084      	b.n	1736 <setvbuf+0x13e>
    162c:	2d00      	cmp	r5, #0
    162e:	da00      	bge.n	1632 <setvbuf+0x3a>
    1630:	e081      	b.n	1736 <setvbuf+0x13e>
    1632:	0021      	movs	r1, r4
    1634:	0030      	movs	r0, r6
    1636:	f000 f915 	bl	1864 <_fflush_r>
    163a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    163c:	2900      	cmp	r1, #0
    163e:	d008      	beq.n	1652 <setvbuf+0x5a>
    1640:	0023      	movs	r3, r4
    1642:	3344      	adds	r3, #68	; 0x44
    1644:	4299      	cmp	r1, r3
    1646:	d002      	beq.n	164e <setvbuf+0x56>
    1648:	0030      	movs	r0, r6
    164a:	f000 fa85 	bl	1b58 <_free_r>
    164e:	2300      	movs	r3, #0
    1650:	6363      	str	r3, [r4, #52]	; 0x34
    1652:	2300      	movs	r3, #0
    1654:	61a3      	str	r3, [r4, #24]
    1656:	6063      	str	r3, [r4, #4]
    1658:	89a3      	ldrh	r3, [r4, #12]
    165a:	061b      	lsls	r3, r3, #24
    165c:	d503      	bpl.n	1666 <setvbuf+0x6e>
    165e:	6921      	ldr	r1, [r4, #16]
    1660:	0030      	movs	r0, r6
    1662:	f000 fa79 	bl	1b58 <_free_r>
    1666:	89a3      	ldrh	r3, [r4, #12]
    1668:	4a36      	ldr	r2, [pc, #216]	; (1744 <setvbuf+0x14c>)
    166a:	4013      	ands	r3, r2
    166c:	81a3      	strh	r3, [r4, #12]
    166e:	9b00      	ldr	r3, [sp, #0]
    1670:	2b02      	cmp	r3, #2
    1672:	d05a      	beq.n	172a <setvbuf+0x132>
    1674:	ab03      	add	r3, sp, #12
    1676:	aa02      	add	r2, sp, #8
    1678:	0021      	movs	r1, r4
    167a:	0030      	movs	r0, r6
    167c:	f000 f9f6 	bl	1a6c <__swhatbuf_r>
    1680:	89a3      	ldrh	r3, [r4, #12]
    1682:	4318      	orrs	r0, r3
    1684:	81a0      	strh	r0, [r4, #12]
    1686:	2d00      	cmp	r5, #0
    1688:	d124      	bne.n	16d4 <setvbuf+0xdc>
    168a:	9d02      	ldr	r5, [sp, #8]
    168c:	0028      	movs	r0, r5
    168e:	f000 fa59 	bl	1b44 <malloc>
    1692:	9501      	str	r5, [sp, #4]
    1694:	1e07      	subs	r7, r0, #0
    1696:	d142      	bne.n	171e <setvbuf+0x126>
    1698:	9b02      	ldr	r3, [sp, #8]
    169a:	9301      	str	r3, [sp, #4]
    169c:	42ab      	cmp	r3, r5
    169e:	d139      	bne.n	1714 <setvbuf+0x11c>
    16a0:	2001      	movs	r0, #1
    16a2:	4240      	negs	r0, r0
    16a4:	2302      	movs	r3, #2
    16a6:	89a2      	ldrh	r2, [r4, #12]
    16a8:	4313      	orrs	r3, r2
    16aa:	81a3      	strh	r3, [r4, #12]
    16ac:	2300      	movs	r3, #0
    16ae:	60a3      	str	r3, [r4, #8]
    16b0:	0023      	movs	r3, r4
    16b2:	3347      	adds	r3, #71	; 0x47
    16b4:	6023      	str	r3, [r4, #0]
    16b6:	6123      	str	r3, [r4, #16]
    16b8:	2301      	movs	r3, #1
    16ba:	6163      	str	r3, [r4, #20]
    16bc:	b005      	add	sp, #20
    16be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16c0:	4b21      	ldr	r3, [pc, #132]	; (1748 <setvbuf+0x150>)
    16c2:	429c      	cmp	r4, r3
    16c4:	d101      	bne.n	16ca <setvbuf+0xd2>
    16c6:	68b4      	ldr	r4, [r6, #8]
    16c8:	e7aa      	b.n	1620 <setvbuf+0x28>
    16ca:	4b20      	ldr	r3, [pc, #128]	; (174c <setvbuf+0x154>)
    16cc:	429c      	cmp	r4, r3
    16ce:	d1a7      	bne.n	1620 <setvbuf+0x28>
    16d0:	68f4      	ldr	r4, [r6, #12]
    16d2:	e7a5      	b.n	1620 <setvbuf+0x28>
    16d4:	2f00      	cmp	r7, #0
    16d6:	d0d9      	beq.n	168c <setvbuf+0x94>
    16d8:	69b3      	ldr	r3, [r6, #24]
    16da:	2b00      	cmp	r3, #0
    16dc:	d102      	bne.n	16e4 <setvbuf+0xec>
    16de:	0030      	movs	r0, r6
    16e0:	f000 f92e 	bl	1940 <__sinit>
    16e4:	9b00      	ldr	r3, [sp, #0]
    16e6:	2b01      	cmp	r3, #1
    16e8:	d103      	bne.n	16f2 <setvbuf+0xfa>
    16ea:	89a3      	ldrh	r3, [r4, #12]
    16ec:	9a00      	ldr	r2, [sp, #0]
    16ee:	431a      	orrs	r2, r3
    16f0:	81a2      	strh	r2, [r4, #12]
    16f2:	2008      	movs	r0, #8
    16f4:	89a3      	ldrh	r3, [r4, #12]
    16f6:	6027      	str	r7, [r4, #0]
    16f8:	6127      	str	r7, [r4, #16]
    16fa:	6165      	str	r5, [r4, #20]
    16fc:	4018      	ands	r0, r3
    16fe:	d018      	beq.n	1732 <setvbuf+0x13a>
    1700:	2001      	movs	r0, #1
    1702:	4018      	ands	r0, r3
    1704:	2300      	movs	r3, #0
    1706:	4298      	cmp	r0, r3
    1708:	d011      	beq.n	172e <setvbuf+0x136>
    170a:	426d      	negs	r5, r5
    170c:	60a3      	str	r3, [r4, #8]
    170e:	61a5      	str	r5, [r4, #24]
    1710:	0018      	movs	r0, r3
    1712:	e7d3      	b.n	16bc <setvbuf+0xc4>
    1714:	9801      	ldr	r0, [sp, #4]
    1716:	f000 fa15 	bl	1b44 <malloc>
    171a:	1e07      	subs	r7, r0, #0
    171c:	d0c0      	beq.n	16a0 <setvbuf+0xa8>
    171e:	2380      	movs	r3, #128	; 0x80
    1720:	89a2      	ldrh	r2, [r4, #12]
    1722:	9d01      	ldr	r5, [sp, #4]
    1724:	4313      	orrs	r3, r2
    1726:	81a3      	strh	r3, [r4, #12]
    1728:	e7d6      	b.n	16d8 <setvbuf+0xe0>
    172a:	2000      	movs	r0, #0
    172c:	e7ba      	b.n	16a4 <setvbuf+0xac>
    172e:	60a5      	str	r5, [r4, #8]
    1730:	e7c4      	b.n	16bc <setvbuf+0xc4>
    1732:	60a0      	str	r0, [r4, #8]
    1734:	e7c2      	b.n	16bc <setvbuf+0xc4>
    1736:	2001      	movs	r0, #1
    1738:	4240      	negs	r0, r0
    173a:	e7bf      	b.n	16bc <setvbuf+0xc4>
    173c:	20000004 	.word	0x20000004
    1740:	0000262c 	.word	0x0000262c
    1744:	fffff35c 	.word	0xfffff35c
    1748:	0000264c 	.word	0x0000264c
    174c:	0000260c 	.word	0x0000260c

00001750 <__sflush_r>:
    1750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1752:	898a      	ldrh	r2, [r1, #12]
    1754:	0005      	movs	r5, r0
    1756:	000c      	movs	r4, r1
    1758:	0713      	lsls	r3, r2, #28
    175a:	d460      	bmi.n	181e <__sflush_r+0xce>
    175c:	684b      	ldr	r3, [r1, #4]
    175e:	2b00      	cmp	r3, #0
    1760:	dc04      	bgt.n	176c <__sflush_r+0x1c>
    1762:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1764:	2b00      	cmp	r3, #0
    1766:	dc01      	bgt.n	176c <__sflush_r+0x1c>
    1768:	2000      	movs	r0, #0
    176a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    176c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    176e:	2f00      	cmp	r7, #0
    1770:	d0fa      	beq.n	1768 <__sflush_r+0x18>
    1772:	2300      	movs	r3, #0
    1774:	682e      	ldr	r6, [r5, #0]
    1776:	602b      	str	r3, [r5, #0]
    1778:	2380      	movs	r3, #128	; 0x80
    177a:	015b      	lsls	r3, r3, #5
    177c:	401a      	ands	r2, r3
    177e:	d034      	beq.n	17ea <__sflush_r+0x9a>
    1780:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1782:	89a3      	ldrh	r3, [r4, #12]
    1784:	075b      	lsls	r3, r3, #29
    1786:	d506      	bpl.n	1796 <__sflush_r+0x46>
    1788:	6863      	ldr	r3, [r4, #4]
    178a:	1ac0      	subs	r0, r0, r3
    178c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    178e:	2b00      	cmp	r3, #0
    1790:	d001      	beq.n	1796 <__sflush_r+0x46>
    1792:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1794:	1ac0      	subs	r0, r0, r3
    1796:	0002      	movs	r2, r0
    1798:	6a21      	ldr	r1, [r4, #32]
    179a:	2300      	movs	r3, #0
    179c:	0028      	movs	r0, r5
    179e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    17a0:	47b8      	blx	r7
    17a2:	89a1      	ldrh	r1, [r4, #12]
    17a4:	1c43      	adds	r3, r0, #1
    17a6:	d106      	bne.n	17b6 <__sflush_r+0x66>
    17a8:	682b      	ldr	r3, [r5, #0]
    17aa:	2b1d      	cmp	r3, #29
    17ac:	d831      	bhi.n	1812 <__sflush_r+0xc2>
    17ae:	4a2c      	ldr	r2, [pc, #176]	; (1860 <__sflush_r+0x110>)
    17b0:	40da      	lsrs	r2, r3
    17b2:	07d3      	lsls	r3, r2, #31
    17b4:	d52d      	bpl.n	1812 <__sflush_r+0xc2>
    17b6:	2300      	movs	r3, #0
    17b8:	6063      	str	r3, [r4, #4]
    17ba:	6923      	ldr	r3, [r4, #16]
    17bc:	6023      	str	r3, [r4, #0]
    17be:	04cb      	lsls	r3, r1, #19
    17c0:	d505      	bpl.n	17ce <__sflush_r+0x7e>
    17c2:	1c43      	adds	r3, r0, #1
    17c4:	d102      	bne.n	17cc <__sflush_r+0x7c>
    17c6:	682b      	ldr	r3, [r5, #0]
    17c8:	2b00      	cmp	r3, #0
    17ca:	d100      	bne.n	17ce <__sflush_r+0x7e>
    17cc:	6560      	str	r0, [r4, #84]	; 0x54
    17ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
    17d0:	602e      	str	r6, [r5, #0]
    17d2:	2900      	cmp	r1, #0
    17d4:	d0c8      	beq.n	1768 <__sflush_r+0x18>
    17d6:	0023      	movs	r3, r4
    17d8:	3344      	adds	r3, #68	; 0x44
    17da:	4299      	cmp	r1, r3
    17dc:	d002      	beq.n	17e4 <__sflush_r+0x94>
    17de:	0028      	movs	r0, r5
    17e0:	f000 f9ba 	bl	1b58 <_free_r>
    17e4:	2000      	movs	r0, #0
    17e6:	6360      	str	r0, [r4, #52]	; 0x34
    17e8:	e7bf      	b.n	176a <__sflush_r+0x1a>
    17ea:	2301      	movs	r3, #1
    17ec:	6a21      	ldr	r1, [r4, #32]
    17ee:	0028      	movs	r0, r5
    17f0:	47b8      	blx	r7
    17f2:	1c43      	adds	r3, r0, #1
    17f4:	d1c5      	bne.n	1782 <__sflush_r+0x32>
    17f6:	682b      	ldr	r3, [r5, #0]
    17f8:	2b00      	cmp	r3, #0
    17fa:	d0c2      	beq.n	1782 <__sflush_r+0x32>
    17fc:	2b1d      	cmp	r3, #29
    17fe:	d001      	beq.n	1804 <__sflush_r+0xb4>
    1800:	2b16      	cmp	r3, #22
    1802:	d101      	bne.n	1808 <__sflush_r+0xb8>
    1804:	602e      	str	r6, [r5, #0]
    1806:	e7af      	b.n	1768 <__sflush_r+0x18>
    1808:	2340      	movs	r3, #64	; 0x40
    180a:	89a2      	ldrh	r2, [r4, #12]
    180c:	4313      	orrs	r3, r2
    180e:	81a3      	strh	r3, [r4, #12]
    1810:	e7ab      	b.n	176a <__sflush_r+0x1a>
    1812:	2340      	movs	r3, #64	; 0x40
    1814:	430b      	orrs	r3, r1
    1816:	2001      	movs	r0, #1
    1818:	81a3      	strh	r3, [r4, #12]
    181a:	4240      	negs	r0, r0
    181c:	e7a5      	b.n	176a <__sflush_r+0x1a>
    181e:	690f      	ldr	r7, [r1, #16]
    1820:	2f00      	cmp	r7, #0
    1822:	d0a1      	beq.n	1768 <__sflush_r+0x18>
    1824:	680b      	ldr	r3, [r1, #0]
    1826:	600f      	str	r7, [r1, #0]
    1828:	1bdb      	subs	r3, r3, r7
    182a:	9301      	str	r3, [sp, #4]
    182c:	2300      	movs	r3, #0
    182e:	0792      	lsls	r2, r2, #30
    1830:	d100      	bne.n	1834 <__sflush_r+0xe4>
    1832:	694b      	ldr	r3, [r1, #20]
    1834:	60a3      	str	r3, [r4, #8]
    1836:	9b01      	ldr	r3, [sp, #4]
    1838:	2b00      	cmp	r3, #0
    183a:	dc00      	bgt.n	183e <__sflush_r+0xee>
    183c:	e794      	b.n	1768 <__sflush_r+0x18>
    183e:	9b01      	ldr	r3, [sp, #4]
    1840:	003a      	movs	r2, r7
    1842:	6a21      	ldr	r1, [r4, #32]
    1844:	0028      	movs	r0, r5
    1846:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1848:	47b0      	blx	r6
    184a:	2800      	cmp	r0, #0
    184c:	dc03      	bgt.n	1856 <__sflush_r+0x106>
    184e:	2340      	movs	r3, #64	; 0x40
    1850:	89a2      	ldrh	r2, [r4, #12]
    1852:	4313      	orrs	r3, r2
    1854:	e7df      	b.n	1816 <__sflush_r+0xc6>
    1856:	9b01      	ldr	r3, [sp, #4]
    1858:	183f      	adds	r7, r7, r0
    185a:	1a1b      	subs	r3, r3, r0
    185c:	9301      	str	r3, [sp, #4]
    185e:	e7ea      	b.n	1836 <__sflush_r+0xe6>
    1860:	20400001 	.word	0x20400001

00001864 <_fflush_r>:
    1864:	690b      	ldr	r3, [r1, #16]
    1866:	b570      	push	{r4, r5, r6, lr}
    1868:	0005      	movs	r5, r0
    186a:	000c      	movs	r4, r1
    186c:	2b00      	cmp	r3, #0
    186e:	d101      	bne.n	1874 <_fflush_r+0x10>
    1870:	2000      	movs	r0, #0
    1872:	bd70      	pop	{r4, r5, r6, pc}
    1874:	2800      	cmp	r0, #0
    1876:	d004      	beq.n	1882 <_fflush_r+0x1e>
    1878:	6983      	ldr	r3, [r0, #24]
    187a:	2b00      	cmp	r3, #0
    187c:	d101      	bne.n	1882 <_fflush_r+0x1e>
    187e:	f000 f85f 	bl	1940 <__sinit>
    1882:	4b0b      	ldr	r3, [pc, #44]	; (18b0 <_fflush_r+0x4c>)
    1884:	429c      	cmp	r4, r3
    1886:	d109      	bne.n	189c <_fflush_r+0x38>
    1888:	686c      	ldr	r4, [r5, #4]
    188a:	220c      	movs	r2, #12
    188c:	5ea3      	ldrsh	r3, [r4, r2]
    188e:	2b00      	cmp	r3, #0
    1890:	d0ee      	beq.n	1870 <_fflush_r+0xc>
    1892:	0021      	movs	r1, r4
    1894:	0028      	movs	r0, r5
    1896:	f7ff ff5b 	bl	1750 <__sflush_r>
    189a:	e7ea      	b.n	1872 <_fflush_r+0xe>
    189c:	4b05      	ldr	r3, [pc, #20]	; (18b4 <_fflush_r+0x50>)
    189e:	429c      	cmp	r4, r3
    18a0:	d101      	bne.n	18a6 <_fflush_r+0x42>
    18a2:	68ac      	ldr	r4, [r5, #8]
    18a4:	e7f1      	b.n	188a <_fflush_r+0x26>
    18a6:	4b04      	ldr	r3, [pc, #16]	; (18b8 <_fflush_r+0x54>)
    18a8:	429c      	cmp	r4, r3
    18aa:	d1ee      	bne.n	188a <_fflush_r+0x26>
    18ac:	68ec      	ldr	r4, [r5, #12]
    18ae:	e7ec      	b.n	188a <_fflush_r+0x26>
    18b0:	0000262c 	.word	0x0000262c
    18b4:	0000264c 	.word	0x0000264c
    18b8:	0000260c 	.word	0x0000260c

000018bc <_cleanup_r>:
    18bc:	b510      	push	{r4, lr}
    18be:	4902      	ldr	r1, [pc, #8]	; (18c8 <_cleanup_r+0xc>)
    18c0:	f000 f8b2 	bl	1a28 <_fwalk_reent>
    18c4:	bd10      	pop	{r4, pc}
    18c6:	46c0      	nop			; (mov r8, r8)
    18c8:	00001865 	.word	0x00001865

000018cc <std.isra.0>:
    18cc:	2300      	movs	r3, #0
    18ce:	b510      	push	{r4, lr}
    18d0:	0004      	movs	r4, r0
    18d2:	6003      	str	r3, [r0, #0]
    18d4:	6043      	str	r3, [r0, #4]
    18d6:	6083      	str	r3, [r0, #8]
    18d8:	8181      	strh	r1, [r0, #12]
    18da:	6643      	str	r3, [r0, #100]	; 0x64
    18dc:	81c2      	strh	r2, [r0, #14]
    18de:	6103      	str	r3, [r0, #16]
    18e0:	6143      	str	r3, [r0, #20]
    18e2:	6183      	str	r3, [r0, #24]
    18e4:	0019      	movs	r1, r3
    18e6:	2208      	movs	r2, #8
    18e8:	305c      	adds	r0, #92	; 0x5c
    18ea:	f7ff fe59 	bl	15a0 <memset>
    18ee:	4b05      	ldr	r3, [pc, #20]	; (1904 <std.isra.0+0x38>)
    18f0:	6224      	str	r4, [r4, #32]
    18f2:	6263      	str	r3, [r4, #36]	; 0x24
    18f4:	4b04      	ldr	r3, [pc, #16]	; (1908 <std.isra.0+0x3c>)
    18f6:	62a3      	str	r3, [r4, #40]	; 0x28
    18f8:	4b04      	ldr	r3, [pc, #16]	; (190c <std.isra.0+0x40>)
    18fa:	62e3      	str	r3, [r4, #44]	; 0x2c
    18fc:	4b04      	ldr	r3, [pc, #16]	; (1910 <std.isra.0+0x44>)
    18fe:	6323      	str	r3, [r4, #48]	; 0x30
    1900:	bd10      	pop	{r4, pc}
    1902:	46c0      	nop			; (mov r8, r8)
    1904:	00002265 	.word	0x00002265
    1908:	0000228d 	.word	0x0000228d
    190c:	000022c5 	.word	0x000022c5
    1910:	000022f1 	.word	0x000022f1

00001914 <__sfmoreglue>:
    1914:	b570      	push	{r4, r5, r6, lr}
    1916:	2568      	movs	r5, #104	; 0x68
    1918:	1e4a      	subs	r2, r1, #1
    191a:	4355      	muls	r5, r2
    191c:	000e      	movs	r6, r1
    191e:	0029      	movs	r1, r5
    1920:	3174      	adds	r1, #116	; 0x74
    1922:	f000 f963 	bl	1bec <_malloc_r>
    1926:	1e04      	subs	r4, r0, #0
    1928:	d008      	beq.n	193c <__sfmoreglue+0x28>
    192a:	2100      	movs	r1, #0
    192c:	002a      	movs	r2, r5
    192e:	6001      	str	r1, [r0, #0]
    1930:	6046      	str	r6, [r0, #4]
    1932:	300c      	adds	r0, #12
    1934:	60a0      	str	r0, [r4, #8]
    1936:	3268      	adds	r2, #104	; 0x68
    1938:	f7ff fe32 	bl	15a0 <memset>
    193c:	0020      	movs	r0, r4
    193e:	bd70      	pop	{r4, r5, r6, pc}

00001940 <__sinit>:
    1940:	6983      	ldr	r3, [r0, #24]
    1942:	b513      	push	{r0, r1, r4, lr}
    1944:	0004      	movs	r4, r0
    1946:	2b00      	cmp	r3, #0
    1948:	d128      	bne.n	199c <__sinit+0x5c>
    194a:	6483      	str	r3, [r0, #72]	; 0x48
    194c:	64c3      	str	r3, [r0, #76]	; 0x4c
    194e:	6503      	str	r3, [r0, #80]	; 0x50
    1950:	4b13      	ldr	r3, [pc, #76]	; (19a0 <__sinit+0x60>)
    1952:	4a14      	ldr	r2, [pc, #80]	; (19a4 <__sinit+0x64>)
    1954:	681b      	ldr	r3, [r3, #0]
    1956:	6282      	str	r2, [r0, #40]	; 0x28
    1958:	9301      	str	r3, [sp, #4]
    195a:	4298      	cmp	r0, r3
    195c:	d101      	bne.n	1962 <__sinit+0x22>
    195e:	2301      	movs	r3, #1
    1960:	6183      	str	r3, [r0, #24]
    1962:	0020      	movs	r0, r4
    1964:	f000 f820 	bl	19a8 <__sfp>
    1968:	6060      	str	r0, [r4, #4]
    196a:	0020      	movs	r0, r4
    196c:	f000 f81c 	bl	19a8 <__sfp>
    1970:	60a0      	str	r0, [r4, #8]
    1972:	0020      	movs	r0, r4
    1974:	f000 f818 	bl	19a8 <__sfp>
    1978:	2200      	movs	r2, #0
    197a:	60e0      	str	r0, [r4, #12]
    197c:	2104      	movs	r1, #4
    197e:	6860      	ldr	r0, [r4, #4]
    1980:	f7ff ffa4 	bl	18cc <std.isra.0>
    1984:	2201      	movs	r2, #1
    1986:	2109      	movs	r1, #9
    1988:	68a0      	ldr	r0, [r4, #8]
    198a:	f7ff ff9f 	bl	18cc <std.isra.0>
    198e:	2202      	movs	r2, #2
    1990:	2112      	movs	r1, #18
    1992:	68e0      	ldr	r0, [r4, #12]
    1994:	f7ff ff9a 	bl	18cc <std.isra.0>
    1998:	2301      	movs	r3, #1
    199a:	61a3      	str	r3, [r4, #24]
    199c:	bd13      	pop	{r0, r1, r4, pc}
    199e:	46c0      	nop			; (mov r8, r8)
    19a0:	00002608 	.word	0x00002608
    19a4:	000018bd 	.word	0x000018bd

000019a8 <__sfp>:
    19a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19aa:	4b1e      	ldr	r3, [pc, #120]	; (1a24 <__sfp+0x7c>)
    19ac:	0007      	movs	r7, r0
    19ae:	681e      	ldr	r6, [r3, #0]
    19b0:	69b3      	ldr	r3, [r6, #24]
    19b2:	2b00      	cmp	r3, #0
    19b4:	d102      	bne.n	19bc <__sfp+0x14>
    19b6:	0030      	movs	r0, r6
    19b8:	f7ff ffc2 	bl	1940 <__sinit>
    19bc:	3648      	adds	r6, #72	; 0x48
    19be:	68b4      	ldr	r4, [r6, #8]
    19c0:	6873      	ldr	r3, [r6, #4]
    19c2:	3b01      	subs	r3, #1
    19c4:	d504      	bpl.n	19d0 <__sfp+0x28>
    19c6:	6833      	ldr	r3, [r6, #0]
    19c8:	2b00      	cmp	r3, #0
    19ca:	d007      	beq.n	19dc <__sfp+0x34>
    19cc:	6836      	ldr	r6, [r6, #0]
    19ce:	e7f6      	b.n	19be <__sfp+0x16>
    19d0:	220c      	movs	r2, #12
    19d2:	5ea5      	ldrsh	r5, [r4, r2]
    19d4:	2d00      	cmp	r5, #0
    19d6:	d00d      	beq.n	19f4 <__sfp+0x4c>
    19d8:	3468      	adds	r4, #104	; 0x68
    19da:	e7f2      	b.n	19c2 <__sfp+0x1a>
    19dc:	2104      	movs	r1, #4
    19de:	0038      	movs	r0, r7
    19e0:	f7ff ff98 	bl	1914 <__sfmoreglue>
    19e4:	6030      	str	r0, [r6, #0]
    19e6:	2800      	cmp	r0, #0
    19e8:	d1f0      	bne.n	19cc <__sfp+0x24>
    19ea:	230c      	movs	r3, #12
    19ec:	0004      	movs	r4, r0
    19ee:	603b      	str	r3, [r7, #0]
    19f0:	0020      	movs	r0, r4
    19f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19f4:	2301      	movs	r3, #1
    19f6:	0020      	movs	r0, r4
    19f8:	425b      	negs	r3, r3
    19fa:	81e3      	strh	r3, [r4, #14]
    19fc:	3302      	adds	r3, #2
    19fe:	81a3      	strh	r3, [r4, #12]
    1a00:	6665      	str	r5, [r4, #100]	; 0x64
    1a02:	6025      	str	r5, [r4, #0]
    1a04:	60a5      	str	r5, [r4, #8]
    1a06:	6065      	str	r5, [r4, #4]
    1a08:	6125      	str	r5, [r4, #16]
    1a0a:	6165      	str	r5, [r4, #20]
    1a0c:	61a5      	str	r5, [r4, #24]
    1a0e:	2208      	movs	r2, #8
    1a10:	0029      	movs	r1, r5
    1a12:	305c      	adds	r0, #92	; 0x5c
    1a14:	f7ff fdc4 	bl	15a0 <memset>
    1a18:	6365      	str	r5, [r4, #52]	; 0x34
    1a1a:	63a5      	str	r5, [r4, #56]	; 0x38
    1a1c:	64a5      	str	r5, [r4, #72]	; 0x48
    1a1e:	64e5      	str	r5, [r4, #76]	; 0x4c
    1a20:	e7e6      	b.n	19f0 <__sfp+0x48>
    1a22:	46c0      	nop			; (mov r8, r8)
    1a24:	00002608 	.word	0x00002608

00001a28 <_fwalk_reent>:
    1a28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1a2a:	0004      	movs	r4, r0
    1a2c:	0007      	movs	r7, r0
    1a2e:	2600      	movs	r6, #0
    1a30:	9101      	str	r1, [sp, #4]
    1a32:	3448      	adds	r4, #72	; 0x48
    1a34:	2c00      	cmp	r4, #0
    1a36:	d101      	bne.n	1a3c <_fwalk_reent+0x14>
    1a38:	0030      	movs	r0, r6
    1a3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1a3c:	6863      	ldr	r3, [r4, #4]
    1a3e:	68a5      	ldr	r5, [r4, #8]
    1a40:	9300      	str	r3, [sp, #0]
    1a42:	9b00      	ldr	r3, [sp, #0]
    1a44:	3b01      	subs	r3, #1
    1a46:	9300      	str	r3, [sp, #0]
    1a48:	d501      	bpl.n	1a4e <_fwalk_reent+0x26>
    1a4a:	6824      	ldr	r4, [r4, #0]
    1a4c:	e7f2      	b.n	1a34 <_fwalk_reent+0xc>
    1a4e:	89ab      	ldrh	r3, [r5, #12]
    1a50:	2b01      	cmp	r3, #1
    1a52:	d908      	bls.n	1a66 <_fwalk_reent+0x3e>
    1a54:	220e      	movs	r2, #14
    1a56:	5eab      	ldrsh	r3, [r5, r2]
    1a58:	3301      	adds	r3, #1
    1a5a:	d004      	beq.n	1a66 <_fwalk_reent+0x3e>
    1a5c:	0029      	movs	r1, r5
    1a5e:	0038      	movs	r0, r7
    1a60:	9b01      	ldr	r3, [sp, #4]
    1a62:	4798      	blx	r3
    1a64:	4306      	orrs	r6, r0
    1a66:	3568      	adds	r5, #104	; 0x68
    1a68:	e7eb      	b.n	1a42 <_fwalk_reent+0x1a>
	...

00001a6c <__swhatbuf_r>:
    1a6c:	b570      	push	{r4, r5, r6, lr}
    1a6e:	000e      	movs	r6, r1
    1a70:	001d      	movs	r5, r3
    1a72:	230e      	movs	r3, #14
    1a74:	5ec9      	ldrsh	r1, [r1, r3]
    1a76:	b090      	sub	sp, #64	; 0x40
    1a78:	0014      	movs	r4, r2
    1a7a:	2900      	cmp	r1, #0
    1a7c:	da07      	bge.n	1a8e <__swhatbuf_r+0x22>
    1a7e:	2300      	movs	r3, #0
    1a80:	602b      	str	r3, [r5, #0]
    1a82:	89b3      	ldrh	r3, [r6, #12]
    1a84:	061b      	lsls	r3, r3, #24
    1a86:	d411      	bmi.n	1aac <__swhatbuf_r+0x40>
    1a88:	2380      	movs	r3, #128	; 0x80
    1a8a:	00db      	lsls	r3, r3, #3
    1a8c:	e00f      	b.n	1aae <__swhatbuf_r+0x42>
    1a8e:	aa01      	add	r2, sp, #4
    1a90:	f000 fd26 	bl	24e0 <_fstat_r>
    1a94:	2800      	cmp	r0, #0
    1a96:	dbf2      	blt.n	1a7e <__swhatbuf_r+0x12>
    1a98:	22f0      	movs	r2, #240	; 0xf0
    1a9a:	9b02      	ldr	r3, [sp, #8]
    1a9c:	0212      	lsls	r2, r2, #8
    1a9e:	4013      	ands	r3, r2
    1aa0:	4a05      	ldr	r2, [pc, #20]	; (1ab8 <__swhatbuf_r+0x4c>)
    1aa2:	189b      	adds	r3, r3, r2
    1aa4:	425a      	negs	r2, r3
    1aa6:	4153      	adcs	r3, r2
    1aa8:	602b      	str	r3, [r5, #0]
    1aaa:	e7ed      	b.n	1a88 <__swhatbuf_r+0x1c>
    1aac:	2340      	movs	r3, #64	; 0x40
    1aae:	2000      	movs	r0, #0
    1ab0:	6023      	str	r3, [r4, #0]
    1ab2:	b010      	add	sp, #64	; 0x40
    1ab4:	bd70      	pop	{r4, r5, r6, pc}
    1ab6:	46c0      	nop			; (mov r8, r8)
    1ab8:	ffffe000 	.word	0xffffe000

00001abc <__smakebuf_r>:
    1abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1abe:	2602      	movs	r6, #2
    1ac0:	898b      	ldrh	r3, [r1, #12]
    1ac2:	0005      	movs	r5, r0
    1ac4:	000c      	movs	r4, r1
    1ac6:	4233      	tst	r3, r6
    1ac8:	d006      	beq.n	1ad8 <__smakebuf_r+0x1c>
    1aca:	0023      	movs	r3, r4
    1acc:	3347      	adds	r3, #71	; 0x47
    1ace:	6023      	str	r3, [r4, #0]
    1ad0:	6123      	str	r3, [r4, #16]
    1ad2:	2301      	movs	r3, #1
    1ad4:	6163      	str	r3, [r4, #20]
    1ad6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1ad8:	ab01      	add	r3, sp, #4
    1ada:	466a      	mov	r2, sp
    1adc:	f7ff ffc6 	bl	1a6c <__swhatbuf_r>
    1ae0:	9900      	ldr	r1, [sp, #0]
    1ae2:	0007      	movs	r7, r0
    1ae4:	0028      	movs	r0, r5
    1ae6:	f000 f881 	bl	1bec <_malloc_r>
    1aea:	2800      	cmp	r0, #0
    1aec:	d108      	bne.n	1b00 <__smakebuf_r+0x44>
    1aee:	220c      	movs	r2, #12
    1af0:	5ea3      	ldrsh	r3, [r4, r2]
    1af2:	059a      	lsls	r2, r3, #22
    1af4:	d4ef      	bmi.n	1ad6 <__smakebuf_r+0x1a>
    1af6:	2203      	movs	r2, #3
    1af8:	4393      	bics	r3, r2
    1afa:	431e      	orrs	r6, r3
    1afc:	81a6      	strh	r6, [r4, #12]
    1afe:	e7e4      	b.n	1aca <__smakebuf_r+0xe>
    1b00:	4b0f      	ldr	r3, [pc, #60]	; (1b40 <__smakebuf_r+0x84>)
    1b02:	62ab      	str	r3, [r5, #40]	; 0x28
    1b04:	2380      	movs	r3, #128	; 0x80
    1b06:	89a2      	ldrh	r2, [r4, #12]
    1b08:	6020      	str	r0, [r4, #0]
    1b0a:	4313      	orrs	r3, r2
    1b0c:	81a3      	strh	r3, [r4, #12]
    1b0e:	9b00      	ldr	r3, [sp, #0]
    1b10:	6120      	str	r0, [r4, #16]
    1b12:	6163      	str	r3, [r4, #20]
    1b14:	9b01      	ldr	r3, [sp, #4]
    1b16:	2b00      	cmp	r3, #0
    1b18:	d00d      	beq.n	1b36 <__smakebuf_r+0x7a>
    1b1a:	230e      	movs	r3, #14
    1b1c:	5ee1      	ldrsh	r1, [r4, r3]
    1b1e:	0028      	movs	r0, r5
    1b20:	f000 fcf0 	bl	2504 <_isatty_r>
    1b24:	2800      	cmp	r0, #0
    1b26:	d006      	beq.n	1b36 <__smakebuf_r+0x7a>
    1b28:	2203      	movs	r2, #3
    1b2a:	89a3      	ldrh	r3, [r4, #12]
    1b2c:	4393      	bics	r3, r2
    1b2e:	001a      	movs	r2, r3
    1b30:	2301      	movs	r3, #1
    1b32:	4313      	orrs	r3, r2
    1b34:	81a3      	strh	r3, [r4, #12]
    1b36:	89a0      	ldrh	r0, [r4, #12]
    1b38:	4338      	orrs	r0, r7
    1b3a:	81a0      	strh	r0, [r4, #12]
    1b3c:	e7cb      	b.n	1ad6 <__smakebuf_r+0x1a>
    1b3e:	46c0      	nop			; (mov r8, r8)
    1b40:	000018bd 	.word	0x000018bd

00001b44 <malloc>:
    1b44:	b510      	push	{r4, lr}
    1b46:	4b03      	ldr	r3, [pc, #12]	; (1b54 <malloc+0x10>)
    1b48:	0001      	movs	r1, r0
    1b4a:	6818      	ldr	r0, [r3, #0]
    1b4c:	f000 f84e 	bl	1bec <_malloc_r>
    1b50:	bd10      	pop	{r4, pc}
    1b52:	46c0      	nop			; (mov r8, r8)
    1b54:	20000004 	.word	0x20000004

00001b58 <_free_r>:
    1b58:	b570      	push	{r4, r5, r6, lr}
    1b5a:	0005      	movs	r5, r0
    1b5c:	2900      	cmp	r1, #0
    1b5e:	d010      	beq.n	1b82 <_free_r+0x2a>
    1b60:	1f0c      	subs	r4, r1, #4
    1b62:	6823      	ldr	r3, [r4, #0]
    1b64:	2b00      	cmp	r3, #0
    1b66:	da00      	bge.n	1b6a <_free_r+0x12>
    1b68:	18e4      	adds	r4, r4, r3
    1b6a:	0028      	movs	r0, r5
    1b6c:	f000 fcfb 	bl	2566 <__malloc_lock>
    1b70:	4a1d      	ldr	r2, [pc, #116]	; (1be8 <_free_r+0x90>)
    1b72:	6813      	ldr	r3, [r2, #0]
    1b74:	2b00      	cmp	r3, #0
    1b76:	d105      	bne.n	1b84 <_free_r+0x2c>
    1b78:	6063      	str	r3, [r4, #4]
    1b7a:	6014      	str	r4, [r2, #0]
    1b7c:	0028      	movs	r0, r5
    1b7e:	f000 fcf3 	bl	2568 <__malloc_unlock>
    1b82:	bd70      	pop	{r4, r5, r6, pc}
    1b84:	42a3      	cmp	r3, r4
    1b86:	d909      	bls.n	1b9c <_free_r+0x44>
    1b88:	6821      	ldr	r1, [r4, #0]
    1b8a:	1860      	adds	r0, r4, r1
    1b8c:	4283      	cmp	r3, r0
    1b8e:	d1f3      	bne.n	1b78 <_free_r+0x20>
    1b90:	6818      	ldr	r0, [r3, #0]
    1b92:	685b      	ldr	r3, [r3, #4]
    1b94:	1841      	adds	r1, r0, r1
    1b96:	6021      	str	r1, [r4, #0]
    1b98:	e7ee      	b.n	1b78 <_free_r+0x20>
    1b9a:	0013      	movs	r3, r2
    1b9c:	685a      	ldr	r2, [r3, #4]
    1b9e:	2a00      	cmp	r2, #0
    1ba0:	d001      	beq.n	1ba6 <_free_r+0x4e>
    1ba2:	42a2      	cmp	r2, r4
    1ba4:	d9f9      	bls.n	1b9a <_free_r+0x42>
    1ba6:	6819      	ldr	r1, [r3, #0]
    1ba8:	1858      	adds	r0, r3, r1
    1baa:	42a0      	cmp	r0, r4
    1bac:	d10b      	bne.n	1bc6 <_free_r+0x6e>
    1bae:	6820      	ldr	r0, [r4, #0]
    1bb0:	1809      	adds	r1, r1, r0
    1bb2:	1858      	adds	r0, r3, r1
    1bb4:	6019      	str	r1, [r3, #0]
    1bb6:	4282      	cmp	r2, r0
    1bb8:	d1e0      	bne.n	1b7c <_free_r+0x24>
    1bba:	6810      	ldr	r0, [r2, #0]
    1bbc:	6852      	ldr	r2, [r2, #4]
    1bbe:	1841      	adds	r1, r0, r1
    1bc0:	6019      	str	r1, [r3, #0]
    1bc2:	605a      	str	r2, [r3, #4]
    1bc4:	e7da      	b.n	1b7c <_free_r+0x24>
    1bc6:	42a0      	cmp	r0, r4
    1bc8:	d902      	bls.n	1bd0 <_free_r+0x78>
    1bca:	230c      	movs	r3, #12
    1bcc:	602b      	str	r3, [r5, #0]
    1bce:	e7d5      	b.n	1b7c <_free_r+0x24>
    1bd0:	6821      	ldr	r1, [r4, #0]
    1bd2:	1860      	adds	r0, r4, r1
    1bd4:	4282      	cmp	r2, r0
    1bd6:	d103      	bne.n	1be0 <_free_r+0x88>
    1bd8:	6810      	ldr	r0, [r2, #0]
    1bda:	6852      	ldr	r2, [r2, #4]
    1bdc:	1841      	adds	r1, r0, r1
    1bde:	6021      	str	r1, [r4, #0]
    1be0:	6062      	str	r2, [r4, #4]
    1be2:	605c      	str	r4, [r3, #4]
    1be4:	e7ca      	b.n	1b7c <_free_r+0x24>
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	200000f8 	.word	0x200000f8

00001bec <_malloc_r>:
    1bec:	2303      	movs	r3, #3
    1bee:	b570      	push	{r4, r5, r6, lr}
    1bf0:	1ccd      	adds	r5, r1, #3
    1bf2:	439d      	bics	r5, r3
    1bf4:	3508      	adds	r5, #8
    1bf6:	0006      	movs	r6, r0
    1bf8:	2d0c      	cmp	r5, #12
    1bfa:	d21e      	bcs.n	1c3a <_malloc_r+0x4e>
    1bfc:	250c      	movs	r5, #12
    1bfe:	42a9      	cmp	r1, r5
    1c00:	d81d      	bhi.n	1c3e <_malloc_r+0x52>
    1c02:	0030      	movs	r0, r6
    1c04:	f000 fcaf 	bl	2566 <__malloc_lock>
    1c08:	4a25      	ldr	r2, [pc, #148]	; (1ca0 <_malloc_r+0xb4>)
    1c0a:	6814      	ldr	r4, [r2, #0]
    1c0c:	0021      	movs	r1, r4
    1c0e:	2900      	cmp	r1, #0
    1c10:	d119      	bne.n	1c46 <_malloc_r+0x5a>
    1c12:	4c24      	ldr	r4, [pc, #144]	; (1ca4 <_malloc_r+0xb8>)
    1c14:	6823      	ldr	r3, [r4, #0]
    1c16:	2b00      	cmp	r3, #0
    1c18:	d103      	bne.n	1c22 <_malloc_r+0x36>
    1c1a:	0030      	movs	r0, r6
    1c1c:	f000 fb10 	bl	2240 <_sbrk_r>
    1c20:	6020      	str	r0, [r4, #0]
    1c22:	0029      	movs	r1, r5
    1c24:	0030      	movs	r0, r6
    1c26:	f000 fb0b 	bl	2240 <_sbrk_r>
    1c2a:	1c43      	adds	r3, r0, #1
    1c2c:	d12c      	bne.n	1c88 <_malloc_r+0x9c>
    1c2e:	230c      	movs	r3, #12
    1c30:	0030      	movs	r0, r6
    1c32:	6033      	str	r3, [r6, #0]
    1c34:	f000 fc98 	bl	2568 <__malloc_unlock>
    1c38:	e003      	b.n	1c42 <_malloc_r+0x56>
    1c3a:	2d00      	cmp	r5, #0
    1c3c:	dadf      	bge.n	1bfe <_malloc_r+0x12>
    1c3e:	230c      	movs	r3, #12
    1c40:	6033      	str	r3, [r6, #0]
    1c42:	2000      	movs	r0, #0
    1c44:	bd70      	pop	{r4, r5, r6, pc}
    1c46:	680b      	ldr	r3, [r1, #0]
    1c48:	1b5b      	subs	r3, r3, r5
    1c4a:	d41a      	bmi.n	1c82 <_malloc_r+0x96>
    1c4c:	2b0b      	cmp	r3, #11
    1c4e:	d903      	bls.n	1c58 <_malloc_r+0x6c>
    1c50:	600b      	str	r3, [r1, #0]
    1c52:	18cc      	adds	r4, r1, r3
    1c54:	6025      	str	r5, [r4, #0]
    1c56:	e003      	b.n	1c60 <_malloc_r+0x74>
    1c58:	428c      	cmp	r4, r1
    1c5a:	d10e      	bne.n	1c7a <_malloc_r+0x8e>
    1c5c:	6863      	ldr	r3, [r4, #4]
    1c5e:	6013      	str	r3, [r2, #0]
    1c60:	0030      	movs	r0, r6
    1c62:	f000 fc81 	bl	2568 <__malloc_unlock>
    1c66:	0020      	movs	r0, r4
    1c68:	2207      	movs	r2, #7
    1c6a:	300b      	adds	r0, #11
    1c6c:	1d23      	adds	r3, r4, #4
    1c6e:	4390      	bics	r0, r2
    1c70:	1ac3      	subs	r3, r0, r3
    1c72:	d0e7      	beq.n	1c44 <_malloc_r+0x58>
    1c74:	425a      	negs	r2, r3
    1c76:	50e2      	str	r2, [r4, r3]
    1c78:	e7e4      	b.n	1c44 <_malloc_r+0x58>
    1c7a:	684b      	ldr	r3, [r1, #4]
    1c7c:	6063      	str	r3, [r4, #4]
    1c7e:	000c      	movs	r4, r1
    1c80:	e7ee      	b.n	1c60 <_malloc_r+0x74>
    1c82:	000c      	movs	r4, r1
    1c84:	6849      	ldr	r1, [r1, #4]
    1c86:	e7c2      	b.n	1c0e <_malloc_r+0x22>
    1c88:	2303      	movs	r3, #3
    1c8a:	1cc4      	adds	r4, r0, #3
    1c8c:	439c      	bics	r4, r3
    1c8e:	42a0      	cmp	r0, r4
    1c90:	d0e0      	beq.n	1c54 <_malloc_r+0x68>
    1c92:	1a21      	subs	r1, r4, r0
    1c94:	0030      	movs	r0, r6
    1c96:	f000 fad3 	bl	2240 <_sbrk_r>
    1c9a:	1c43      	adds	r3, r0, #1
    1c9c:	d1da      	bne.n	1c54 <_malloc_r+0x68>
    1c9e:	e7c6      	b.n	1c2e <_malloc_r+0x42>
    1ca0:	200000f8 	.word	0x200000f8
    1ca4:	200000fc 	.word	0x200000fc

00001ca8 <__sfputc_r>:
    1ca8:	6893      	ldr	r3, [r2, #8]
    1caa:	b510      	push	{r4, lr}
    1cac:	3b01      	subs	r3, #1
    1cae:	6093      	str	r3, [r2, #8]
    1cb0:	2b00      	cmp	r3, #0
    1cb2:	da05      	bge.n	1cc0 <__sfputc_r+0x18>
    1cb4:	6994      	ldr	r4, [r2, #24]
    1cb6:	42a3      	cmp	r3, r4
    1cb8:	db08      	blt.n	1ccc <__sfputc_r+0x24>
    1cba:	b2cb      	uxtb	r3, r1
    1cbc:	2b0a      	cmp	r3, #10
    1cbe:	d005      	beq.n	1ccc <__sfputc_r+0x24>
    1cc0:	6813      	ldr	r3, [r2, #0]
    1cc2:	1c58      	adds	r0, r3, #1
    1cc4:	6010      	str	r0, [r2, #0]
    1cc6:	7019      	strb	r1, [r3, #0]
    1cc8:	b2c8      	uxtb	r0, r1
    1cca:	bd10      	pop	{r4, pc}
    1ccc:	f000 fb16 	bl	22fc <__swbuf_r>
    1cd0:	e7fb      	b.n	1cca <__sfputc_r+0x22>

00001cd2 <__sfputs_r>:
    1cd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cd4:	0006      	movs	r6, r0
    1cd6:	000f      	movs	r7, r1
    1cd8:	0014      	movs	r4, r2
    1cda:	18d5      	adds	r5, r2, r3
    1cdc:	42ac      	cmp	r4, r5
    1cde:	d101      	bne.n	1ce4 <__sfputs_r+0x12>
    1ce0:	2000      	movs	r0, #0
    1ce2:	e007      	b.n	1cf4 <__sfputs_r+0x22>
    1ce4:	7821      	ldrb	r1, [r4, #0]
    1ce6:	003a      	movs	r2, r7
    1ce8:	0030      	movs	r0, r6
    1cea:	f7ff ffdd 	bl	1ca8 <__sfputc_r>
    1cee:	3401      	adds	r4, #1
    1cf0:	1c43      	adds	r3, r0, #1
    1cf2:	d1f3      	bne.n	1cdc <__sfputs_r+0xa>
    1cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001cf8 <_vfiprintf_r>:
    1cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cfa:	b09f      	sub	sp, #124	; 0x7c
    1cfc:	0006      	movs	r6, r0
    1cfe:	000f      	movs	r7, r1
    1d00:	0014      	movs	r4, r2
    1d02:	9305      	str	r3, [sp, #20]
    1d04:	2800      	cmp	r0, #0
    1d06:	d004      	beq.n	1d12 <_vfiprintf_r+0x1a>
    1d08:	6983      	ldr	r3, [r0, #24]
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d101      	bne.n	1d12 <_vfiprintf_r+0x1a>
    1d0e:	f7ff fe17 	bl	1940 <__sinit>
    1d12:	4b7f      	ldr	r3, [pc, #508]	; (1f10 <_vfiprintf_r+0x218>)
    1d14:	429f      	cmp	r7, r3
    1d16:	d15c      	bne.n	1dd2 <_vfiprintf_r+0xda>
    1d18:	6877      	ldr	r7, [r6, #4]
    1d1a:	89bb      	ldrh	r3, [r7, #12]
    1d1c:	071b      	lsls	r3, r3, #28
    1d1e:	d562      	bpl.n	1de6 <_vfiprintf_r+0xee>
    1d20:	693b      	ldr	r3, [r7, #16]
    1d22:	2b00      	cmp	r3, #0
    1d24:	d05f      	beq.n	1de6 <_vfiprintf_r+0xee>
    1d26:	2300      	movs	r3, #0
    1d28:	ad06      	add	r5, sp, #24
    1d2a:	616b      	str	r3, [r5, #20]
    1d2c:	3320      	adds	r3, #32
    1d2e:	766b      	strb	r3, [r5, #25]
    1d30:	3310      	adds	r3, #16
    1d32:	76ab      	strb	r3, [r5, #26]
    1d34:	9402      	str	r4, [sp, #8]
    1d36:	9c02      	ldr	r4, [sp, #8]
    1d38:	7823      	ldrb	r3, [r4, #0]
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	d15d      	bne.n	1dfa <_vfiprintf_r+0x102>
    1d3e:	9b02      	ldr	r3, [sp, #8]
    1d40:	1ae3      	subs	r3, r4, r3
    1d42:	9304      	str	r3, [sp, #16]
    1d44:	d00d      	beq.n	1d62 <_vfiprintf_r+0x6a>
    1d46:	9b04      	ldr	r3, [sp, #16]
    1d48:	9a02      	ldr	r2, [sp, #8]
    1d4a:	0039      	movs	r1, r7
    1d4c:	0030      	movs	r0, r6
    1d4e:	f7ff ffc0 	bl	1cd2 <__sfputs_r>
    1d52:	1c43      	adds	r3, r0, #1
    1d54:	d100      	bne.n	1d58 <_vfiprintf_r+0x60>
    1d56:	e0cc      	b.n	1ef2 <_vfiprintf_r+0x1fa>
    1d58:	696a      	ldr	r2, [r5, #20]
    1d5a:	9b04      	ldr	r3, [sp, #16]
    1d5c:	4694      	mov	ip, r2
    1d5e:	4463      	add	r3, ip
    1d60:	616b      	str	r3, [r5, #20]
    1d62:	7823      	ldrb	r3, [r4, #0]
    1d64:	2b00      	cmp	r3, #0
    1d66:	d100      	bne.n	1d6a <_vfiprintf_r+0x72>
    1d68:	e0c3      	b.n	1ef2 <_vfiprintf_r+0x1fa>
    1d6a:	2201      	movs	r2, #1
    1d6c:	2300      	movs	r3, #0
    1d6e:	4252      	negs	r2, r2
    1d70:	606a      	str	r2, [r5, #4]
    1d72:	a902      	add	r1, sp, #8
    1d74:	3254      	adds	r2, #84	; 0x54
    1d76:	1852      	adds	r2, r2, r1
    1d78:	3401      	adds	r4, #1
    1d7a:	602b      	str	r3, [r5, #0]
    1d7c:	60eb      	str	r3, [r5, #12]
    1d7e:	60ab      	str	r3, [r5, #8]
    1d80:	7013      	strb	r3, [r2, #0]
    1d82:	65ab      	str	r3, [r5, #88]	; 0x58
    1d84:	7821      	ldrb	r1, [r4, #0]
    1d86:	2205      	movs	r2, #5
    1d88:	4862      	ldr	r0, [pc, #392]	; (1f14 <_vfiprintf_r+0x21c>)
    1d8a:	f000 fbe1 	bl	2550 <memchr>
    1d8e:	1c63      	adds	r3, r4, #1
    1d90:	469c      	mov	ip, r3
    1d92:	2800      	cmp	r0, #0
    1d94:	d135      	bne.n	1e02 <_vfiprintf_r+0x10a>
    1d96:	6829      	ldr	r1, [r5, #0]
    1d98:	06cb      	lsls	r3, r1, #27
    1d9a:	d504      	bpl.n	1da6 <_vfiprintf_r+0xae>
    1d9c:	2353      	movs	r3, #83	; 0x53
    1d9e:	aa02      	add	r2, sp, #8
    1da0:	3020      	adds	r0, #32
    1da2:	189b      	adds	r3, r3, r2
    1da4:	7018      	strb	r0, [r3, #0]
    1da6:	070b      	lsls	r3, r1, #28
    1da8:	d504      	bpl.n	1db4 <_vfiprintf_r+0xbc>
    1daa:	2353      	movs	r3, #83	; 0x53
    1dac:	202b      	movs	r0, #43	; 0x2b
    1dae:	aa02      	add	r2, sp, #8
    1db0:	189b      	adds	r3, r3, r2
    1db2:	7018      	strb	r0, [r3, #0]
    1db4:	7823      	ldrb	r3, [r4, #0]
    1db6:	2b2a      	cmp	r3, #42	; 0x2a
    1db8:	d02c      	beq.n	1e14 <_vfiprintf_r+0x11c>
    1dba:	2000      	movs	r0, #0
    1dbc:	210a      	movs	r1, #10
    1dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1dc0:	7822      	ldrb	r2, [r4, #0]
    1dc2:	3a30      	subs	r2, #48	; 0x30
    1dc4:	2a09      	cmp	r2, #9
    1dc6:	d800      	bhi.n	1dca <_vfiprintf_r+0xd2>
    1dc8:	e06b      	b.n	1ea2 <_vfiprintf_r+0x1aa>
    1dca:	2800      	cmp	r0, #0
    1dcc:	d02a      	beq.n	1e24 <_vfiprintf_r+0x12c>
    1dce:	9309      	str	r3, [sp, #36]	; 0x24
    1dd0:	e028      	b.n	1e24 <_vfiprintf_r+0x12c>
    1dd2:	4b51      	ldr	r3, [pc, #324]	; (1f18 <_vfiprintf_r+0x220>)
    1dd4:	429f      	cmp	r7, r3
    1dd6:	d101      	bne.n	1ddc <_vfiprintf_r+0xe4>
    1dd8:	68b7      	ldr	r7, [r6, #8]
    1dda:	e79e      	b.n	1d1a <_vfiprintf_r+0x22>
    1ddc:	4b4f      	ldr	r3, [pc, #316]	; (1f1c <_vfiprintf_r+0x224>)
    1dde:	429f      	cmp	r7, r3
    1de0:	d19b      	bne.n	1d1a <_vfiprintf_r+0x22>
    1de2:	68f7      	ldr	r7, [r6, #12]
    1de4:	e799      	b.n	1d1a <_vfiprintf_r+0x22>
    1de6:	0039      	movs	r1, r7
    1de8:	0030      	movs	r0, r6
    1dea:	f000 faf1 	bl	23d0 <__swsetup_r>
    1dee:	2800      	cmp	r0, #0
    1df0:	d099      	beq.n	1d26 <_vfiprintf_r+0x2e>
    1df2:	2001      	movs	r0, #1
    1df4:	4240      	negs	r0, r0
    1df6:	b01f      	add	sp, #124	; 0x7c
    1df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dfa:	2b25      	cmp	r3, #37	; 0x25
    1dfc:	d09f      	beq.n	1d3e <_vfiprintf_r+0x46>
    1dfe:	3401      	adds	r4, #1
    1e00:	e79a      	b.n	1d38 <_vfiprintf_r+0x40>
    1e02:	4b44      	ldr	r3, [pc, #272]	; (1f14 <_vfiprintf_r+0x21c>)
    1e04:	6829      	ldr	r1, [r5, #0]
    1e06:	1ac0      	subs	r0, r0, r3
    1e08:	2301      	movs	r3, #1
    1e0a:	4083      	lsls	r3, r0
    1e0c:	430b      	orrs	r3, r1
    1e0e:	602b      	str	r3, [r5, #0]
    1e10:	4664      	mov	r4, ip
    1e12:	e7b7      	b.n	1d84 <_vfiprintf_r+0x8c>
    1e14:	9b05      	ldr	r3, [sp, #20]
    1e16:	1d18      	adds	r0, r3, #4
    1e18:	681b      	ldr	r3, [r3, #0]
    1e1a:	9005      	str	r0, [sp, #20]
    1e1c:	2b00      	cmp	r3, #0
    1e1e:	db3a      	blt.n	1e96 <_vfiprintf_r+0x19e>
    1e20:	9309      	str	r3, [sp, #36]	; 0x24
    1e22:	4664      	mov	r4, ip
    1e24:	7823      	ldrb	r3, [r4, #0]
    1e26:	2b2e      	cmp	r3, #46	; 0x2e
    1e28:	d10b      	bne.n	1e42 <_vfiprintf_r+0x14a>
    1e2a:	7863      	ldrb	r3, [r4, #1]
    1e2c:	1c62      	adds	r2, r4, #1
    1e2e:	2b2a      	cmp	r3, #42	; 0x2a
    1e30:	d13f      	bne.n	1eb2 <_vfiprintf_r+0x1ba>
    1e32:	9b05      	ldr	r3, [sp, #20]
    1e34:	3402      	adds	r4, #2
    1e36:	1d1a      	adds	r2, r3, #4
    1e38:	681b      	ldr	r3, [r3, #0]
    1e3a:	9205      	str	r2, [sp, #20]
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	db35      	blt.n	1eac <_vfiprintf_r+0x1b4>
    1e40:	9307      	str	r3, [sp, #28]
    1e42:	7821      	ldrb	r1, [r4, #0]
    1e44:	2203      	movs	r2, #3
    1e46:	4836      	ldr	r0, [pc, #216]	; (1f20 <_vfiprintf_r+0x228>)
    1e48:	f000 fb82 	bl	2550 <memchr>
    1e4c:	2800      	cmp	r0, #0
    1e4e:	d007      	beq.n	1e60 <_vfiprintf_r+0x168>
    1e50:	4b33      	ldr	r3, [pc, #204]	; (1f20 <_vfiprintf_r+0x228>)
    1e52:	682a      	ldr	r2, [r5, #0]
    1e54:	1ac0      	subs	r0, r0, r3
    1e56:	2340      	movs	r3, #64	; 0x40
    1e58:	4083      	lsls	r3, r0
    1e5a:	4313      	orrs	r3, r2
    1e5c:	602b      	str	r3, [r5, #0]
    1e5e:	3401      	adds	r4, #1
    1e60:	7821      	ldrb	r1, [r4, #0]
    1e62:	1c63      	adds	r3, r4, #1
    1e64:	2206      	movs	r2, #6
    1e66:	482f      	ldr	r0, [pc, #188]	; (1f24 <_vfiprintf_r+0x22c>)
    1e68:	9302      	str	r3, [sp, #8]
    1e6a:	7629      	strb	r1, [r5, #24]
    1e6c:	f000 fb70 	bl	2550 <memchr>
    1e70:	2800      	cmp	r0, #0
    1e72:	d044      	beq.n	1efe <_vfiprintf_r+0x206>
    1e74:	4b2c      	ldr	r3, [pc, #176]	; (1f28 <_vfiprintf_r+0x230>)
    1e76:	2b00      	cmp	r3, #0
    1e78:	d12f      	bne.n	1eda <_vfiprintf_r+0x1e2>
    1e7a:	6829      	ldr	r1, [r5, #0]
    1e7c:	9b05      	ldr	r3, [sp, #20]
    1e7e:	2207      	movs	r2, #7
    1e80:	05c9      	lsls	r1, r1, #23
    1e82:	d528      	bpl.n	1ed6 <_vfiprintf_r+0x1de>
    1e84:	189b      	adds	r3, r3, r2
    1e86:	4393      	bics	r3, r2
    1e88:	3308      	adds	r3, #8
    1e8a:	9305      	str	r3, [sp, #20]
    1e8c:	696b      	ldr	r3, [r5, #20]
    1e8e:	9a03      	ldr	r2, [sp, #12]
    1e90:	189b      	adds	r3, r3, r2
    1e92:	616b      	str	r3, [r5, #20]
    1e94:	e74f      	b.n	1d36 <_vfiprintf_r+0x3e>
    1e96:	425b      	negs	r3, r3
    1e98:	60eb      	str	r3, [r5, #12]
    1e9a:	2302      	movs	r3, #2
    1e9c:	430b      	orrs	r3, r1
    1e9e:	602b      	str	r3, [r5, #0]
    1ea0:	e7bf      	b.n	1e22 <_vfiprintf_r+0x12a>
    1ea2:	434b      	muls	r3, r1
    1ea4:	3401      	adds	r4, #1
    1ea6:	189b      	adds	r3, r3, r2
    1ea8:	2001      	movs	r0, #1
    1eaa:	e789      	b.n	1dc0 <_vfiprintf_r+0xc8>
    1eac:	2301      	movs	r3, #1
    1eae:	425b      	negs	r3, r3
    1eb0:	e7c6      	b.n	1e40 <_vfiprintf_r+0x148>
    1eb2:	2300      	movs	r3, #0
    1eb4:	0014      	movs	r4, r2
    1eb6:	200a      	movs	r0, #10
    1eb8:	001a      	movs	r2, r3
    1eba:	606b      	str	r3, [r5, #4]
    1ebc:	7821      	ldrb	r1, [r4, #0]
    1ebe:	3930      	subs	r1, #48	; 0x30
    1ec0:	2909      	cmp	r1, #9
    1ec2:	d903      	bls.n	1ecc <_vfiprintf_r+0x1d4>
    1ec4:	2b00      	cmp	r3, #0
    1ec6:	d0bc      	beq.n	1e42 <_vfiprintf_r+0x14a>
    1ec8:	9207      	str	r2, [sp, #28]
    1eca:	e7ba      	b.n	1e42 <_vfiprintf_r+0x14a>
    1ecc:	4342      	muls	r2, r0
    1ece:	3401      	adds	r4, #1
    1ed0:	1852      	adds	r2, r2, r1
    1ed2:	2301      	movs	r3, #1
    1ed4:	e7f2      	b.n	1ebc <_vfiprintf_r+0x1c4>
    1ed6:	3307      	adds	r3, #7
    1ed8:	e7d5      	b.n	1e86 <_vfiprintf_r+0x18e>
    1eda:	ab05      	add	r3, sp, #20
    1edc:	9300      	str	r3, [sp, #0]
    1ede:	003a      	movs	r2, r7
    1ee0:	4b12      	ldr	r3, [pc, #72]	; (1f2c <_vfiprintf_r+0x234>)
    1ee2:	0029      	movs	r1, r5
    1ee4:	0030      	movs	r0, r6
    1ee6:	e000      	b.n	1eea <_vfiprintf_r+0x1f2>
    1ee8:	bf00      	nop
    1eea:	9003      	str	r0, [sp, #12]
    1eec:	9b03      	ldr	r3, [sp, #12]
    1eee:	3301      	adds	r3, #1
    1ef0:	d1cc      	bne.n	1e8c <_vfiprintf_r+0x194>
    1ef2:	89bb      	ldrh	r3, [r7, #12]
    1ef4:	065b      	lsls	r3, r3, #25
    1ef6:	d500      	bpl.n	1efa <_vfiprintf_r+0x202>
    1ef8:	e77b      	b.n	1df2 <_vfiprintf_r+0xfa>
    1efa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1efc:	e77b      	b.n	1df6 <_vfiprintf_r+0xfe>
    1efe:	ab05      	add	r3, sp, #20
    1f00:	9300      	str	r3, [sp, #0]
    1f02:	003a      	movs	r2, r7
    1f04:	4b09      	ldr	r3, [pc, #36]	; (1f2c <_vfiprintf_r+0x234>)
    1f06:	0029      	movs	r1, r5
    1f08:	0030      	movs	r0, r6
    1f0a:	f000 f87f 	bl	200c <_printf_i>
    1f0e:	e7ec      	b.n	1eea <_vfiprintf_r+0x1f2>
    1f10:	0000262c 	.word	0x0000262c
    1f14:	0000266c 	.word	0x0000266c
    1f18:	0000264c 	.word	0x0000264c
    1f1c:	0000260c 	.word	0x0000260c
    1f20:	00002672 	.word	0x00002672
    1f24:	00002676 	.word	0x00002676
    1f28:	00000000 	.word	0x00000000
    1f2c:	00001cd3 	.word	0x00001cd3

00001f30 <_printf_common>:
    1f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1f32:	0015      	movs	r5, r2
    1f34:	9301      	str	r3, [sp, #4]
    1f36:	688a      	ldr	r2, [r1, #8]
    1f38:	690b      	ldr	r3, [r1, #16]
    1f3a:	9000      	str	r0, [sp, #0]
    1f3c:	000c      	movs	r4, r1
    1f3e:	4293      	cmp	r3, r2
    1f40:	da00      	bge.n	1f44 <_printf_common+0x14>
    1f42:	0013      	movs	r3, r2
    1f44:	0022      	movs	r2, r4
    1f46:	602b      	str	r3, [r5, #0]
    1f48:	3243      	adds	r2, #67	; 0x43
    1f4a:	7812      	ldrb	r2, [r2, #0]
    1f4c:	2a00      	cmp	r2, #0
    1f4e:	d001      	beq.n	1f54 <_printf_common+0x24>
    1f50:	3301      	adds	r3, #1
    1f52:	602b      	str	r3, [r5, #0]
    1f54:	6823      	ldr	r3, [r4, #0]
    1f56:	069b      	lsls	r3, r3, #26
    1f58:	d502      	bpl.n	1f60 <_printf_common+0x30>
    1f5a:	682b      	ldr	r3, [r5, #0]
    1f5c:	3302      	adds	r3, #2
    1f5e:	602b      	str	r3, [r5, #0]
    1f60:	2706      	movs	r7, #6
    1f62:	6823      	ldr	r3, [r4, #0]
    1f64:	401f      	ands	r7, r3
    1f66:	d027      	beq.n	1fb8 <_printf_common+0x88>
    1f68:	0023      	movs	r3, r4
    1f6a:	3343      	adds	r3, #67	; 0x43
    1f6c:	781b      	ldrb	r3, [r3, #0]
    1f6e:	1e5a      	subs	r2, r3, #1
    1f70:	4193      	sbcs	r3, r2
    1f72:	6822      	ldr	r2, [r4, #0]
    1f74:	0692      	lsls	r2, r2, #26
    1f76:	d430      	bmi.n	1fda <_printf_common+0xaa>
    1f78:	0022      	movs	r2, r4
    1f7a:	9901      	ldr	r1, [sp, #4]
    1f7c:	3243      	adds	r2, #67	; 0x43
    1f7e:	9800      	ldr	r0, [sp, #0]
    1f80:	9e08      	ldr	r6, [sp, #32]
    1f82:	47b0      	blx	r6
    1f84:	1c43      	adds	r3, r0, #1
    1f86:	d025      	beq.n	1fd4 <_printf_common+0xa4>
    1f88:	2306      	movs	r3, #6
    1f8a:	6820      	ldr	r0, [r4, #0]
    1f8c:	682a      	ldr	r2, [r5, #0]
    1f8e:	68e1      	ldr	r1, [r4, #12]
    1f90:	4003      	ands	r3, r0
    1f92:	2500      	movs	r5, #0
    1f94:	2b04      	cmp	r3, #4
    1f96:	d103      	bne.n	1fa0 <_printf_common+0x70>
    1f98:	1a8d      	subs	r5, r1, r2
    1f9a:	43eb      	mvns	r3, r5
    1f9c:	17db      	asrs	r3, r3, #31
    1f9e:	401d      	ands	r5, r3
    1fa0:	68a3      	ldr	r3, [r4, #8]
    1fa2:	6922      	ldr	r2, [r4, #16]
    1fa4:	4293      	cmp	r3, r2
    1fa6:	dd01      	ble.n	1fac <_printf_common+0x7c>
    1fa8:	1a9b      	subs	r3, r3, r2
    1faa:	18ed      	adds	r5, r5, r3
    1fac:	2700      	movs	r7, #0
    1fae:	42bd      	cmp	r5, r7
    1fb0:	d120      	bne.n	1ff4 <_printf_common+0xc4>
    1fb2:	2000      	movs	r0, #0
    1fb4:	e010      	b.n	1fd8 <_printf_common+0xa8>
    1fb6:	3701      	adds	r7, #1
    1fb8:	68e3      	ldr	r3, [r4, #12]
    1fba:	682a      	ldr	r2, [r5, #0]
    1fbc:	1a9b      	subs	r3, r3, r2
    1fbe:	429f      	cmp	r7, r3
    1fc0:	dad2      	bge.n	1f68 <_printf_common+0x38>
    1fc2:	0022      	movs	r2, r4
    1fc4:	2301      	movs	r3, #1
    1fc6:	3219      	adds	r2, #25
    1fc8:	9901      	ldr	r1, [sp, #4]
    1fca:	9800      	ldr	r0, [sp, #0]
    1fcc:	9e08      	ldr	r6, [sp, #32]
    1fce:	47b0      	blx	r6
    1fd0:	1c43      	adds	r3, r0, #1
    1fd2:	d1f0      	bne.n	1fb6 <_printf_common+0x86>
    1fd4:	2001      	movs	r0, #1
    1fd6:	4240      	negs	r0, r0
    1fd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1fda:	2030      	movs	r0, #48	; 0x30
    1fdc:	18e1      	adds	r1, r4, r3
    1fde:	3143      	adds	r1, #67	; 0x43
    1fe0:	7008      	strb	r0, [r1, #0]
    1fe2:	0021      	movs	r1, r4
    1fe4:	1c5a      	adds	r2, r3, #1
    1fe6:	3145      	adds	r1, #69	; 0x45
    1fe8:	7809      	ldrb	r1, [r1, #0]
    1fea:	18a2      	adds	r2, r4, r2
    1fec:	3243      	adds	r2, #67	; 0x43
    1fee:	3302      	adds	r3, #2
    1ff0:	7011      	strb	r1, [r2, #0]
    1ff2:	e7c1      	b.n	1f78 <_printf_common+0x48>
    1ff4:	0022      	movs	r2, r4
    1ff6:	2301      	movs	r3, #1
    1ff8:	321a      	adds	r2, #26
    1ffa:	9901      	ldr	r1, [sp, #4]
    1ffc:	9800      	ldr	r0, [sp, #0]
    1ffe:	9e08      	ldr	r6, [sp, #32]
    2000:	47b0      	blx	r6
    2002:	1c43      	adds	r3, r0, #1
    2004:	d0e6      	beq.n	1fd4 <_printf_common+0xa4>
    2006:	3701      	adds	r7, #1
    2008:	e7d1      	b.n	1fae <_printf_common+0x7e>
	...

0000200c <_printf_i>:
    200c:	b5f0      	push	{r4, r5, r6, r7, lr}
    200e:	b08b      	sub	sp, #44	; 0x2c
    2010:	9206      	str	r2, [sp, #24]
    2012:	000a      	movs	r2, r1
    2014:	3243      	adds	r2, #67	; 0x43
    2016:	9307      	str	r3, [sp, #28]
    2018:	9005      	str	r0, [sp, #20]
    201a:	9204      	str	r2, [sp, #16]
    201c:	7e0a      	ldrb	r2, [r1, #24]
    201e:	000c      	movs	r4, r1
    2020:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2022:	2a6e      	cmp	r2, #110	; 0x6e
    2024:	d100      	bne.n	2028 <_printf_i+0x1c>
    2026:	e08f      	b.n	2148 <_printf_i+0x13c>
    2028:	d817      	bhi.n	205a <_printf_i+0x4e>
    202a:	2a63      	cmp	r2, #99	; 0x63
    202c:	d02c      	beq.n	2088 <_printf_i+0x7c>
    202e:	d808      	bhi.n	2042 <_printf_i+0x36>
    2030:	2a00      	cmp	r2, #0
    2032:	d100      	bne.n	2036 <_printf_i+0x2a>
    2034:	e099      	b.n	216a <_printf_i+0x15e>
    2036:	2a58      	cmp	r2, #88	; 0x58
    2038:	d054      	beq.n	20e4 <_printf_i+0xd8>
    203a:	0026      	movs	r6, r4
    203c:	3642      	adds	r6, #66	; 0x42
    203e:	7032      	strb	r2, [r6, #0]
    2040:	e029      	b.n	2096 <_printf_i+0x8a>
    2042:	2a64      	cmp	r2, #100	; 0x64
    2044:	d001      	beq.n	204a <_printf_i+0x3e>
    2046:	2a69      	cmp	r2, #105	; 0x69
    2048:	d1f7      	bne.n	203a <_printf_i+0x2e>
    204a:	6821      	ldr	r1, [r4, #0]
    204c:	681a      	ldr	r2, [r3, #0]
    204e:	0608      	lsls	r0, r1, #24
    2050:	d523      	bpl.n	209a <_printf_i+0x8e>
    2052:	1d11      	adds	r1, r2, #4
    2054:	6019      	str	r1, [r3, #0]
    2056:	6815      	ldr	r5, [r2, #0]
    2058:	e025      	b.n	20a6 <_printf_i+0x9a>
    205a:	2a73      	cmp	r2, #115	; 0x73
    205c:	d100      	bne.n	2060 <_printf_i+0x54>
    205e:	e088      	b.n	2172 <_printf_i+0x166>
    2060:	d808      	bhi.n	2074 <_printf_i+0x68>
    2062:	2a6f      	cmp	r2, #111	; 0x6f
    2064:	d029      	beq.n	20ba <_printf_i+0xae>
    2066:	2a70      	cmp	r2, #112	; 0x70
    2068:	d1e7      	bne.n	203a <_printf_i+0x2e>
    206a:	2220      	movs	r2, #32
    206c:	6809      	ldr	r1, [r1, #0]
    206e:	430a      	orrs	r2, r1
    2070:	6022      	str	r2, [r4, #0]
    2072:	e003      	b.n	207c <_printf_i+0x70>
    2074:	2a75      	cmp	r2, #117	; 0x75
    2076:	d020      	beq.n	20ba <_printf_i+0xae>
    2078:	2a78      	cmp	r2, #120	; 0x78
    207a:	d1de      	bne.n	203a <_printf_i+0x2e>
    207c:	0022      	movs	r2, r4
    207e:	2178      	movs	r1, #120	; 0x78
    2080:	3245      	adds	r2, #69	; 0x45
    2082:	7011      	strb	r1, [r2, #0]
    2084:	4a6c      	ldr	r2, [pc, #432]	; (2238 <_printf_i+0x22c>)
    2086:	e030      	b.n	20ea <_printf_i+0xde>
    2088:	000e      	movs	r6, r1
    208a:	681a      	ldr	r2, [r3, #0]
    208c:	3642      	adds	r6, #66	; 0x42
    208e:	1d11      	adds	r1, r2, #4
    2090:	6019      	str	r1, [r3, #0]
    2092:	6813      	ldr	r3, [r2, #0]
    2094:	7033      	strb	r3, [r6, #0]
    2096:	2301      	movs	r3, #1
    2098:	e079      	b.n	218e <_printf_i+0x182>
    209a:	0649      	lsls	r1, r1, #25
    209c:	d5d9      	bpl.n	2052 <_printf_i+0x46>
    209e:	1d11      	adds	r1, r2, #4
    20a0:	6019      	str	r1, [r3, #0]
    20a2:	2300      	movs	r3, #0
    20a4:	5ed5      	ldrsh	r5, [r2, r3]
    20a6:	2d00      	cmp	r5, #0
    20a8:	da03      	bge.n	20b2 <_printf_i+0xa6>
    20aa:	232d      	movs	r3, #45	; 0x2d
    20ac:	9a04      	ldr	r2, [sp, #16]
    20ae:	426d      	negs	r5, r5
    20b0:	7013      	strb	r3, [r2, #0]
    20b2:	4b62      	ldr	r3, [pc, #392]	; (223c <_printf_i+0x230>)
    20b4:	270a      	movs	r7, #10
    20b6:	9303      	str	r3, [sp, #12]
    20b8:	e02f      	b.n	211a <_printf_i+0x10e>
    20ba:	6820      	ldr	r0, [r4, #0]
    20bc:	6819      	ldr	r1, [r3, #0]
    20be:	0605      	lsls	r5, r0, #24
    20c0:	d503      	bpl.n	20ca <_printf_i+0xbe>
    20c2:	1d08      	adds	r0, r1, #4
    20c4:	6018      	str	r0, [r3, #0]
    20c6:	680d      	ldr	r5, [r1, #0]
    20c8:	e005      	b.n	20d6 <_printf_i+0xca>
    20ca:	0640      	lsls	r0, r0, #25
    20cc:	d5f9      	bpl.n	20c2 <_printf_i+0xb6>
    20ce:	680d      	ldr	r5, [r1, #0]
    20d0:	1d08      	adds	r0, r1, #4
    20d2:	6018      	str	r0, [r3, #0]
    20d4:	b2ad      	uxth	r5, r5
    20d6:	4b59      	ldr	r3, [pc, #356]	; (223c <_printf_i+0x230>)
    20d8:	2708      	movs	r7, #8
    20da:	9303      	str	r3, [sp, #12]
    20dc:	2a6f      	cmp	r2, #111	; 0x6f
    20de:	d018      	beq.n	2112 <_printf_i+0x106>
    20e0:	270a      	movs	r7, #10
    20e2:	e016      	b.n	2112 <_printf_i+0x106>
    20e4:	3145      	adds	r1, #69	; 0x45
    20e6:	700a      	strb	r2, [r1, #0]
    20e8:	4a54      	ldr	r2, [pc, #336]	; (223c <_printf_i+0x230>)
    20ea:	9203      	str	r2, [sp, #12]
    20ec:	681a      	ldr	r2, [r3, #0]
    20ee:	6821      	ldr	r1, [r4, #0]
    20f0:	1d10      	adds	r0, r2, #4
    20f2:	6018      	str	r0, [r3, #0]
    20f4:	6815      	ldr	r5, [r2, #0]
    20f6:	0608      	lsls	r0, r1, #24
    20f8:	d522      	bpl.n	2140 <_printf_i+0x134>
    20fa:	07cb      	lsls	r3, r1, #31
    20fc:	d502      	bpl.n	2104 <_printf_i+0xf8>
    20fe:	2320      	movs	r3, #32
    2100:	4319      	orrs	r1, r3
    2102:	6021      	str	r1, [r4, #0]
    2104:	2710      	movs	r7, #16
    2106:	2d00      	cmp	r5, #0
    2108:	d103      	bne.n	2112 <_printf_i+0x106>
    210a:	2320      	movs	r3, #32
    210c:	6822      	ldr	r2, [r4, #0]
    210e:	439a      	bics	r2, r3
    2110:	6022      	str	r2, [r4, #0]
    2112:	0023      	movs	r3, r4
    2114:	2200      	movs	r2, #0
    2116:	3343      	adds	r3, #67	; 0x43
    2118:	701a      	strb	r2, [r3, #0]
    211a:	6863      	ldr	r3, [r4, #4]
    211c:	60a3      	str	r3, [r4, #8]
    211e:	2b00      	cmp	r3, #0
    2120:	db5c      	blt.n	21dc <_printf_i+0x1d0>
    2122:	2204      	movs	r2, #4
    2124:	6821      	ldr	r1, [r4, #0]
    2126:	4391      	bics	r1, r2
    2128:	6021      	str	r1, [r4, #0]
    212a:	2d00      	cmp	r5, #0
    212c:	d158      	bne.n	21e0 <_printf_i+0x1d4>
    212e:	9e04      	ldr	r6, [sp, #16]
    2130:	2b00      	cmp	r3, #0
    2132:	d064      	beq.n	21fe <_printf_i+0x1f2>
    2134:	0026      	movs	r6, r4
    2136:	9b03      	ldr	r3, [sp, #12]
    2138:	3642      	adds	r6, #66	; 0x42
    213a:	781b      	ldrb	r3, [r3, #0]
    213c:	7033      	strb	r3, [r6, #0]
    213e:	e05e      	b.n	21fe <_printf_i+0x1f2>
    2140:	0648      	lsls	r0, r1, #25
    2142:	d5da      	bpl.n	20fa <_printf_i+0xee>
    2144:	b2ad      	uxth	r5, r5
    2146:	e7d8      	b.n	20fa <_printf_i+0xee>
    2148:	6809      	ldr	r1, [r1, #0]
    214a:	681a      	ldr	r2, [r3, #0]
    214c:	0608      	lsls	r0, r1, #24
    214e:	d505      	bpl.n	215c <_printf_i+0x150>
    2150:	1d11      	adds	r1, r2, #4
    2152:	6019      	str	r1, [r3, #0]
    2154:	6813      	ldr	r3, [r2, #0]
    2156:	6962      	ldr	r2, [r4, #20]
    2158:	601a      	str	r2, [r3, #0]
    215a:	e006      	b.n	216a <_printf_i+0x15e>
    215c:	0649      	lsls	r1, r1, #25
    215e:	d5f7      	bpl.n	2150 <_printf_i+0x144>
    2160:	1d11      	adds	r1, r2, #4
    2162:	6019      	str	r1, [r3, #0]
    2164:	6813      	ldr	r3, [r2, #0]
    2166:	8aa2      	ldrh	r2, [r4, #20]
    2168:	801a      	strh	r2, [r3, #0]
    216a:	2300      	movs	r3, #0
    216c:	9e04      	ldr	r6, [sp, #16]
    216e:	6123      	str	r3, [r4, #16]
    2170:	e054      	b.n	221c <_printf_i+0x210>
    2172:	681a      	ldr	r2, [r3, #0]
    2174:	1d11      	adds	r1, r2, #4
    2176:	6019      	str	r1, [r3, #0]
    2178:	6816      	ldr	r6, [r2, #0]
    217a:	2100      	movs	r1, #0
    217c:	6862      	ldr	r2, [r4, #4]
    217e:	0030      	movs	r0, r6
    2180:	f000 f9e6 	bl	2550 <memchr>
    2184:	2800      	cmp	r0, #0
    2186:	d001      	beq.n	218c <_printf_i+0x180>
    2188:	1b80      	subs	r0, r0, r6
    218a:	6060      	str	r0, [r4, #4]
    218c:	6863      	ldr	r3, [r4, #4]
    218e:	6123      	str	r3, [r4, #16]
    2190:	2300      	movs	r3, #0
    2192:	9a04      	ldr	r2, [sp, #16]
    2194:	7013      	strb	r3, [r2, #0]
    2196:	e041      	b.n	221c <_printf_i+0x210>
    2198:	6923      	ldr	r3, [r4, #16]
    219a:	0032      	movs	r2, r6
    219c:	9906      	ldr	r1, [sp, #24]
    219e:	9805      	ldr	r0, [sp, #20]
    21a0:	9d07      	ldr	r5, [sp, #28]
    21a2:	47a8      	blx	r5
    21a4:	1c43      	adds	r3, r0, #1
    21a6:	d043      	beq.n	2230 <_printf_i+0x224>
    21a8:	6823      	ldr	r3, [r4, #0]
    21aa:	2500      	movs	r5, #0
    21ac:	079b      	lsls	r3, r3, #30
    21ae:	d40f      	bmi.n	21d0 <_printf_i+0x1c4>
    21b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    21b2:	68e0      	ldr	r0, [r4, #12]
    21b4:	4298      	cmp	r0, r3
    21b6:	da3d      	bge.n	2234 <_printf_i+0x228>
    21b8:	0018      	movs	r0, r3
    21ba:	e03b      	b.n	2234 <_printf_i+0x228>
    21bc:	0022      	movs	r2, r4
    21be:	2301      	movs	r3, #1
    21c0:	3219      	adds	r2, #25
    21c2:	9906      	ldr	r1, [sp, #24]
    21c4:	9805      	ldr	r0, [sp, #20]
    21c6:	9e07      	ldr	r6, [sp, #28]
    21c8:	47b0      	blx	r6
    21ca:	1c43      	adds	r3, r0, #1
    21cc:	d030      	beq.n	2230 <_printf_i+0x224>
    21ce:	3501      	adds	r5, #1
    21d0:	68e3      	ldr	r3, [r4, #12]
    21d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    21d4:	1a9b      	subs	r3, r3, r2
    21d6:	429d      	cmp	r5, r3
    21d8:	dbf0      	blt.n	21bc <_printf_i+0x1b0>
    21da:	e7e9      	b.n	21b0 <_printf_i+0x1a4>
    21dc:	2d00      	cmp	r5, #0
    21de:	d0a9      	beq.n	2134 <_printf_i+0x128>
    21e0:	9e04      	ldr	r6, [sp, #16]
    21e2:	0028      	movs	r0, r5
    21e4:	0039      	movs	r1, r7
    21e6:	f7ff f987 	bl	14f8 <__aeabi_uidivmod>
    21ea:	9b03      	ldr	r3, [sp, #12]
    21ec:	3e01      	subs	r6, #1
    21ee:	5c5b      	ldrb	r3, [r3, r1]
    21f0:	0028      	movs	r0, r5
    21f2:	7033      	strb	r3, [r6, #0]
    21f4:	0039      	movs	r1, r7
    21f6:	f7ff f8f9 	bl	13ec <__udivsi3>
    21fa:	1e05      	subs	r5, r0, #0
    21fc:	d1f1      	bne.n	21e2 <_printf_i+0x1d6>
    21fe:	2f08      	cmp	r7, #8
    2200:	d109      	bne.n	2216 <_printf_i+0x20a>
    2202:	6823      	ldr	r3, [r4, #0]
    2204:	07db      	lsls	r3, r3, #31
    2206:	d506      	bpl.n	2216 <_printf_i+0x20a>
    2208:	6863      	ldr	r3, [r4, #4]
    220a:	6922      	ldr	r2, [r4, #16]
    220c:	4293      	cmp	r3, r2
    220e:	dc02      	bgt.n	2216 <_printf_i+0x20a>
    2210:	2330      	movs	r3, #48	; 0x30
    2212:	3e01      	subs	r6, #1
    2214:	7033      	strb	r3, [r6, #0]
    2216:	9b04      	ldr	r3, [sp, #16]
    2218:	1b9b      	subs	r3, r3, r6
    221a:	6123      	str	r3, [r4, #16]
    221c:	9b07      	ldr	r3, [sp, #28]
    221e:	aa09      	add	r2, sp, #36	; 0x24
    2220:	9300      	str	r3, [sp, #0]
    2222:	0021      	movs	r1, r4
    2224:	9b06      	ldr	r3, [sp, #24]
    2226:	9805      	ldr	r0, [sp, #20]
    2228:	f7ff fe82 	bl	1f30 <_printf_common>
    222c:	1c43      	adds	r3, r0, #1
    222e:	d1b3      	bne.n	2198 <_printf_i+0x18c>
    2230:	2001      	movs	r0, #1
    2232:	4240      	negs	r0, r0
    2234:	b00b      	add	sp, #44	; 0x2c
    2236:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2238:	0000268e 	.word	0x0000268e
    223c:	0000267d 	.word	0x0000267d

00002240 <_sbrk_r>:
    2240:	2300      	movs	r3, #0
    2242:	b570      	push	{r4, r5, r6, lr}
    2244:	4c06      	ldr	r4, [pc, #24]	; (2260 <_sbrk_r+0x20>)
    2246:	0005      	movs	r5, r0
    2248:	0008      	movs	r0, r1
    224a:	6023      	str	r3, [r4, #0]
    224c:	f7ff f8a2 	bl	1394 <_sbrk>
    2250:	1c43      	adds	r3, r0, #1
    2252:	d103      	bne.n	225c <_sbrk_r+0x1c>
    2254:	6823      	ldr	r3, [r4, #0]
    2256:	2b00      	cmp	r3, #0
    2258:	d000      	beq.n	225c <_sbrk_r+0x1c>
    225a:	602b      	str	r3, [r5, #0]
    225c:	bd70      	pop	{r4, r5, r6, pc}
    225e:	46c0      	nop			; (mov r8, r8)
    2260:	20000124 	.word	0x20000124

00002264 <__sread>:
    2264:	b570      	push	{r4, r5, r6, lr}
    2266:	000c      	movs	r4, r1
    2268:	250e      	movs	r5, #14
    226a:	5f49      	ldrsh	r1, [r1, r5]
    226c:	f000 f97e 	bl	256c <_read_r>
    2270:	2800      	cmp	r0, #0
    2272:	db03      	blt.n	227c <__sread+0x18>
    2274:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2276:	181b      	adds	r3, r3, r0
    2278:	6563      	str	r3, [r4, #84]	; 0x54
    227a:	bd70      	pop	{r4, r5, r6, pc}
    227c:	89a3      	ldrh	r3, [r4, #12]
    227e:	4a02      	ldr	r2, [pc, #8]	; (2288 <__sread+0x24>)
    2280:	4013      	ands	r3, r2
    2282:	81a3      	strh	r3, [r4, #12]
    2284:	e7f9      	b.n	227a <__sread+0x16>
    2286:	46c0      	nop			; (mov r8, r8)
    2288:	ffffefff 	.word	0xffffefff

0000228c <__swrite>:
    228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    228e:	001f      	movs	r7, r3
    2290:	898b      	ldrh	r3, [r1, #12]
    2292:	0005      	movs	r5, r0
    2294:	000c      	movs	r4, r1
    2296:	0016      	movs	r6, r2
    2298:	05db      	lsls	r3, r3, #23
    229a:	d505      	bpl.n	22a8 <__swrite+0x1c>
    229c:	230e      	movs	r3, #14
    229e:	5ec9      	ldrsh	r1, [r1, r3]
    22a0:	2200      	movs	r2, #0
    22a2:	2302      	movs	r3, #2
    22a4:	f000 f940 	bl	2528 <_lseek_r>
    22a8:	89a3      	ldrh	r3, [r4, #12]
    22aa:	4a05      	ldr	r2, [pc, #20]	; (22c0 <__swrite+0x34>)
    22ac:	0028      	movs	r0, r5
    22ae:	4013      	ands	r3, r2
    22b0:	81a3      	strh	r3, [r4, #12]
    22b2:	0032      	movs	r2, r6
    22b4:	230e      	movs	r3, #14
    22b6:	5ee1      	ldrsh	r1, [r4, r3]
    22b8:	003b      	movs	r3, r7
    22ba:	f000 f875 	bl	23a8 <_write_r>
    22be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22c0:	ffffefff 	.word	0xffffefff

000022c4 <__sseek>:
    22c4:	b570      	push	{r4, r5, r6, lr}
    22c6:	000c      	movs	r4, r1
    22c8:	250e      	movs	r5, #14
    22ca:	5f49      	ldrsh	r1, [r1, r5]
    22cc:	f000 f92c 	bl	2528 <_lseek_r>
    22d0:	89a3      	ldrh	r3, [r4, #12]
    22d2:	1c42      	adds	r2, r0, #1
    22d4:	d103      	bne.n	22de <__sseek+0x1a>
    22d6:	4a05      	ldr	r2, [pc, #20]	; (22ec <__sseek+0x28>)
    22d8:	4013      	ands	r3, r2
    22da:	81a3      	strh	r3, [r4, #12]
    22dc:	bd70      	pop	{r4, r5, r6, pc}
    22de:	2280      	movs	r2, #128	; 0x80
    22e0:	0152      	lsls	r2, r2, #5
    22e2:	4313      	orrs	r3, r2
    22e4:	81a3      	strh	r3, [r4, #12]
    22e6:	6560      	str	r0, [r4, #84]	; 0x54
    22e8:	e7f8      	b.n	22dc <__sseek+0x18>
    22ea:	46c0      	nop			; (mov r8, r8)
    22ec:	ffffefff 	.word	0xffffefff

000022f0 <__sclose>:
    22f0:	b510      	push	{r4, lr}
    22f2:	230e      	movs	r3, #14
    22f4:	5ec9      	ldrsh	r1, [r1, r3]
    22f6:	f000 f8e1 	bl	24bc <_close_r>
    22fa:	bd10      	pop	{r4, pc}

000022fc <__swbuf_r>:
    22fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22fe:	0005      	movs	r5, r0
    2300:	000e      	movs	r6, r1
    2302:	0014      	movs	r4, r2
    2304:	2800      	cmp	r0, #0
    2306:	d004      	beq.n	2312 <__swbuf_r+0x16>
    2308:	6983      	ldr	r3, [r0, #24]
    230a:	2b00      	cmp	r3, #0
    230c:	d101      	bne.n	2312 <__swbuf_r+0x16>
    230e:	f7ff fb17 	bl	1940 <__sinit>
    2312:	4b22      	ldr	r3, [pc, #136]	; (239c <__swbuf_r+0xa0>)
    2314:	429c      	cmp	r4, r3
    2316:	d12d      	bne.n	2374 <__swbuf_r+0x78>
    2318:	686c      	ldr	r4, [r5, #4]
    231a:	69a3      	ldr	r3, [r4, #24]
    231c:	60a3      	str	r3, [r4, #8]
    231e:	89a3      	ldrh	r3, [r4, #12]
    2320:	071b      	lsls	r3, r3, #28
    2322:	d531      	bpl.n	2388 <__swbuf_r+0x8c>
    2324:	6923      	ldr	r3, [r4, #16]
    2326:	2b00      	cmp	r3, #0
    2328:	d02e      	beq.n	2388 <__swbuf_r+0x8c>
    232a:	6823      	ldr	r3, [r4, #0]
    232c:	6922      	ldr	r2, [r4, #16]
    232e:	b2f7      	uxtb	r7, r6
    2330:	1a98      	subs	r0, r3, r2
    2332:	6963      	ldr	r3, [r4, #20]
    2334:	b2f6      	uxtb	r6, r6
    2336:	4298      	cmp	r0, r3
    2338:	db05      	blt.n	2346 <__swbuf_r+0x4a>
    233a:	0021      	movs	r1, r4
    233c:	0028      	movs	r0, r5
    233e:	f7ff fa91 	bl	1864 <_fflush_r>
    2342:	2800      	cmp	r0, #0
    2344:	d126      	bne.n	2394 <__swbuf_r+0x98>
    2346:	68a3      	ldr	r3, [r4, #8]
    2348:	3001      	adds	r0, #1
    234a:	3b01      	subs	r3, #1
    234c:	60a3      	str	r3, [r4, #8]
    234e:	6823      	ldr	r3, [r4, #0]
    2350:	1c5a      	adds	r2, r3, #1
    2352:	6022      	str	r2, [r4, #0]
    2354:	701f      	strb	r7, [r3, #0]
    2356:	6963      	ldr	r3, [r4, #20]
    2358:	4298      	cmp	r0, r3
    235a:	d004      	beq.n	2366 <__swbuf_r+0x6a>
    235c:	89a3      	ldrh	r3, [r4, #12]
    235e:	07db      	lsls	r3, r3, #31
    2360:	d51a      	bpl.n	2398 <__swbuf_r+0x9c>
    2362:	2e0a      	cmp	r6, #10
    2364:	d118      	bne.n	2398 <__swbuf_r+0x9c>
    2366:	0021      	movs	r1, r4
    2368:	0028      	movs	r0, r5
    236a:	f7ff fa7b 	bl	1864 <_fflush_r>
    236e:	2800      	cmp	r0, #0
    2370:	d012      	beq.n	2398 <__swbuf_r+0x9c>
    2372:	e00f      	b.n	2394 <__swbuf_r+0x98>
    2374:	4b0a      	ldr	r3, [pc, #40]	; (23a0 <__swbuf_r+0xa4>)
    2376:	429c      	cmp	r4, r3
    2378:	d101      	bne.n	237e <__swbuf_r+0x82>
    237a:	68ac      	ldr	r4, [r5, #8]
    237c:	e7cd      	b.n	231a <__swbuf_r+0x1e>
    237e:	4b09      	ldr	r3, [pc, #36]	; (23a4 <__swbuf_r+0xa8>)
    2380:	429c      	cmp	r4, r3
    2382:	d1ca      	bne.n	231a <__swbuf_r+0x1e>
    2384:	68ec      	ldr	r4, [r5, #12]
    2386:	e7c8      	b.n	231a <__swbuf_r+0x1e>
    2388:	0021      	movs	r1, r4
    238a:	0028      	movs	r0, r5
    238c:	f000 f820 	bl	23d0 <__swsetup_r>
    2390:	2800      	cmp	r0, #0
    2392:	d0ca      	beq.n	232a <__swbuf_r+0x2e>
    2394:	2601      	movs	r6, #1
    2396:	4276      	negs	r6, r6
    2398:	0030      	movs	r0, r6
    239a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    239c:	0000262c 	.word	0x0000262c
    23a0:	0000264c 	.word	0x0000264c
    23a4:	0000260c 	.word	0x0000260c

000023a8 <_write_r>:
    23a8:	b570      	push	{r4, r5, r6, lr}
    23aa:	0005      	movs	r5, r0
    23ac:	0008      	movs	r0, r1
    23ae:	0011      	movs	r1, r2
    23b0:	2200      	movs	r2, #0
    23b2:	4c06      	ldr	r4, [pc, #24]	; (23cc <_write_r+0x24>)
    23b4:	6022      	str	r2, [r4, #0]
    23b6:	001a      	movs	r2, r3
    23b8:	f7fd ff74 	bl	2a4 <_write>
    23bc:	1c43      	adds	r3, r0, #1
    23be:	d103      	bne.n	23c8 <_write_r+0x20>
    23c0:	6823      	ldr	r3, [r4, #0]
    23c2:	2b00      	cmp	r3, #0
    23c4:	d000      	beq.n	23c8 <_write_r+0x20>
    23c6:	602b      	str	r3, [r5, #0]
    23c8:	bd70      	pop	{r4, r5, r6, pc}
    23ca:	46c0      	nop			; (mov r8, r8)
    23cc:	20000124 	.word	0x20000124

000023d0 <__swsetup_r>:
    23d0:	4b36      	ldr	r3, [pc, #216]	; (24ac <__swsetup_r+0xdc>)
    23d2:	b570      	push	{r4, r5, r6, lr}
    23d4:	681d      	ldr	r5, [r3, #0]
    23d6:	0006      	movs	r6, r0
    23d8:	000c      	movs	r4, r1
    23da:	2d00      	cmp	r5, #0
    23dc:	d005      	beq.n	23ea <__swsetup_r+0x1a>
    23de:	69ab      	ldr	r3, [r5, #24]
    23e0:	2b00      	cmp	r3, #0
    23e2:	d102      	bne.n	23ea <__swsetup_r+0x1a>
    23e4:	0028      	movs	r0, r5
    23e6:	f7ff faab 	bl	1940 <__sinit>
    23ea:	4b31      	ldr	r3, [pc, #196]	; (24b0 <__swsetup_r+0xe0>)
    23ec:	429c      	cmp	r4, r3
    23ee:	d10f      	bne.n	2410 <__swsetup_r+0x40>
    23f0:	686c      	ldr	r4, [r5, #4]
    23f2:	230c      	movs	r3, #12
    23f4:	5ee2      	ldrsh	r2, [r4, r3]
    23f6:	b293      	uxth	r3, r2
    23f8:	0719      	lsls	r1, r3, #28
    23fa:	d42d      	bmi.n	2458 <__swsetup_r+0x88>
    23fc:	06d9      	lsls	r1, r3, #27
    23fe:	d411      	bmi.n	2424 <__swsetup_r+0x54>
    2400:	2309      	movs	r3, #9
    2402:	2001      	movs	r0, #1
    2404:	6033      	str	r3, [r6, #0]
    2406:	3337      	adds	r3, #55	; 0x37
    2408:	4313      	orrs	r3, r2
    240a:	81a3      	strh	r3, [r4, #12]
    240c:	4240      	negs	r0, r0
    240e:	bd70      	pop	{r4, r5, r6, pc}
    2410:	4b28      	ldr	r3, [pc, #160]	; (24b4 <__swsetup_r+0xe4>)
    2412:	429c      	cmp	r4, r3
    2414:	d101      	bne.n	241a <__swsetup_r+0x4a>
    2416:	68ac      	ldr	r4, [r5, #8]
    2418:	e7eb      	b.n	23f2 <__swsetup_r+0x22>
    241a:	4b27      	ldr	r3, [pc, #156]	; (24b8 <__swsetup_r+0xe8>)
    241c:	429c      	cmp	r4, r3
    241e:	d1e8      	bne.n	23f2 <__swsetup_r+0x22>
    2420:	68ec      	ldr	r4, [r5, #12]
    2422:	e7e6      	b.n	23f2 <__swsetup_r+0x22>
    2424:	075b      	lsls	r3, r3, #29
    2426:	d513      	bpl.n	2450 <__swsetup_r+0x80>
    2428:	6b61      	ldr	r1, [r4, #52]	; 0x34
    242a:	2900      	cmp	r1, #0
    242c:	d008      	beq.n	2440 <__swsetup_r+0x70>
    242e:	0023      	movs	r3, r4
    2430:	3344      	adds	r3, #68	; 0x44
    2432:	4299      	cmp	r1, r3
    2434:	d002      	beq.n	243c <__swsetup_r+0x6c>
    2436:	0030      	movs	r0, r6
    2438:	f7ff fb8e 	bl	1b58 <_free_r>
    243c:	2300      	movs	r3, #0
    243e:	6363      	str	r3, [r4, #52]	; 0x34
    2440:	2224      	movs	r2, #36	; 0x24
    2442:	89a3      	ldrh	r3, [r4, #12]
    2444:	4393      	bics	r3, r2
    2446:	81a3      	strh	r3, [r4, #12]
    2448:	2300      	movs	r3, #0
    244a:	6063      	str	r3, [r4, #4]
    244c:	6923      	ldr	r3, [r4, #16]
    244e:	6023      	str	r3, [r4, #0]
    2450:	2308      	movs	r3, #8
    2452:	89a2      	ldrh	r2, [r4, #12]
    2454:	4313      	orrs	r3, r2
    2456:	81a3      	strh	r3, [r4, #12]
    2458:	6923      	ldr	r3, [r4, #16]
    245a:	2b00      	cmp	r3, #0
    245c:	d10b      	bne.n	2476 <__swsetup_r+0xa6>
    245e:	21a0      	movs	r1, #160	; 0xa0
    2460:	2280      	movs	r2, #128	; 0x80
    2462:	89a3      	ldrh	r3, [r4, #12]
    2464:	0089      	lsls	r1, r1, #2
    2466:	0092      	lsls	r2, r2, #2
    2468:	400b      	ands	r3, r1
    246a:	4293      	cmp	r3, r2
    246c:	d003      	beq.n	2476 <__swsetup_r+0xa6>
    246e:	0021      	movs	r1, r4
    2470:	0030      	movs	r0, r6
    2472:	f7ff fb23 	bl	1abc <__smakebuf_r>
    2476:	2301      	movs	r3, #1
    2478:	89a2      	ldrh	r2, [r4, #12]
    247a:	4013      	ands	r3, r2
    247c:	d011      	beq.n	24a2 <__swsetup_r+0xd2>
    247e:	2300      	movs	r3, #0
    2480:	60a3      	str	r3, [r4, #8]
    2482:	6963      	ldr	r3, [r4, #20]
    2484:	425b      	negs	r3, r3
    2486:	61a3      	str	r3, [r4, #24]
    2488:	2000      	movs	r0, #0
    248a:	6923      	ldr	r3, [r4, #16]
    248c:	4283      	cmp	r3, r0
    248e:	d1be      	bne.n	240e <__swsetup_r+0x3e>
    2490:	230c      	movs	r3, #12
    2492:	5ee2      	ldrsh	r2, [r4, r3]
    2494:	0613      	lsls	r3, r2, #24
    2496:	d5ba      	bpl.n	240e <__swsetup_r+0x3e>
    2498:	2340      	movs	r3, #64	; 0x40
    249a:	4313      	orrs	r3, r2
    249c:	81a3      	strh	r3, [r4, #12]
    249e:	3801      	subs	r0, #1
    24a0:	e7b5      	b.n	240e <__swsetup_r+0x3e>
    24a2:	0792      	lsls	r2, r2, #30
    24a4:	d400      	bmi.n	24a8 <__swsetup_r+0xd8>
    24a6:	6963      	ldr	r3, [r4, #20]
    24a8:	60a3      	str	r3, [r4, #8]
    24aa:	e7ed      	b.n	2488 <__swsetup_r+0xb8>
    24ac:	20000004 	.word	0x20000004
    24b0:	0000262c 	.word	0x0000262c
    24b4:	0000264c 	.word	0x0000264c
    24b8:	0000260c 	.word	0x0000260c

000024bc <_close_r>:
    24bc:	2300      	movs	r3, #0
    24be:	b570      	push	{r4, r5, r6, lr}
    24c0:	4c06      	ldr	r4, [pc, #24]	; (24dc <_close_r+0x20>)
    24c2:	0005      	movs	r5, r0
    24c4:	0008      	movs	r0, r1
    24c6:	6023      	str	r3, [r4, #0]
    24c8:	f7fe ff76 	bl	13b8 <_close>
    24cc:	1c43      	adds	r3, r0, #1
    24ce:	d103      	bne.n	24d8 <_close_r+0x1c>
    24d0:	6823      	ldr	r3, [r4, #0]
    24d2:	2b00      	cmp	r3, #0
    24d4:	d000      	beq.n	24d8 <_close_r+0x1c>
    24d6:	602b      	str	r3, [r5, #0]
    24d8:	bd70      	pop	{r4, r5, r6, pc}
    24da:	46c0      	nop			; (mov r8, r8)
    24dc:	20000124 	.word	0x20000124

000024e0 <_fstat_r>:
    24e0:	2300      	movs	r3, #0
    24e2:	b570      	push	{r4, r5, r6, lr}
    24e4:	4c06      	ldr	r4, [pc, #24]	; (2500 <_fstat_r+0x20>)
    24e6:	0005      	movs	r5, r0
    24e8:	0008      	movs	r0, r1
    24ea:	0011      	movs	r1, r2
    24ec:	6023      	str	r3, [r4, #0]
    24ee:	f7fe ff66 	bl	13be <_fstat>
    24f2:	1c43      	adds	r3, r0, #1
    24f4:	d103      	bne.n	24fe <_fstat_r+0x1e>
    24f6:	6823      	ldr	r3, [r4, #0]
    24f8:	2b00      	cmp	r3, #0
    24fa:	d000      	beq.n	24fe <_fstat_r+0x1e>
    24fc:	602b      	str	r3, [r5, #0]
    24fe:	bd70      	pop	{r4, r5, r6, pc}
    2500:	20000124 	.word	0x20000124

00002504 <_isatty_r>:
    2504:	2300      	movs	r3, #0
    2506:	b570      	push	{r4, r5, r6, lr}
    2508:	4c06      	ldr	r4, [pc, #24]	; (2524 <_isatty_r+0x20>)
    250a:	0005      	movs	r5, r0
    250c:	0008      	movs	r0, r1
    250e:	6023      	str	r3, [r4, #0]
    2510:	f7fe ff5a 	bl	13c8 <_isatty>
    2514:	1c43      	adds	r3, r0, #1
    2516:	d103      	bne.n	2520 <_isatty_r+0x1c>
    2518:	6823      	ldr	r3, [r4, #0]
    251a:	2b00      	cmp	r3, #0
    251c:	d000      	beq.n	2520 <_isatty_r+0x1c>
    251e:	602b      	str	r3, [r5, #0]
    2520:	bd70      	pop	{r4, r5, r6, pc}
    2522:	46c0      	nop			; (mov r8, r8)
    2524:	20000124 	.word	0x20000124

00002528 <_lseek_r>:
    2528:	b570      	push	{r4, r5, r6, lr}
    252a:	0005      	movs	r5, r0
    252c:	0008      	movs	r0, r1
    252e:	0011      	movs	r1, r2
    2530:	2200      	movs	r2, #0
    2532:	4c06      	ldr	r4, [pc, #24]	; (254c <_lseek_r+0x24>)
    2534:	6022      	str	r2, [r4, #0]
    2536:	001a      	movs	r2, r3
    2538:	f7fe ff48 	bl	13cc <_lseek>
    253c:	1c43      	adds	r3, r0, #1
    253e:	d103      	bne.n	2548 <_lseek_r+0x20>
    2540:	6823      	ldr	r3, [r4, #0]
    2542:	2b00      	cmp	r3, #0
    2544:	d000      	beq.n	2548 <_lseek_r+0x20>
    2546:	602b      	str	r3, [r5, #0]
    2548:	bd70      	pop	{r4, r5, r6, pc}
    254a:	46c0      	nop			; (mov r8, r8)
    254c:	20000124 	.word	0x20000124

00002550 <memchr>:
    2550:	b2c9      	uxtb	r1, r1
    2552:	1882      	adds	r2, r0, r2
    2554:	4290      	cmp	r0, r2
    2556:	d101      	bne.n	255c <memchr+0xc>
    2558:	2000      	movs	r0, #0
    255a:	4770      	bx	lr
    255c:	7803      	ldrb	r3, [r0, #0]
    255e:	428b      	cmp	r3, r1
    2560:	d0fb      	beq.n	255a <memchr+0xa>
    2562:	3001      	adds	r0, #1
    2564:	e7f6      	b.n	2554 <memchr+0x4>

00002566 <__malloc_lock>:
    2566:	4770      	bx	lr

00002568 <__malloc_unlock>:
    2568:	4770      	bx	lr
	...

0000256c <_read_r>:
    256c:	b570      	push	{r4, r5, r6, lr}
    256e:	0005      	movs	r5, r0
    2570:	0008      	movs	r0, r1
    2572:	0011      	movs	r1, r2
    2574:	2200      	movs	r2, #0
    2576:	4c06      	ldr	r4, [pc, #24]	; (2590 <_read_r+0x24>)
    2578:	6022      	str	r2, [r4, #0]
    257a:	001a      	movs	r2, r3
    257c:	f7fd fe70 	bl	260 <_read>
    2580:	1c43      	adds	r3, r0, #1
    2582:	d103      	bne.n	258c <_read_r+0x20>
    2584:	6823      	ldr	r3, [r4, #0]
    2586:	2b00      	cmp	r3, #0
    2588:	d000      	beq.n	258c <_read_r+0x20>
    258a:	602b      	str	r3, [r5, #0]
    258c:	bd70      	pop	{r4, r5, r6, pc}
    258e:	46c0      	nop			; (mov r8, r8)
    2590:	20000124 	.word	0x20000124
    2594:	6c6c6548 	.word	0x6c6c6548
    2598:	6f77206f 	.word	0x6f77206f
    259c:	20646c72 	.word	0x20646c72
    25a0:	0a212121 	.word	0x0a212121
    25a4:	0000000d 	.word	0x0000000d
    25a8:	42000800 	.word	0x42000800
    25ac:	42000c00 	.word	0x42000c00
    25b0:	42001000 	.word	0x42001000
    25b4:	42001400 	.word	0x42001400
    25b8:	42001800 	.word	0x42001800
    25bc:	42001c00 	.word	0x42001c00
    25c0:	00000d1e 	.word	0x00000d1e
    25c4:	00000d1a 	.word	0x00000d1a
    25c8:	00000d1a 	.word	0x00000d1a
    25cc:	00000d80 	.word	0x00000d80
    25d0:	00000d80 	.word	0x00000d80
    25d4:	00000d32 	.word	0x00000d32
    25d8:	00000d24 	.word	0x00000d24
    25dc:	00000d38 	.word	0x00000d38
    25e0:	00000d6e 	.word	0x00000d6e
    25e4:	00000e08 	.word	0x00000e08
    25e8:	00000de8 	.word	0x00000de8
    25ec:	00000de8 	.word	0x00000de8
    25f0:	00000e74 	.word	0x00000e74
    25f4:	00000dfa 	.word	0x00000dfa
    25f8:	00000e16 	.word	0x00000e16
    25fc:	00000dec 	.word	0x00000dec
    2600:	00000e24 	.word	0x00000e24
    2604:	00000e64 	.word	0x00000e64

00002608 <_global_impure_ptr>:
    2608:	20000008                                ... 

0000260c <__sf_fake_stderr>:
	...

0000262c <__sf_fake_stdin>:
	...

0000264c <__sf_fake_stdout>:
	...
    266c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    267c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    268c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    269c:	00006665                                ef..

000026a0 <_init>:
    26a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26a2:	46c0      	nop			; (mov r8, r8)
    26a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    26a6:	bc08      	pop	{r3}
    26a8:	469e      	mov	lr, r3
    26aa:	4770      	bx	lr

000026ac <__init_array_start>:
    26ac:	000000dd 	.word	0x000000dd

000026b0 <_fini>:
    26b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26b2:	46c0      	nop			; (mov r8, r8)
    26b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    26b6:	bc08      	pop	{r3}
    26b8:	469e      	mov	lr, r3
    26ba:	4770      	bx	lr

000026bc <__fini_array_start>:
    26bc:	000000b5 	.word	0x000000b5
