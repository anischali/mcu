
samd21_dbg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000547c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000108  20000000  0000547c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006e4  20000108  00005584  00020108  2**2
                  ALLOC
  3 .stack        00002004  200007ec  00005c68  00020108  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
  6 .debug_info   00047756  00000000  00000000  00020189  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000624c  00000000  00000000  000678df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000b171  00000000  00000000  0006db2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009f0  00000000  00000000  00078c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f80  00000000  00000000  0007968c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001fac9  00000000  00000000  0007a60c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001715c  00000000  00000000  0009a0d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008fe6c  00000000  00000000  000b1231  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001fd8  00000000  00000000  001410a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f0 27 00 20 39 3d 00 00 35 3d 00 00 35 3d 00 00     .'. 9=..5=..5=..
	...
      2c:	35 3d 00 00 00 00 00 00 00 00 00 00 35 3d 00 00     5=..........5=..
      3c:	35 3d 00 00 35 3d 00 00 35 3d 00 00 35 3d 00 00     5=..5=..5=..5=..
      4c:	35 3d 00 00 69 08 00 00 35 3d 00 00 35 3d 00 00     5=..i...5=..5=..
      5c:	41 1b 00 00 35 3d 00 00 c5 35 00 00 d5 35 00 00     A...5=...5...5..
      6c:	e5 35 00 00 f5 35 00 00 05 36 00 00 15 36 00 00     .5...5...6...6..
      7c:	8d 09 00 00 9d 09 00 00 ad 09 00 00 35 3d 00 00     ............5=..
      8c:	35 3d 00 00 35 3d 00 00 00 00 00 00 00 00 00 00     5=..5=..........
      9c:	35 3d 00 00 35 3d 00 00 35 3d 00 00 35 3d 00 00     5=..5=..5=..5=..
      ac:	35 3d 00 00 00 00 00 00                             5=......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000108 	.word	0x20000108
      d4:	00000000 	.word	0x00000000
      d8:	0000547c 	.word	0x0000547c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000010c 	.word	0x2000010c
     108:	0000547c 	.word	0x0000547c
     10c:	0000547c 	.word	0x0000547c
     110:	00000000 	.word	0x00000000

00000114 <usb_intf_sof_action>:

static volatile bool usb_intf_b_vendor_enable = false;

void usb_intf_sof_action(void)
{
	if (!usb_intf_b_vendor_enable)
     114:	4b01      	ldr	r3, [pc, #4]	; (11c <usb_intf_sof_action+0x8>)
     116:	781b      	ldrb	r3, [r3, #0]
		return;
}
     118:	4770      	bx	lr
     11a:	46c0      	nop			; (mov r8, r8)
     11c:	20000124 	.word	0x20000124

00000120 <usb_intf_suspend_action>:

void usb_intf_suspend_action(void)
{
     120:	b510      	push	{r4, lr}
	printf("usb: suspending...\n\r");
     122:	4802      	ldr	r0, [pc, #8]	; (12c <usb_intf_suspend_action+0xc>)
     124:	4b02      	ldr	r3, [pc, #8]	; (130 <usb_intf_suspend_action+0x10>)
     126:	4798      	blx	r3
}
     128:	bd10      	pop	{r4, pc}
     12a:	46c0      	nop			; (mov r8, r8)
     12c:	00005294 	.word	0x00005294
     130:	0000428d 	.word	0x0000428d

00000134 <usb_intf_resume_action>:


void usb_intf_resume_action(void)
{
     134:	b510      	push	{r4, lr}
	printf("usb: resuming...\n\r");
     136:	4802      	ldr	r0, [pc, #8]	; (140 <usb_intf_resume_action+0xc>)
     138:	4b02      	ldr	r3, [pc, #8]	; (144 <usb_intf_resume_action+0x10>)
     13a:	4798      	blx	r3
}
     13c:	bd10      	pop	{r4, pc}
     13e:	46c0      	nop			; (mov r8, r8)
     140:	00005280 	.word	0x00005280
     144:	0000428d 	.word	0x0000428d

00000148 <init_usb_intf>:



void init_usb_intf(void)
{
     148:	b510      	push	{r4, lr}
	udc_start();
     14a:	4b03      	ldr	r3, [pc, #12]	; (158 <init_usb_intf+0x10>)
     14c:	4798      	blx	r3
	printf("usb: start...\n\r");
     14e:	4803      	ldr	r0, [pc, #12]	; (15c <init_usb_intf+0x14>)
     150:	4b03      	ldr	r3, [pc, #12]	; (160 <init_usb_intf+0x18>)
     152:	4798      	blx	r3
}
     154:	bd10      	pop	{r4, pc}
     156:	46c0      	nop			; (mov r8, r8)
     158:	000003d5 	.word	0x000003d5
     15c:	00005270 	.word	0x00005270
     160:	0000428d 	.word	0x0000428d

00000164 <usb_intf_enable>:


bool usb_intf_enable(void)
{
	usb_intf_b_vendor_enable = true;
     164:	2201      	movs	r2, #1
     166:	4b02      	ldr	r3, [pc, #8]	; (170 <usb_intf_enable+0xc>)
     168:	701a      	strb	r2, [r3, #0]
#if UDI_VENDOR_EPS_SIZE_BULK_HS

#endif
	return true;
}
     16a:	2001      	movs	r0, #1
     16c:	4770      	bx	lr
     16e:	46c0      	nop			; (mov r8, r8)
     170:	20000124 	.word	0x20000124

00000174 <usb_intf_disable>:


void usb_intf_disable(void)
{
	usb_intf_b_vendor_enable = false;
     174:	2200      	movs	r2, #0
     176:	4b01      	ldr	r3, [pc, #4]	; (17c <usb_intf_disable+0x8>)
     178:	701a      	strb	r2, [r3, #0]
}
     17a:	4770      	bx	lr
     17c:	20000124 	.word	0x20000124

00000180 <usb_intf_setup_out_received>:
bool usb_intf_setup_out_received(void)
{
	return true;
}
     180:	2001      	movs	r0, #1
     182:	4770      	bx	lr

00000184 <usb_intf_setup_in_received>:


bool usb_intf_setup_in_received(void)
{
	return true;
}
     184:	2001      	movs	r0, #1
     186:	4770      	bx	lr

00000188 <udi_vendor_getsetting>:
	return false; // Not supported request
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
     188:	4b01      	ldr	r3, [pc, #4]	; (190 <udi_vendor_getsetting+0x8>)
     18a:	7818      	ldrb	r0, [r3, #0]
}
     18c:	4770      	bx	lr
     18e:	46c0      	nop			; (mov r8, r8)
     190:	20000125 	.word	0x20000125

00000194 <udi_vendor_enable>:
{
     194:	b510      	push	{r4, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
     196:	4b06      	ldr	r3, [pc, #24]	; (1b0 <udi_vendor_enable+0x1c>)
     198:	4798      	blx	r3
     19a:	78c3      	ldrb	r3, [r0, #3]
     19c:	4a05      	ldr	r2, [pc, #20]	; (1b4 <udi_vendor_enable+0x20>)
     19e:	7013      	strb	r3, [r2, #0]
	return true;
     1a0:	2001      	movs	r0, #1
	if (1 == udi_vendor_alternate_setting) {
     1a2:	2b01      	cmp	r3, #1
     1a4:	d000      	beq.n	1a8 <udi_vendor_enable+0x14>
}
     1a6:	bd10      	pop	{r4, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
     1a8:	4b03      	ldr	r3, [pc, #12]	; (1b8 <udi_vendor_enable+0x24>)
     1aa:	4798      	blx	r3
     1ac:	e7fb      	b.n	1a6 <udi_vendor_enable+0x12>
     1ae:	46c0      	nop			; (mov r8, r8)
     1b0:	000003c9 	.word	0x000003c9
     1b4:	20000125 	.word	0x20000125
     1b8:	00000165 	.word	0x00000165

000001bc <udi_vendor_disable>:
{
     1bc:	b510      	push	{r4, lr}
	if (1 == udi_vendor_alternate_setting) {
     1be:	4b04      	ldr	r3, [pc, #16]	; (1d0 <udi_vendor_disable+0x14>)
     1c0:	781b      	ldrb	r3, [r3, #0]
     1c2:	2b01      	cmp	r3, #1
     1c4:	d000      	beq.n	1c8 <udi_vendor_disable+0xc>
}
     1c6:	bd10      	pop	{r4, pc}
		UDI_VENDOR_DISABLE_EXT();
     1c8:	4b02      	ldr	r3, [pc, #8]	; (1d4 <udi_vendor_disable+0x18>)
     1ca:	4798      	blx	r3
}
     1cc:	e7fb      	b.n	1c6 <udi_vendor_disable+0xa>
     1ce:	46c0      	nop			; (mov r8, r8)
     1d0:	20000125 	.word	0x20000125
     1d4:	00000175 	.word	0x00000175

000001d8 <udi_vendor_setup>:
{
     1d8:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
     1da:	4b11      	ldr	r3, [pc, #68]	; (220 <udi_vendor_setup+0x48>)
     1dc:	781a      	ldrb	r2, [r3, #0]
     1de:	b253      	sxtb	r3, r2
     1e0:	2b00      	cmp	r3, #0
     1e2:	db05      	blt.n	1f0 <udi_vendor_setup+0x18>
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
     1e4:	2360      	movs	r3, #96	; 0x60
     1e6:	4013      	ands	r3, r2
	return false; // Not supported request
     1e8:	2000      	movs	r0, #0
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
     1ea:	2b40      	cmp	r3, #64	; 0x40
     1ec:	d00c      	beq.n	208 <udi_vendor_setup+0x30>
}
     1ee:	bd10      	pop	{r4, pc}
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
     1f0:	2360      	movs	r3, #96	; 0x60
     1f2:	4013      	ands	r3, r2
	return false; // Not supported request
     1f4:	2000      	movs	r0, #0
		if ((Udd_setup_type() == USB_REQ_TYPE_VENDOR)
     1f6:	2b40      	cmp	r3, #64	; 0x40
     1f8:	d1f9      	bne.n	1ee <udi_vendor_setup+0x16>
				&& (udd_g_ctrlreq.req.bRequest == 0)) {
     1fa:	4b09      	ldr	r3, [pc, #36]	; (220 <udi_vendor_setup+0x48>)
     1fc:	785b      	ldrb	r3, [r3, #1]
     1fe:	2b00      	cmp	r3, #0
     200:	d1f5      	bne.n	1ee <udi_vendor_setup+0x16>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
     202:	4b08      	ldr	r3, [pc, #32]	; (224 <udi_vendor_setup+0x4c>)
     204:	4798      	blx	r3
     206:	e7f2      	b.n	1ee <udi_vendor_setup+0x16>
				&& (udd_g_ctrlreq.req.bRequest == 0)
     208:	4b05      	ldr	r3, [pc, #20]	; (220 <udi_vendor_setup+0x48>)
     20a:	785b      	ldrb	r3, [r3, #1]
     20c:	2b00      	cmp	r3, #0
     20e:	d1ee      	bne.n	1ee <udi_vendor_setup+0x16>
				&& (0 != udd_g_ctrlreq.req.wLength)) {
     210:	4b03      	ldr	r3, [pc, #12]	; (220 <udi_vendor_setup+0x48>)
     212:	88db      	ldrh	r3, [r3, #6]
     214:	2b00      	cmp	r3, #0
     216:	d0ea      	beq.n	1ee <udi_vendor_setup+0x16>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
     218:	4b03      	ldr	r3, [pc, #12]	; (228 <udi_vendor_setup+0x50>)
     21a:	4798      	blx	r3
     21c:	e7e7      	b.n	1ee <udi_vendor_setup+0x16>
     21e:	46c0      	nop			; (mov r8, r8)
     220:	20000668 	.word	0x20000668
     224:	00000185 	.word	0x00000185
     228:	00000181 	.word	0x00000181

0000022c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     22c:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
     22e:	4b11      	ldr	r3, [pc, #68]	; (274 <udc_next_desc_in_iface+0x48>)
     230:	681b      	ldr	r3, [r3, #0]
     232:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     234:	7894      	ldrb	r4, [r2, #2]
     236:	78d3      	ldrb	r3, [r2, #3]
     238:	021b      	lsls	r3, r3, #8
     23a:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     23c:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
     23e:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     240:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     242:	4290      	cmp	r0, r2
     244:	d210      	bcs.n	268 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     246:	7843      	ldrb	r3, [r0, #1]
     248:	2b04      	cmp	r3, #4
     24a:	d00f      	beq.n	26c <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     24c:	428b      	cmp	r3, r1
     24e:	d00a      	beq.n	266 <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
     250:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     252:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
     254:	4290      	cmp	r0, r2
     256:	d205      	bcs.n	264 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     258:	7843      	ldrb	r3, [r0, #1]
     25a:	2b04      	cmp	r3, #4
     25c:	d008      	beq.n	270 <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
     25e:	428b      	cmp	r3, r1
     260:	d1f6      	bne.n	250 <udc_next_desc_in_iface+0x24>
     262:	e000      	b.n	266 <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
     264:	2000      	movs	r0, #0
}
     266:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
     268:	2000      	movs	r0, #0
     26a:	e7fc      	b.n	266 <udc_next_desc_in_iface+0x3a>
     26c:	2000      	movs	r0, #0
     26e:	e7fa      	b.n	266 <udc_next_desc_in_iface+0x3a>
     270:	2000      	movs	r0, #0
     272:	e7f8      	b.n	266 <udc_next_desc_in_iface+0x3a>
     274:	20000134 	.word	0x20000134

00000278 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     278:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     27a:	4b03      	ldr	r3, [pc, #12]	; (288 <udc_valid_address+0x10>)
     27c:	885b      	ldrh	r3, [r3, #2]
     27e:	207f      	movs	r0, #127	; 0x7f
     280:	4018      	ands	r0, r3
     282:	4b02      	ldr	r3, [pc, #8]	; (28c <udc_valid_address+0x14>)
     284:	4798      	blx	r3
}
     286:	bd10      	pop	{r4, pc}
     288:	20000668 	.word	0x20000668
     28c:	0000135d 	.word	0x0000135d

00000290 <udc_update_iface_desc>:
{
     290:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
     292:	4b19      	ldr	r3, [pc, #100]	; (2f8 <udc_update_iface_desc+0x68>)
     294:	781b      	ldrb	r3, [r3, #0]
		return false;
     296:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
     298:	2b00      	cmp	r3, #0
     29a:	d029      	beq.n	2f0 <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     29c:	4b17      	ldr	r3, [pc, #92]	; (2fc <udc_update_iface_desc+0x6c>)
     29e:	681b      	ldr	r3, [r3, #0]
     2a0:	681b      	ldr	r3, [r3, #0]
     2a2:	791c      	ldrb	r4, [r3, #4]
     2a4:	4284      	cmp	r4, r0
     2a6:	d923      	bls.n	2f0 <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     2a8:	4a15      	ldr	r2, [pc, #84]	; (300 <udc_update_iface_desc+0x70>)
     2aa:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     2ac:	789a      	ldrb	r2, [r3, #2]
     2ae:	78dc      	ldrb	r4, [r3, #3]
     2b0:	0224      	lsls	r4, r4, #8
     2b2:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     2b4:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
     2b6:	42a3      	cmp	r3, r4
     2b8:	d21c      	bcs.n	2f4 <udc_update_iface_desc+0x64>
     2ba:	2500      	movs	r5, #0
     2bc:	2601      	movs	r6, #1
     2be:	e007      	b.n	2d0 <udc_update_iface_desc+0x40>
     2c0:	4a0f      	ldr	r2, [pc, #60]	; (300 <udc_update_iface_desc+0x70>)
     2c2:	6013      	str	r3, [r2, #0]
     2c4:	e00f      	b.n	2e6 <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
     2c6:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     2c8:	189b      	adds	r3, r3, r2
     2ca:	0035      	movs	r5, r6
	while (ptr_end_desc >
     2cc:	42a3      	cmp	r3, r4
     2ce:	d20c      	bcs.n	2ea <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     2d0:	785a      	ldrb	r2, [r3, #1]
     2d2:	2a04      	cmp	r2, #4
     2d4:	d1f7      	bne.n	2c6 <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     2d6:	789a      	ldrb	r2, [r3, #2]
     2d8:	4282      	cmp	r2, r0
     2da:	d1f4      	bne.n	2c6 <udc_update_iface_desc+0x36>
     2dc:	78da      	ldrb	r2, [r3, #3]
     2de:	428a      	cmp	r2, r1
     2e0:	d1f1      	bne.n	2c6 <udc_update_iface_desc+0x36>
     2e2:	2d00      	cmp	r5, #0
     2e4:	d1ec      	bne.n	2c0 <udc_update_iface_desc+0x30>
				return true; // Interface found
     2e6:	2201      	movs	r2, #1
     2e8:	e002      	b.n	2f0 <udc_update_iface_desc+0x60>
     2ea:	4a05      	ldr	r2, [pc, #20]	; (300 <udc_update_iface_desc+0x70>)
     2ec:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
     2ee:	2200      	movs	r2, #0
}
     2f0:	0010      	movs	r0, r2
     2f2:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
     2f4:	2200      	movs	r2, #0
     2f6:	e7fb      	b.n	2f0 <udc_update_iface_desc+0x60>
     2f8:	20000130 	.word	0x20000130
     2fc:	20000134 	.word	0x20000134
     300:	20000138 	.word	0x20000138

00000304 <udc_iface_disable>:
{
     304:	b5f0      	push	{r4, r5, r6, r7, lr}
     306:	46c6      	mov	lr, r8
     308:	b500      	push	{lr}
     30a:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
     30c:	2100      	movs	r1, #0
     30e:	4b13      	ldr	r3, [pc, #76]	; (35c <udc_iface_disable+0x58>)
     310:	4798      	blx	r3
     312:	1e05      	subs	r5, r0, #0
     314:	d103      	bne.n	31e <udc_iface_disable+0x1a>
}
     316:	0028      	movs	r0, r5
     318:	bc04      	pop	{r2}
     31a:	4690      	mov	r8, r2
     31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     31e:	4b10      	ldr	r3, [pc, #64]	; (360 <udc_iface_disable+0x5c>)
     320:	681b      	ldr	r3, [r3, #0]
     322:	685b      	ldr	r3, [r3, #4]
     324:	00a2      	lsls	r2, r4, #2
     326:	58d3      	ldr	r3, [r2, r3]
     328:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     32a:	68db      	ldr	r3, [r3, #12]
     32c:	4798      	blx	r3
     32e:	0001      	movs	r1, r0
     330:	0020      	movs	r0, r4
     332:	4b0a      	ldr	r3, [pc, #40]	; (35c <udc_iface_disable+0x58>)
     334:	4798      	blx	r3
     336:	1e05      	subs	r5, r0, #0
     338:	d0ed      	beq.n	316 <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     33a:	4b0a      	ldr	r3, [pc, #40]	; (364 <udc_iface_disable+0x60>)
     33c:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     33e:	4e0a      	ldr	r6, [pc, #40]	; (368 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
     340:	4f0a      	ldr	r7, [pc, #40]	; (36c <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     342:	2105      	movs	r1, #5
     344:	0020      	movs	r0, r4
     346:	47b0      	blx	r6
     348:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
     34a:	d002      	beq.n	352 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
     34c:	7880      	ldrb	r0, [r0, #2]
     34e:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     350:	e7f7      	b.n	342 <udc_iface_disable+0x3e>
	udi_api->disable();
     352:	4643      	mov	r3, r8
     354:	685b      	ldr	r3, [r3, #4]
     356:	4798      	blx	r3
	return true;
     358:	e7dd      	b.n	316 <udc_iface_disable+0x12>
     35a:	46c0      	nop			; (mov r8, r8)
     35c:	00000291 	.word	0x00000291
     360:	20000134 	.word	0x20000134
     364:	20000138 	.word	0x20000138
     368:	0000022d 	.word	0x0000022d
     36c:	00001075 	.word	0x00001075

00000370 <udc_iface_enable>:
{
     370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     372:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     374:	4b0f      	ldr	r3, [pc, #60]	; (3b4 <udc_iface_enable+0x44>)
     376:	4798      	blx	r3
     378:	2800      	cmp	r0, #0
     37a:	d019      	beq.n	3b0 <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     37c:	4b0e      	ldr	r3, [pc, #56]	; (3b8 <udc_iface_enable+0x48>)
     37e:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     380:	4e0e      	ldr	r6, [pc, #56]	; (3bc <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     382:	4f0f      	ldr	r7, [pc, #60]	; (3c0 <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     384:	2105      	movs	r1, #5
     386:	0020      	movs	r0, r4
     388:	47b0      	blx	r6
     38a:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
     38c:	d009      	beq.n	3a2 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     38e:	7903      	ldrb	r3, [r0, #4]
     390:	7942      	ldrb	r2, [r0, #5]
     392:	0212      	lsls	r2, r2, #8
     394:	431a      	orrs	r2, r3
     396:	78c1      	ldrb	r1, [r0, #3]
     398:	7880      	ldrb	r0, [r0, #2]
     39a:	47b8      	blx	r7
     39c:	2800      	cmp	r0, #0
     39e:	d1f1      	bne.n	384 <udc_iface_enable+0x14>
     3a0:	e006      	b.n	3b0 <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     3a2:	4b08      	ldr	r3, [pc, #32]	; (3c4 <udc_iface_enable+0x54>)
     3a4:	681b      	ldr	r3, [r3, #0]
     3a6:	685b      	ldr	r3, [r3, #4]
     3a8:	00ad      	lsls	r5, r5, #2
     3aa:	58eb      	ldr	r3, [r5, r3]
     3ac:	681b      	ldr	r3, [r3, #0]
     3ae:	4798      	blx	r3
}
     3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3b2:	46c0      	nop			; (mov r8, r8)
     3b4:	00000291 	.word	0x00000291
     3b8:	20000138 	.word	0x20000138
     3bc:	0000022d 	.word	0x0000022d
     3c0:	000010cd 	.word	0x000010cd
     3c4:	20000134 	.word	0x20000134

000003c8 <udc_get_interface_desc>:
	return udc_ptr_iface;
     3c8:	4b01      	ldr	r3, [pc, #4]	; (3d0 <udc_get_interface_desc+0x8>)
     3ca:	6818      	ldr	r0, [r3, #0]
}
     3cc:	4770      	bx	lr
     3ce:	46c0      	nop			; (mov r8, r8)
     3d0:	20000138 	.word	0x20000138

000003d4 <udc_start>:
{
     3d4:	b510      	push	{r4, lr}
	udd_enable();
     3d6:	4b01      	ldr	r3, [pc, #4]	; (3dc <udc_start+0x8>)
     3d8:	4798      	blx	r3
}
     3da:	bd10      	pop	{r4, pc}
     3dc:	0000140d 	.word	0x0000140d

000003e0 <udc_reset>:
{
     3e0:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     3e2:	4b0e      	ldr	r3, [pc, #56]	; (41c <udc_reset+0x3c>)
     3e4:	781b      	ldrb	r3, [r3, #0]
     3e6:	2b00      	cmp	r3, #0
     3e8:	d011      	beq.n	40e <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     3ea:	4b0d      	ldr	r3, [pc, #52]	; (420 <udc_reset+0x40>)
     3ec:	681b      	ldr	r3, [r3, #0]
     3ee:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     3f0:	791b      	ldrb	r3, [r3, #4]
     3f2:	2b00      	cmp	r3, #0
     3f4:	d00b      	beq.n	40e <udc_reset+0x2e>
     3f6:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
     3f8:	4e0a      	ldr	r6, [pc, #40]	; (424 <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     3fa:	4d09      	ldr	r5, [pc, #36]	; (420 <udc_reset+0x40>)
			udc_iface_disable(iface_num);
     3fc:	0020      	movs	r0, r4
     3fe:	47b0      	blx	r6
				iface_num++) {
     400:	3401      	adds	r4, #1
     402:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     404:	682b      	ldr	r3, [r5, #0]
     406:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     408:	791b      	ldrb	r3, [r3, #4]
     40a:	42a3      	cmp	r3, r4
     40c:	d8f6      	bhi.n	3fc <udc_reset+0x1c>
	udc_num_configuration = 0;
     40e:	2200      	movs	r2, #0
     410:	4b02      	ldr	r3, [pc, #8]	; (41c <udc_reset+0x3c>)
     412:	701a      	strb	r2, [r3, #0]
	udc_device_status =
     414:	3201      	adds	r2, #1
     416:	4b04      	ldr	r3, [pc, #16]	; (428 <udc_reset+0x48>)
     418:	801a      	strh	r2, [r3, #0]
}
     41a:	bd70      	pop	{r4, r5, r6, pc}
     41c:	20000130 	.word	0x20000130
     420:	20000134 	.word	0x20000134
     424:	00000305 	.word	0x00000305
     428:	20000126 	.word	0x20000126

0000042c <udc_sof_notify>:
{
     42c:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     42e:	4b0e      	ldr	r3, [pc, #56]	; (468 <udc_sof_notify+0x3c>)
     430:	781b      	ldrb	r3, [r3, #0]
     432:	2b00      	cmp	r3, #0
     434:	d017      	beq.n	466 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     436:	4b0d      	ldr	r3, [pc, #52]	; (46c <udc_sof_notify+0x40>)
     438:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     43a:	681a      	ldr	r2, [r3, #0]
     43c:	7912      	ldrb	r2, [r2, #4]
     43e:	2a00      	cmp	r2, #0
     440:	d011      	beq.n	466 <udc_sof_notify+0x3a>
     442:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     444:	4d09      	ldr	r5, [pc, #36]	; (46c <udc_sof_notify+0x40>)
     446:	e006      	b.n	456 <udc_sof_notify+0x2a>
				iface_num++) {
     448:	3401      	adds	r4, #1
     44a:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     44c:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
     44e:	681a      	ldr	r2, [r3, #0]
     450:	7912      	ldrb	r2, [r2, #4]
     452:	42a2      	cmp	r2, r4
     454:	d907      	bls.n	466 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     456:	685b      	ldr	r3, [r3, #4]
     458:	00a2      	lsls	r2, r4, #2
     45a:	58d3      	ldr	r3, [r2, r3]
     45c:	691b      	ldr	r3, [r3, #16]
     45e:	2b00      	cmp	r3, #0
     460:	d0f2      	beq.n	448 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     462:	4798      	blx	r3
     464:	e7f0      	b.n	448 <udc_sof_notify+0x1c>
}
     466:	bd70      	pop	{r4, r5, r6, pc}
     468:	20000130 	.word	0x20000130
     46c:	20000134 	.word	0x20000134

00000470 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     472:	4bb0      	ldr	r3, [pc, #704]	; (734 <udc_process_setup+0x2c4>)
     474:	2200      	movs	r2, #0
     476:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
     478:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
     47a:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
     47c:	781b      	ldrb	r3, [r3, #0]
     47e:	b25a      	sxtb	r2, r3
     480:	2a00      	cmp	r2, #0
     482:	db13      	blt.n	4ac <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     484:	2260      	movs	r2, #96	; 0x60
     486:	421a      	tst	r2, r3
     488:	d100      	bne.n	48c <udc_process_setup+0x1c>
     48a:	e0b8      	b.n	5fe <udc_process_setup+0x18e>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     48c:	4ba9      	ldr	r3, [pc, #676]	; (734 <udc_process_setup+0x2c4>)
     48e:	781a      	ldrb	r2, [r3, #0]
     490:	231f      	movs	r3, #31
     492:	4013      	ands	r3, r2
     494:	2b01      	cmp	r3, #1
     496:	d100      	bne.n	49a <udc_process_setup+0x2a>
     498:	e189      	b.n	7ae <udc_process_setup+0x33e>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     49a:	4ba6      	ldr	r3, [pc, #664]	; (734 <udc_process_setup+0x2c4>)
     49c:	781a      	ldrb	r2, [r3, #0]
     49e:	231f      	movs	r3, #31
     4a0:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     4a2:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     4a4:	2b02      	cmp	r3, #2
     4a6:	d100      	bne.n	4aa <udc_process_setup+0x3a>
     4a8:	e1a9      	b.n	7fe <udc_process_setup+0x38e>
#endif
}
     4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
     4ac:	4aa1      	ldr	r2, [pc, #644]	; (734 <udc_process_setup+0x2c4>)
     4ae:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
     4b0:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
     4b2:	2a00      	cmp	r2, #0
     4b4:	d0f9      	beq.n	4aa <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     4b6:	2160      	movs	r1, #96	; 0x60
     4b8:	4219      	tst	r1, r3
     4ba:	d1e7      	bne.n	48c <udc_process_setup+0x1c>
     4bc:	211f      	movs	r1, #31
     4be:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     4c0:	d107      	bne.n	4d2 <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
     4c2:	499c      	ldr	r1, [pc, #624]	; (734 <udc_process_setup+0x2c4>)
     4c4:	7849      	ldrb	r1, [r1, #1]
     4c6:	2906      	cmp	r1, #6
     4c8:	d021      	beq.n	50e <udc_process_setup+0x9e>
     4ca:	2908      	cmp	r1, #8
     4cc:	d067      	beq.n	59e <udc_process_setup+0x12e>
     4ce:	2900      	cmp	r1, #0
     4d0:	d016      	beq.n	500 <udc_process_setup+0x90>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     4d2:	2b01      	cmp	r3, #1
     4d4:	d06b      	beq.n	5ae <udc_process_setup+0x13e>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     4d6:	2b02      	cmp	r3, #2
     4d8:	d1d8      	bne.n	48c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     4da:	4b96      	ldr	r3, [pc, #600]	; (734 <udc_process_setup+0x2c4>)
     4dc:	785b      	ldrb	r3, [r3, #1]
	return false;
     4de:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     4e0:	2b00      	cmp	r3, #0
     4e2:	d000      	beq.n	4e6 <udc_process_setup+0x76>
     4e4:	e15f      	b.n	7a6 <udc_process_setup+0x336>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     4e6:	2a02      	cmp	r2, #2
     4e8:	d1d0      	bne.n	48c <udc_process_setup+0x1c>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     4ea:	4b92      	ldr	r3, [pc, #584]	; (734 <udc_process_setup+0x2c4>)
     4ec:	7918      	ldrb	r0, [r3, #4]
     4ee:	4b92      	ldr	r3, [pc, #584]	; (738 <udc_process_setup+0x2c8>)
     4f0:	4798      	blx	r3
     4f2:	4b92      	ldr	r3, [pc, #584]	; (73c <udc_process_setup+0x2cc>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
     4f4:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     4f6:	2102      	movs	r1, #2
     4f8:	0018      	movs	r0, r3
     4fa:	4b91      	ldr	r3, [pc, #580]	; (740 <udc_process_setup+0x2d0>)
     4fc:	4798      	blx	r3
     4fe:	e0df      	b.n	6c0 <udc_process_setup+0x250>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     500:	2a02      	cmp	r2, #2
     502:	d1c3      	bne.n	48c <udc_process_setup+0x1c>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     504:	3102      	adds	r1, #2
     506:	488f      	ldr	r0, [pc, #572]	; (744 <udc_process_setup+0x2d4>)
     508:	4b8d      	ldr	r3, [pc, #564]	; (740 <udc_process_setup+0x2d0>)
     50a:	4798      	blx	r3
     50c:	e0d8      	b.n	6c0 <udc_process_setup+0x250>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     50e:	4b89      	ldr	r3, [pc, #548]	; (734 <udc_process_setup+0x2c4>)
     510:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     512:	0a13      	lsrs	r3, r2, #8
     514:	2b02      	cmp	r3, #2
     516:	d023      	beq.n	560 <udc_process_setup+0xf0>
     518:	b2d9      	uxtb	r1, r3
     51a:	2902      	cmp	r1, #2
     51c:	d90f      	bls.n	53e <udc_process_setup+0xce>
     51e:	2b03      	cmp	r3, #3
     520:	d034      	beq.n	58c <udc_process_setup+0x11c>
     522:	2b0f      	cmp	r3, #15
     524:	d000      	beq.n	528 <udc_process_setup+0xb8>
     526:	e13b      	b.n	7a0 <udc_process_setup+0x330>
		if (udc_config.conf_bos == NULL) {
     528:	4b87      	ldr	r3, [pc, #540]	; (748 <udc_process_setup+0x2d8>)
     52a:	6898      	ldr	r0, [r3, #8]
     52c:	2800      	cmp	r0, #0
     52e:	d0ad      	beq.n	48c <udc_process_setup+0x1c>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     530:	7883      	ldrb	r3, [r0, #2]
     532:	78c1      	ldrb	r1, [r0, #3]
     534:	0209      	lsls	r1, r1, #8
     536:	4319      	orrs	r1, r3
     538:	4b81      	ldr	r3, [pc, #516]	; (740 <udc_process_setup+0x2d0>)
     53a:	4798      	blx	r3
     53c:	e007      	b.n	54e <udc_process_setup+0xde>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     53e:	2b01      	cmp	r3, #1
     540:	d000      	beq.n	544 <udc_process_setup+0xd4>
     542:	e12d      	b.n	7a0 <udc_process_setup+0x330>
				(uint8_t *) udc_config.confdev_lsfs,
     544:	4b80      	ldr	r3, [pc, #512]	; (748 <udc_process_setup+0x2d8>)
     546:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
     548:	7801      	ldrb	r1, [r0, #0]
     54a:	4b7d      	ldr	r3, [pc, #500]	; (740 <udc_process_setup+0x2d0>)
     54c:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     54e:	4b79      	ldr	r3, [pc, #484]	; (734 <udc_process_setup+0x2c4>)
     550:	88da      	ldrh	r2, [r3, #6]
     552:	899b      	ldrh	r3, [r3, #12]
     554:	4293      	cmp	r3, r2
     556:	d800      	bhi.n	55a <udc_process_setup+0xea>
     558:	e0b2      	b.n	6c0 <udc_process_setup+0x250>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     55a:	4b76      	ldr	r3, [pc, #472]	; (734 <udc_process_setup+0x2c4>)
     55c:	819a      	strh	r2, [r3, #12]
     55e:	e0af      	b.n	6c0 <udc_process_setup+0x250>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     560:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
     562:	4b79      	ldr	r3, [pc, #484]	; (748 <udc_process_setup+0x2d8>)
     564:	681b      	ldr	r3, [r3, #0]
     566:	7c5b      	ldrb	r3, [r3, #17]
     568:	4293      	cmp	r3, r2
     56a:	d800      	bhi.n	56e <udc_process_setup+0xfe>
     56c:	e78e      	b.n	48c <udc_process_setup+0x1c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
     56e:	4b76      	ldr	r3, [pc, #472]	; (748 <udc_process_setup+0x2d8>)
     570:	685b      	ldr	r3, [r3, #4]
     572:	00d2      	lsls	r2, r2, #3
     574:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
     576:	7883      	ldrb	r3, [r0, #2]
     578:	78c1      	ldrb	r1, [r0, #3]
     57a:	0209      	lsls	r1, r1, #8
     57c:	4319      	orrs	r1, r3
     57e:	4b70      	ldr	r3, [pc, #448]	; (740 <udc_process_setup+0x2d0>)
     580:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     582:	4b6c      	ldr	r3, [pc, #432]	; (734 <udc_process_setup+0x2c4>)
     584:	689b      	ldr	r3, [r3, #8]
     586:	2202      	movs	r2, #2
     588:	705a      	strb	r2, [r3, #1]
     58a:	e7e0      	b.n	54e <udc_process_setup+0xde>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     58c:	23ff      	movs	r3, #255	; 0xff
     58e:	4213      	tst	r3, r2
     590:	d000      	beq.n	594 <udc_process_setup+0x124>
     592:	e77b      	b.n	48c <udc_process_setup+0x1c>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     594:	2104      	movs	r1, #4
     596:	486d      	ldr	r0, [pc, #436]	; (74c <udc_process_setup+0x2dc>)
     598:	4b69      	ldr	r3, [pc, #420]	; (740 <udc_process_setup+0x2d0>)
     59a:	4798      	blx	r3
     59c:	e7d7      	b.n	54e <udc_process_setup+0xde>
	if (udd_g_ctrlreq.req.wLength != 1) {
     59e:	2a01      	cmp	r2, #1
     5a0:	d000      	beq.n	5a4 <udc_process_setup+0x134>
     5a2:	e773      	b.n	48c <udc_process_setup+0x1c>
	udd_set_setup_payload(&udc_num_configuration,1);
     5a4:	2101      	movs	r1, #1
     5a6:	486a      	ldr	r0, [pc, #424]	; (750 <udc_process_setup+0x2e0>)
     5a8:	4b65      	ldr	r3, [pc, #404]	; (740 <udc_process_setup+0x2d0>)
     5aa:	4798      	blx	r3
     5ac:	e088      	b.n	6c0 <udc_process_setup+0x250>
			switch (udd_g_ctrlreq.req.bRequest) {
     5ae:	4961      	ldr	r1, [pc, #388]	; (734 <udc_process_setup+0x2c4>)
     5b0:	7849      	ldrb	r1, [r1, #1]
     5b2:	290a      	cmp	r1, #10
     5b4:	d18f      	bne.n	4d6 <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
     5b6:	2a01      	cmp	r2, #1
     5b8:	d000      	beq.n	5bc <udc_process_setup+0x14c>
     5ba:	e767      	b.n	48c <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
     5bc:	4b64      	ldr	r3, [pc, #400]	; (750 <udc_process_setup+0x2e0>)
     5be:	781b      	ldrb	r3, [r3, #0]
     5c0:	2b00      	cmp	r3, #0
     5c2:	d100      	bne.n	5c6 <udc_process_setup+0x156>
     5c4:	e762      	b.n	48c <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     5c6:	4b5b      	ldr	r3, [pc, #364]	; (734 <udc_process_setup+0x2c4>)
     5c8:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     5ca:	4b62      	ldr	r3, [pc, #392]	; (754 <udc_process_setup+0x2e4>)
     5cc:	681d      	ldr	r5, [r3, #0]
     5ce:	682b      	ldr	r3, [r5, #0]
     5d0:	791b      	ldrb	r3, [r3, #4]
     5d2:	42a3      	cmp	r3, r4
     5d4:	d800      	bhi.n	5d8 <udc_process_setup+0x168>
     5d6:	e759      	b.n	48c <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
     5d8:	2100      	movs	r1, #0
     5da:	0020      	movs	r0, r4
     5dc:	4b5e      	ldr	r3, [pc, #376]	; (758 <udc_process_setup+0x2e8>)
     5de:	4798      	blx	r3
     5e0:	2800      	cmp	r0, #0
     5e2:	d100      	bne.n	5e6 <udc_process_setup+0x176>
     5e4:	e752      	b.n	48c <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     5e6:	686b      	ldr	r3, [r5, #4]
     5e8:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
     5ea:	58e3      	ldr	r3, [r4, r3]
     5ec:	68db      	ldr	r3, [r3, #12]
     5ee:	4798      	blx	r3
     5f0:	4b5a      	ldr	r3, [pc, #360]	; (75c <udc_process_setup+0x2ec>)
     5f2:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
     5f4:	2101      	movs	r1, #1
     5f6:	0018      	movs	r0, r3
     5f8:	4b51      	ldr	r3, [pc, #324]	; (740 <udc_process_setup+0x2d0>)
     5fa:	4798      	blx	r3
     5fc:	e060      	b.n	6c0 <udc_process_setup+0x250>
     5fe:	221f      	movs	r2, #31
     600:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     602:	d15f      	bne.n	6c4 <udc_process_setup+0x254>
			switch (udd_g_ctrlreq.req.bRequest) {
     604:	4a4b      	ldr	r2, [pc, #300]	; (734 <udc_process_setup+0x2c4>)
     606:	7852      	ldrb	r2, [r2, #1]
     608:	2a03      	cmp	r2, #3
     60a:	d100      	bne.n	60e <udc_process_setup+0x19e>
     60c:	e0ca      	b.n	7a4 <udc_process_setup+0x334>
     60e:	b2d1      	uxtb	r1, r2
     610:	2903      	cmp	r1, #3
     612:	d93b      	bls.n	68c <udc_process_setup+0x21c>
     614:	2a05      	cmp	r2, #5
     616:	d04b      	beq.n	6b0 <udc_process_setup+0x240>
     618:	2a09      	cmp	r2, #9
     61a:	d153      	bne.n	6c4 <udc_process_setup+0x254>
	if (udd_g_ctrlreq.req.wLength) {
     61c:	4b45      	ldr	r3, [pc, #276]	; (734 <udc_process_setup+0x2c4>)
     61e:	88db      	ldrh	r3, [r3, #6]
     620:	2b00      	cmp	r3, #0
     622:	d000      	beq.n	626 <udc_process_setup+0x1b6>
     624:	e732      	b.n	48c <udc_process_setup+0x1c>
	if (!udd_getaddress()) {
     626:	4b4e      	ldr	r3, [pc, #312]	; (760 <udc_process_setup+0x2f0>)
     628:	4798      	blx	r3
     62a:	2800      	cmp	r0, #0
     62c:	d100      	bne.n	630 <udc_process_setup+0x1c0>
     62e:	e72d      	b.n	48c <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     630:	4b40      	ldr	r3, [pc, #256]	; (734 <udc_process_setup+0x2c4>)
     632:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
     634:	4b44      	ldr	r3, [pc, #272]	; (748 <udc_process_setup+0x2d8>)
     636:	681b      	ldr	r3, [r3, #0]
     638:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     63a:	429a      	cmp	r2, r3
     63c:	dd00      	ble.n	640 <udc_process_setup+0x1d0>
     63e:	e725      	b.n	48c <udc_process_setup+0x1c>
	udc_reset();
     640:	4b48      	ldr	r3, [pc, #288]	; (764 <udc_process_setup+0x2f4>)
     642:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     644:	4b3b      	ldr	r3, [pc, #236]	; (734 <udc_process_setup+0x2c4>)
     646:	789b      	ldrb	r3, [r3, #2]
     648:	4a41      	ldr	r2, [pc, #260]	; (750 <udc_process_setup+0x2e0>)
     64a:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
     64c:	2b00      	cmp	r3, #0
     64e:	d037      	beq.n	6c0 <udc_process_setup+0x250>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     650:	4a45      	ldr	r2, [pc, #276]	; (768 <udc_process_setup+0x2f8>)
     652:	4694      	mov	ip, r2
     654:	4463      	add	r3, ip
     656:	00db      	lsls	r3, r3, #3
     658:	4a3b      	ldr	r2, [pc, #236]	; (748 <udc_process_setup+0x2d8>)
     65a:	6852      	ldr	r2, [r2, #4]
     65c:	18d3      	adds	r3, r2, r3
     65e:	4a3d      	ldr	r2, [pc, #244]	; (754 <udc_process_setup+0x2e4>)
     660:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     662:	681b      	ldr	r3, [r3, #0]
     664:	791b      	ldrb	r3, [r3, #4]
     666:	2b00      	cmp	r3, #0
     668:	d02a      	beq.n	6c0 <udc_process_setup+0x250>
     66a:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
     66c:	4d3f      	ldr	r5, [pc, #252]	; (76c <udc_process_setup+0x2fc>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     66e:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
     670:	2100      	movs	r1, #0
     672:	0020      	movs	r0, r4
     674:	47a8      	blx	r5
     676:	2800      	cmp	r0, #0
     678:	d100      	bne.n	67c <udc_process_setup+0x20c>
     67a:	e707      	b.n	48c <udc_process_setup+0x1c>
			iface_num++) {
     67c:	3401      	adds	r4, #1
     67e:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     680:	6833      	ldr	r3, [r6, #0]
     682:	681b      	ldr	r3, [r3, #0]
     684:	791b      	ldrb	r3, [r3, #4]
     686:	42a3      	cmp	r3, r4
     688:	d8f2      	bhi.n	670 <udc_process_setup+0x200>
     68a:	e019      	b.n	6c0 <udc_process_setup+0x250>
			switch (udd_g_ctrlreq.req.bRequest) {
     68c:	2a01      	cmp	r2, #1
     68e:	d119      	bne.n	6c4 <udc_process_setup+0x254>
	if (udd_g_ctrlreq.req.wLength) {
     690:	4b28      	ldr	r3, [pc, #160]	; (734 <udc_process_setup+0x2c4>)
     692:	88db      	ldrh	r3, [r3, #6]
     694:	2b00      	cmp	r3, #0
     696:	d000      	beq.n	69a <udc_process_setup+0x22a>
     698:	e6f8      	b.n	48c <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     69a:	4b26      	ldr	r3, [pc, #152]	; (734 <udc_process_setup+0x2c4>)
     69c:	885b      	ldrh	r3, [r3, #2]
     69e:	2b01      	cmp	r3, #1
     6a0:	d000      	beq.n	6a4 <udc_process_setup+0x234>
     6a2:	e6f3      	b.n	48c <udc_process_setup+0x1c>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     6a4:	4a27      	ldr	r2, [pc, #156]	; (744 <udc_process_setup+0x2d4>)
     6a6:	8813      	ldrh	r3, [r2, #0]
     6a8:	2102      	movs	r1, #2
     6aa:	438b      	bics	r3, r1
     6ac:	8013      	strh	r3, [r2, #0]
     6ae:	e007      	b.n	6c0 <udc_process_setup+0x250>
	if (udd_g_ctrlreq.req.wLength) {
     6b0:	4b20      	ldr	r3, [pc, #128]	; (734 <udc_process_setup+0x2c4>)
     6b2:	88db      	ldrh	r3, [r3, #6]
     6b4:	2b00      	cmp	r3, #0
     6b6:	d000      	beq.n	6ba <udc_process_setup+0x24a>
     6b8:	e6e8      	b.n	48c <udc_process_setup+0x1c>
	udd_g_ctrlreq.callback = udc_valid_address;
     6ba:	4a2d      	ldr	r2, [pc, #180]	; (770 <udc_process_setup+0x300>)
     6bc:	4b1d      	ldr	r3, [pc, #116]	; (734 <udc_process_setup+0x2c4>)
     6be:	611a      	str	r2, [r3, #16]
			return true;
     6c0:	2001      	movs	r0, #1
     6c2:	e6f2      	b.n	4aa <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     6c4:	2b01      	cmp	r3, #1
     6c6:	d00a      	beq.n	6de <udc_process_setup+0x26e>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     6c8:	2b02      	cmp	r3, #2
     6ca:	d000      	beq.n	6ce <udc_process_setup+0x25e>
     6cc:	e6de      	b.n	48c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     6ce:	4b19      	ldr	r3, [pc, #100]	; (734 <udc_process_setup+0x2c4>)
     6d0:	785b      	ldrb	r3, [r3, #1]
     6d2:	2b01      	cmp	r3, #1
     6d4:	d01f      	beq.n	716 <udc_process_setup+0x2a6>
     6d6:	2b03      	cmp	r3, #3
     6d8:	d050      	beq.n	77c <udc_process_setup+0x30c>
	return false;
     6da:	2000      	movs	r0, #0
     6dc:	e063      	b.n	7a6 <udc_process_setup+0x336>
			switch (udd_g_ctrlreq.req.bRequest) {
     6de:	4a15      	ldr	r2, [pc, #84]	; (734 <udc_process_setup+0x2c4>)
     6e0:	7852      	ldrb	r2, [r2, #1]
     6e2:	2a0b      	cmp	r2, #11
     6e4:	d1f0      	bne.n	6c8 <udc_process_setup+0x258>
	if (udd_g_ctrlreq.req.wLength) {
     6e6:	4b13      	ldr	r3, [pc, #76]	; (734 <udc_process_setup+0x2c4>)
     6e8:	88db      	ldrh	r3, [r3, #6]
     6ea:	2b00      	cmp	r3, #0
     6ec:	d000      	beq.n	6f0 <udc_process_setup+0x280>
     6ee:	e6cd      	b.n	48c <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
     6f0:	4b17      	ldr	r3, [pc, #92]	; (750 <udc_process_setup+0x2e0>)
     6f2:	781b      	ldrb	r3, [r3, #0]
     6f4:	2b00      	cmp	r3, #0
     6f6:	d100      	bne.n	6fa <udc_process_setup+0x28a>
     6f8:	e6c8      	b.n	48c <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     6fa:	4b0e      	ldr	r3, [pc, #56]	; (734 <udc_process_setup+0x2c4>)
     6fc:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     6fe:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
     700:	0028      	movs	r0, r5
     702:	4b1c      	ldr	r3, [pc, #112]	; (774 <udc_process_setup+0x304>)
     704:	4798      	blx	r3
     706:	2800      	cmp	r0, #0
     708:	d100      	bne.n	70c <udc_process_setup+0x29c>
     70a:	e6bf      	b.n	48c <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
     70c:	b2e1      	uxtb	r1, r4
     70e:	0028      	movs	r0, r5
     710:	4b16      	ldr	r3, [pc, #88]	; (76c <udc_process_setup+0x2fc>)
     712:	4798      	blx	r3
     714:	e047      	b.n	7a6 <udc_process_setup+0x336>
	if (udd_g_ctrlreq.req.wLength) {
     716:	4b07      	ldr	r3, [pc, #28]	; (734 <udc_process_setup+0x2c4>)
     718:	88db      	ldrh	r3, [r3, #6]
     71a:	2b00      	cmp	r3, #0
     71c:	d000      	beq.n	720 <udc_process_setup+0x2b0>
     71e:	e6b5      	b.n	48c <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     720:	4b04      	ldr	r3, [pc, #16]	; (734 <udc_process_setup+0x2c4>)
     722:	885b      	ldrh	r3, [r3, #2]
     724:	2b00      	cmp	r3, #0
     726:	d000      	beq.n	72a <udc_process_setup+0x2ba>
     728:	e6b0      	b.n	48c <udc_process_setup+0x1c>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     72a:	4b02      	ldr	r3, [pc, #8]	; (734 <udc_process_setup+0x2c4>)
     72c:	7918      	ldrb	r0, [r3, #4]
     72e:	4b12      	ldr	r3, [pc, #72]	; (778 <udc_process_setup+0x308>)
     730:	4798      	blx	r3
     732:	e038      	b.n	7a6 <udc_process_setup+0x336>
     734:	20000668 	.word	0x20000668
     738:	000011d5 	.word	0x000011d5
     73c:	20000128 	.word	0x20000128
     740:	0000137d 	.word	0x0000137d
     744:	20000126 	.word	0x20000126
     748:	20000014 	.word	0x20000014
     74c:	20000088 	.word	0x20000088
     750:	20000130 	.word	0x20000130
     754:	20000134 	.word	0x20000134
     758:	00000291 	.word	0x00000291
     75c:	2000012c 	.word	0x2000012c
     760:	0000136d 	.word	0x0000136d
     764:	000003e1 	.word	0x000003e1
     768:	1fffffff 	.word	0x1fffffff
     76c:	00000371 	.word	0x00000371
     770:	00000279 	.word	0x00000279
     774:	00000305 	.word	0x00000305
     778:	00001319 	.word	0x00001319
	if (udd_g_ctrlreq.req.wLength) {
     77c:	4b34      	ldr	r3, [pc, #208]	; (850 <udc_process_setup+0x3e0>)
     77e:	88db      	ldrh	r3, [r3, #6]
     780:	2b00      	cmp	r3, #0
     782:	d000      	beq.n	786 <udc_process_setup+0x316>
     784:	e682      	b.n	48c <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     786:	4b32      	ldr	r3, [pc, #200]	; (850 <udc_process_setup+0x3e0>)
     788:	885b      	ldrh	r3, [r3, #2]
     78a:	2b00      	cmp	r3, #0
     78c:	d000      	beq.n	790 <udc_process_setup+0x320>
     78e:	e67d      	b.n	48c <udc_process_setup+0x1c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     790:	4c2f      	ldr	r4, [pc, #188]	; (850 <udc_process_setup+0x3e0>)
     792:	7920      	ldrb	r0, [r4, #4]
     794:	4b2f      	ldr	r3, [pc, #188]	; (854 <udc_process_setup+0x3e4>)
     796:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     798:	7920      	ldrb	r0, [r4, #4]
     79a:	4b2f      	ldr	r3, [pc, #188]	; (858 <udc_process_setup+0x3e8>)
     79c:	4798      	blx	r3
     79e:	e002      	b.n	7a6 <udc_process_setup+0x336>
		return false;
     7a0:	2000      	movs	r0, #0
     7a2:	e000      	b.n	7a6 <udc_process_setup+0x336>
				return udc_req_std_dev_set_feature();
     7a4:	2000      	movs	r0, #0
		if (udc_reqstd()) {
     7a6:	2800      	cmp	r0, #0
     7a8:	d000      	beq.n	7ac <udc_process_setup+0x33c>
     7aa:	e67e      	b.n	4aa <udc_process_setup+0x3a>
     7ac:	e66e      	b.n	48c <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
     7ae:	4b2b      	ldr	r3, [pc, #172]	; (85c <udc_process_setup+0x3ec>)
     7b0:	781b      	ldrb	r3, [r3, #0]
	return false;
     7b2:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
     7b4:	2b00      	cmp	r3, #0
     7b6:	d100      	bne.n	7ba <udc_process_setup+0x34a>
     7b8:	e677      	b.n	4aa <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     7ba:	4b25      	ldr	r3, [pc, #148]	; (850 <udc_process_setup+0x3e0>)
     7bc:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     7be:	4b28      	ldr	r3, [pc, #160]	; (860 <udc_process_setup+0x3f0>)
     7c0:	681d      	ldr	r5, [r3, #0]
     7c2:	682b      	ldr	r3, [r5, #0]
     7c4:	791b      	ldrb	r3, [r3, #4]
     7c6:	42a3      	cmp	r3, r4
     7c8:	d800      	bhi.n	7cc <udc_process_setup+0x35c>
     7ca:	e66e      	b.n	4aa <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
     7cc:	2100      	movs	r1, #0
     7ce:	0020      	movs	r0, r4
     7d0:	4b24      	ldr	r3, [pc, #144]	; (864 <udc_process_setup+0x3f4>)
     7d2:	4798      	blx	r3
     7d4:	2800      	cmp	r0, #0
     7d6:	d100      	bne.n	7da <udc_process_setup+0x36a>
     7d8:	e65f      	b.n	49a <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     7da:	686b      	ldr	r3, [r5, #4]
     7dc:	00a2      	lsls	r2, r4, #2
     7de:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     7e0:	68eb      	ldr	r3, [r5, #12]
     7e2:	4798      	blx	r3
     7e4:	0001      	movs	r1, r0
     7e6:	0020      	movs	r0, r4
     7e8:	4b1e      	ldr	r3, [pc, #120]	; (864 <udc_process_setup+0x3f4>)
     7ea:	4798      	blx	r3
     7ec:	2800      	cmp	r0, #0
     7ee:	d100      	bne.n	7f2 <udc_process_setup+0x382>
     7f0:	e653      	b.n	49a <udc_process_setup+0x2a>
	return udi_api->setup();
     7f2:	68ab      	ldr	r3, [r5, #8]
     7f4:	4798      	blx	r3
		if (udc_req_iface()) {
     7f6:	2800      	cmp	r0, #0
     7f8:	d000      	beq.n	7fc <udc_process_setup+0x38c>
     7fa:	e656      	b.n	4aa <udc_process_setup+0x3a>
     7fc:	e64d      	b.n	49a <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
     7fe:	4b17      	ldr	r3, [pc, #92]	; (85c <udc_process_setup+0x3ec>)
     800:	781b      	ldrb	r3, [r3, #0]
     802:	2b00      	cmp	r3, #0
     804:	d100      	bne.n	808 <udc_process_setup+0x398>
     806:	e650      	b.n	4aa <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     808:	4b15      	ldr	r3, [pc, #84]	; (860 <udc_process_setup+0x3f0>)
     80a:	681b      	ldr	r3, [r3, #0]
     80c:	681a      	ldr	r2, [r3, #0]
     80e:	7912      	ldrb	r2, [r2, #4]
     810:	2a00      	cmp	r2, #0
     812:	d01a      	beq.n	84a <udc_process_setup+0x3da>
     814:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     816:	4e13      	ldr	r6, [pc, #76]	; (864 <udc_process_setup+0x3f4>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     818:	4f11      	ldr	r7, [pc, #68]	; (860 <udc_process_setup+0x3f0>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     81a:	685b      	ldr	r3, [r3, #4]
     81c:	00aa      	lsls	r2, r5, #2
     81e:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     820:	68e3      	ldr	r3, [r4, #12]
     822:	4798      	blx	r3
     824:	0001      	movs	r1, r0
     826:	0028      	movs	r0, r5
     828:	47b0      	blx	r6
     82a:	2800      	cmp	r0, #0
     82c:	d100      	bne.n	830 <udc_process_setup+0x3c0>
     82e:	e63c      	b.n	4aa <udc_process_setup+0x3a>
		if (udi_api->setup()) {
     830:	68a3      	ldr	r3, [r4, #8]
     832:	4798      	blx	r3
     834:	2800      	cmp	r0, #0
     836:	d000      	beq.n	83a <udc_process_setup+0x3ca>
     838:	e637      	b.n	4aa <udc_process_setup+0x3a>
			iface_num++) {
     83a:	3501      	adds	r5, #1
     83c:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     83e:	683b      	ldr	r3, [r7, #0]
     840:	681a      	ldr	r2, [r3, #0]
     842:	7912      	ldrb	r2, [r2, #4]
     844:	42aa      	cmp	r2, r5
     846:	d8e8      	bhi.n	81a <udc_process_setup+0x3aa>
     848:	e62f      	b.n	4aa <udc_process_setup+0x3a>
	return false;
     84a:	2000      	movs	r0, #0
     84c:	e62d      	b.n	4aa <udc_process_setup+0x3a>
     84e:	46c0      	nop			; (mov r8, r8)
     850:	20000668 	.word	0x20000668
     854:	00001039 	.word	0x00001039
     858:	000011e9 	.word	0x000011e9
     85c:	20000130 	.word	0x20000130
     860:	20000134 	.word	0x20000134
     864:	00000291 	.word	0x00000291

00000868 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     868:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     86a:	2200      	movs	r2, #0
     86c:	4b10      	ldr	r3, [pc, #64]	; (8b0 <EIC_Handler+0x48>)
     86e:	701a      	strb	r2, [r3, #0]
     870:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     872:	4910      	ldr	r1, [pc, #64]	; (8b4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     874:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     876:	4e10      	ldr	r6, [pc, #64]	; (8b8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     878:	4c0d      	ldr	r4, [pc, #52]	; (8b0 <EIC_Handler+0x48>)
     87a:	e00a      	b.n	892 <EIC_Handler+0x2a>
		return eics[eic_index];
     87c:	490d      	ldr	r1, [pc, #52]	; (8b4 <EIC_Handler+0x4c>)
     87e:	e008      	b.n	892 <EIC_Handler+0x2a>
     880:	7823      	ldrb	r3, [r4, #0]
     882:	3301      	adds	r3, #1
     884:	b2db      	uxtb	r3, r3
     886:	7023      	strb	r3, [r4, #0]
     888:	2b0f      	cmp	r3, #15
     88a:	d810      	bhi.n	8ae <EIC_Handler+0x46>
		return NULL;
     88c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     88e:	2b1f      	cmp	r3, #31
     890:	d9f4      	bls.n	87c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     892:	0028      	movs	r0, r5
     894:	4018      	ands	r0, r3
     896:	2201      	movs	r2, #1
     898:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     89a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     89c:	4210      	tst	r0, r2
     89e:	d0ef      	beq.n	880 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     8a0:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     8a2:	009b      	lsls	r3, r3, #2
     8a4:	599b      	ldr	r3, [r3, r6]
     8a6:	2b00      	cmp	r3, #0
     8a8:	d0ea      	beq.n	880 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     8aa:	4798      	blx	r3
     8ac:	e7e8      	b.n	880 <EIC_Handler+0x18>
			}
		}
	}
}
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	20000331 	.word	0x20000331
     8b4:	40001800 	.word	0x40001800
     8b8:	20000334 	.word	0x20000334

000008bc <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     8bc:	4a04      	ldr	r2, [pc, #16]	; (8d0 <_extint_enable+0x14>)
     8be:	7813      	ldrb	r3, [r2, #0]
     8c0:	2102      	movs	r1, #2
     8c2:	430b      	orrs	r3, r1
     8c4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     8c6:	7853      	ldrb	r3, [r2, #1]
     8c8:	b25b      	sxtb	r3, r3
     8ca:	2b00      	cmp	r3, #0
     8cc:	dbfb      	blt.n	8c6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     8ce:	4770      	bx	lr
     8d0:	40001800 	.word	0x40001800

000008d4 <_system_extint_init>:
{
     8d4:	b500      	push	{lr}
     8d6:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     8d8:	4a12      	ldr	r2, [pc, #72]	; (924 <_system_extint_init+0x50>)
     8da:	6993      	ldr	r3, [r2, #24]
     8dc:	2140      	movs	r1, #64	; 0x40
     8de:	430b      	orrs	r3, r1
     8e0:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     8e2:	a901      	add	r1, sp, #4
     8e4:	2300      	movs	r3, #0
     8e6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     8e8:	2005      	movs	r0, #5
     8ea:	4b0f      	ldr	r3, [pc, #60]	; (928 <_system_extint_init+0x54>)
     8ec:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     8ee:	2005      	movs	r0, #5
     8f0:	4b0e      	ldr	r3, [pc, #56]	; (92c <_system_extint_init+0x58>)
     8f2:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     8f4:	4a0e      	ldr	r2, [pc, #56]	; (930 <_system_extint_init+0x5c>)
     8f6:	7813      	ldrb	r3, [r2, #0]
     8f8:	2101      	movs	r1, #1
     8fa:	430b      	orrs	r3, r1
     8fc:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     8fe:	7853      	ldrb	r3, [r2, #1]
     900:	b25b      	sxtb	r3, r3
     902:	2b00      	cmp	r3, #0
     904:	dbfb      	blt.n	8fe <_system_extint_init+0x2a>
     906:	4b0b      	ldr	r3, [pc, #44]	; (934 <_system_extint_init+0x60>)
     908:	0019      	movs	r1, r3
     90a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     90c:	2200      	movs	r2, #0
     90e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     910:	4299      	cmp	r1, r3
     912:	d1fc      	bne.n	90e <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     914:	2210      	movs	r2, #16
     916:	4b08      	ldr	r3, [pc, #32]	; (938 <_system_extint_init+0x64>)
     918:	601a      	str	r2, [r3, #0]
	_extint_enable();
     91a:	4b08      	ldr	r3, [pc, #32]	; (93c <_system_extint_init+0x68>)
     91c:	4798      	blx	r3
}
     91e:	b003      	add	sp, #12
     920:	bd00      	pop	{pc}
     922:	46c0      	nop			; (mov r8, r8)
     924:	40000400 	.word	0x40000400
     928:	00003bdd 	.word	0x00003bdd
     92c:	00003b51 	.word	0x00003b51
     930:	40001800 	.word	0x40001800
     934:	20000334 	.word	0x20000334
     938:	e000e100 	.word	0xe000e100
     93c:	000008bd 	.word	0x000008bd

00000940 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     940:	b5f0      	push	{r4, r5, r6, r7, lr}
     942:	46c6      	mov	lr, r8
     944:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     946:	0080      	lsls	r0, r0, #2
     948:	4b0e      	ldr	r3, [pc, #56]	; (984 <_tcc_interrupt_handler+0x44>)
     94a:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     94c:	683b      	ldr	r3, [r7, #0]
     94e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     954:	4013      	ands	r3, r2
     956:	401e      	ands	r6, r3
     958:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     95a:	4b0b      	ldr	r3, [pc, #44]	; (988 <_tcc_interrupt_handler+0x48>)
     95c:	4698      	mov	r8, r3
     95e:	e002      	b.n	966 <_tcc_interrupt_handler+0x26>
     960:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     962:	2c30      	cmp	r4, #48	; 0x30
     964:	d00a      	beq.n	97c <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     966:	4643      	mov	r3, r8
     968:	58e5      	ldr	r5, [r4, r3]
     96a:	4235      	tst	r5, r6
     96c:	d0f8      	beq.n	960 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     96e:	193b      	adds	r3, r7, r4
     970:	685b      	ldr	r3, [r3, #4]
     972:	0038      	movs	r0, r7
     974:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     976:	683b      	ldr	r3, [r7, #0]
     978:	62dd      	str	r5, [r3, #44]	; 0x2c
     97a:	e7f1      	b.n	960 <_tcc_interrupt_handler+0x20>
		}
	}
}
     97c:	bc04      	pop	{r2}
     97e:	4690      	mov	r8, r2
     980:	bdf0      	pop	{r4, r5, r6, r7, pc}
     982:	46c0      	nop			; (mov r8, r8)
     984:	20000374 	.word	0x20000374
     988:	000052ac 	.word	0x000052ac

0000098c <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     98c:	b510      	push	{r4, lr}
     98e:	2000      	movs	r0, #0
     990:	4b01      	ldr	r3, [pc, #4]	; (998 <TCC0_Handler+0xc>)
     992:	4798      	blx	r3
     994:	bd10      	pop	{r4, pc}
     996:	46c0      	nop			; (mov r8, r8)
     998:	00000941 	.word	0x00000941

0000099c <TCC1_Handler>:
     99c:	b510      	push	{r4, lr}
     99e:	2001      	movs	r0, #1
     9a0:	4b01      	ldr	r3, [pc, #4]	; (9a8 <TCC1_Handler+0xc>)
     9a2:	4798      	blx	r3
     9a4:	bd10      	pop	{r4, pc}
     9a6:	46c0      	nop			; (mov r8, r8)
     9a8:	00000941 	.word	0x00000941

000009ac <TCC2_Handler>:
     9ac:	b510      	push	{r4, lr}
     9ae:	2002      	movs	r0, #2
     9b0:	4b01      	ldr	r3, [pc, #4]	; (9b8 <TCC2_Handler+0xc>)
     9b2:	4798      	blx	r3
     9b4:	bd10      	pop	{r4, pc}
     9b6:	46c0      	nop			; (mov r8, r8)
     9b8:	00000941 	.word	0x00000941

000009bc <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
     9bc:	b510      	push	{r4, lr}
     9be:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
     9c0:	ab03      	add	r3, sp, #12
     9c2:	2200      	movs	r2, #0
     9c4:	701a      	strb	r2, [r3, #0]
     9c6:	3203      	adds	r2, #3
     9c8:	705a      	strb	r2, [r3, #1]
     9ca:	3a01      	subs	r2, #1
     9cc:	709a      	strb	r2, [r3, #2]
     9ce:	3a01      	subs	r2, #1
     9d0:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
     9d2:	4b27      	ldr	r3, [pc, #156]	; (a70 <udd_sleep_mode+0xb4>)
     9d4:	781b      	ldrb	r3, [r3, #0]
     9d6:	4283      	cmp	r3, r0
     9d8:	d007      	beq.n	9ea <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
     9da:	2800      	cmp	r0, #0
     9dc:	d107      	bne.n	9ee <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
     9de:	4b24      	ldr	r3, [pc, #144]	; (a70 <udd_sleep_mode+0xb4>)
     9e0:	781b      	ldrb	r3, [r3, #0]
     9e2:	2b00      	cmp	r3, #0
     9e4:	d123      	bne.n	a2e <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
     9e6:	4b22      	ldr	r3, [pc, #136]	; (a70 <udd_sleep_mode+0xb4>)
     9e8:	7018      	strb	r0, [r3, #0]
}
     9ea:	b004      	add	sp, #16
     9ec:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
     9ee:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     9f0:	5c1b      	ldrb	r3, [r3, r0]
     9f2:	4a20      	ldr	r2, [pc, #128]	; (a74 <udd_sleep_mode+0xb8>)
     9f4:	5cd2      	ldrb	r2, [r2, r3]
     9f6:	2aff      	cmp	r2, #255	; 0xff
     9f8:	d100      	bne.n	9fc <udd_sleep_mode+0x40>
     9fa:	e7fe      	b.n	9fa <udd_sleep_mode+0x3e>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     9fc:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     a00:	4251      	negs	r1, r2
     a02:	414a      	adcs	r2, r1
     a04:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     a06:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     a08:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     a0c:	2100      	movs	r1, #0
     a0e:	4a1a      	ldr	r2, [pc, #104]	; (a78 <udd_sleep_mode+0xbc>)
     a10:	7011      	strb	r1, [r2, #0]
	return flags;
     a12:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     a14:	4917      	ldr	r1, [pc, #92]	; (a74 <udd_sleep_mode+0xb8>)
     a16:	5cca      	ldrb	r2, [r1, r3]
     a18:	3201      	adds	r2, #1
     a1a:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     a1c:	2c00      	cmp	r4, #0
     a1e:	d0de      	beq.n	9de <udd_sleep_mode+0x22>
		cpu_irq_enable();
     a20:	2201      	movs	r2, #1
     a22:	4b15      	ldr	r3, [pc, #84]	; (a78 <udd_sleep_mode+0xbc>)
     a24:	701a      	strb	r2, [r3, #0]
     a26:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     a2a:	b662      	cpsie	i
     a2c:	e7d7      	b.n	9de <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
     a2e:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
     a30:	5cd3      	ldrb	r3, [r2, r3]
     a32:	4a10      	ldr	r2, [pc, #64]	; (a74 <udd_sleep_mode+0xb8>)
     a34:	5cd2      	ldrb	r2, [r2, r3]
     a36:	2a00      	cmp	r2, #0
     a38:	d100      	bne.n	a3c <udd_sleep_mode+0x80>
     a3a:	e7fe      	b.n	a3a <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     a3c:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     a40:	4251      	negs	r1, r2
     a42:	414a      	adcs	r2, r1
     a44:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
     a46:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     a48:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     a4c:	2100      	movs	r1, #0
     a4e:	4a0a      	ldr	r2, [pc, #40]	; (a78 <udd_sleep_mode+0xbc>)
     a50:	7011      	strb	r1, [r2, #0]
	return flags;
     a52:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
     a54:	4907      	ldr	r1, [pc, #28]	; (a74 <udd_sleep_mode+0xb8>)
     a56:	5cca      	ldrb	r2, [r1, r3]
     a58:	3a01      	subs	r2, #1
     a5a:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
     a5c:	2c00      	cmp	r4, #0
     a5e:	d0c2      	beq.n	9e6 <udd_sleep_mode+0x2a>
		cpu_irq_enable();
     a60:	2201      	movs	r2, #1
     a62:	4b05      	ldr	r3, [pc, #20]	; (a78 <udd_sleep_mode+0xbc>)
     a64:	701a      	strb	r2, [r3, #0]
     a66:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     a6a:	b662      	cpsie	i
     a6c:	e7bb      	b.n	9e6 <udd_sleep_mode+0x2a>
     a6e:	46c0      	nop			; (mov r8, r8)
     a70:	20000234 	.word	0x20000234
     a74:	2000032c 	.word	0x2000032c
     a78:	20000090 	.word	0x20000090

00000a7c <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
     a7c:	0643      	lsls	r3, r0, #25
     a7e:	d00b      	beq.n	a98 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
     a80:	230f      	movs	r3, #15
     a82:	4003      	ands	r3, r0
     a84:	005b      	lsls	r3, r3, #1
     a86:	09c0      	lsrs	r0, r0, #7
     a88:	1818      	adds	r0, r3, r0
     a8a:	3802      	subs	r0, #2
     a8c:	0083      	lsls	r3, r0, #2
     a8e:	1818      	adds	r0, r3, r0
     a90:	0080      	lsls	r0, r0, #2
     a92:	4b02      	ldr	r3, [pc, #8]	; (a9c <udd_ep_get_job+0x20>)
     a94:	1818      	adds	r0, r3, r0
	}
}
     a96:	4770      	bx	lr
		return NULL;
     a98:	2000      	movs	r0, #0
     a9a:	e7fc      	b.n	a96 <udd_ep_get_job+0x1a>
     a9c:	20000144 	.word	0x20000144

00000aa0 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
     aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
     aa2:	46d6      	mov	lr, sl
     aa4:	464f      	mov	r7, r9
     aa6:	4646      	mov	r6, r8
     aa8:	b5c0      	push	{r6, r7, lr}
     aaa:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
     aac:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
     aae:	b26b      	sxtb	r3, r5
     ab0:	2b00      	cmp	r3, #0
     ab2:	db26      	blt.n	b02 <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
     ab4:	0028      	movs	r0, r5
     ab6:	4b5e      	ldr	r3, [pc, #376]	; (c30 <udd_ep_transfer_process+0x190>)
     ab8:	4798      	blx	r3
     aba:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
     abc:	270f      	movs	r7, #15
     abe:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
     ac0:	8a03      	ldrh	r3, [r0, #16]
     ac2:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
     ac4:	464b      	mov	r3, r9
     ac6:	881b      	ldrh	r3, [r3, #0]
     ac8:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
     aca:	7c83      	ldrb	r3, [r0, #18]
     acc:	075b      	lsls	r3, r3, #29
     ace:	d46a      	bmi.n	ba6 <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
     ad0:	68e3      	ldr	r3, [r4, #12]
     ad2:	4453      	add	r3, sl
     ad4:	001e      	movs	r6, r3
     ad6:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
     ad8:	68a3      	ldr	r3, [r4, #8]
     ada:	429e      	cmp	r6, r3
     adc:	d800      	bhi.n	ae0 <udd_ep_transfer_process+0x40>
     ade:	e074      	b.n	bca <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
     ae0:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
     ae2:	7ca3      	ldrb	r3, [r4, #18]
     ae4:	2201      	movs	r2, #1
     ae6:	4393      	bics	r3, r2
     ae8:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
     aea:	6823      	ldr	r3, [r4, #0]
     aec:	2b00      	cmp	r3, #0
     aee:	d003      	beq.n	af8 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
     af0:	68e1      	ldr	r1, [r4, #12]
     af2:	002a      	movs	r2, r5
     af4:	2000      	movs	r0, #0
     af6:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
     af8:	bc1c      	pop	{r2, r3, r4}
     afa:	4690      	mov	r8, r2
     afc:	4699      	mov	r9, r3
     afe:	46a2      	mov	sl, r4
     b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
     b02:	0028      	movs	r0, r5
     b04:	4b4a      	ldr	r3, [pc, #296]	; (c30 <udd_ep_transfer_process+0x190>)
     b06:	4798      	blx	r3
     b08:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
     b0a:	270f      	movs	r7, #15
     b0c:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
     b0e:	8a03      	ldrh	r3, [r0, #16]
     b10:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
     b12:	464b      	mov	r3, r9
     b14:	885e      	ldrh	r6, [r3, #2]
     b16:	68c3      	ldr	r3, [r0, #12]
     b18:	469c      	mov	ip, r3
     b1a:	4466      	add	r6, ip
     b1c:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
     b1e:	6881      	ldr	r1, [r0, #8]
     b20:	428e      	cmp	r6, r1
     b22:	d025      	beq.n	b70 <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
     b24:	1b8d      	subs	r5, r1, r6
     b26:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
     b28:	4b42      	ldr	r3, [pc, #264]	; (c34 <udd_ep_transfer_process+0x194>)
     b2a:	429d      	cmp	r5, r3
     b2c:	d906      	bls.n	b3c <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
     b2e:	001d      	movs	r5, r3
     b30:	4641      	mov	r1, r8
     b32:	0018      	movs	r0, r3
     b34:	4b40      	ldr	r3, [pc, #256]	; (c38 <udd_ep_transfer_process+0x198>)
     b36:	4798      	blx	r3
     b38:	1a6d      	subs	r5, r5, r1
     b3a:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
     b3c:	7ca2      	ldrb	r2, [r4, #18]
     b3e:	2300      	movs	r3, #0
     b40:	0792      	lsls	r2, r2, #30
     b42:	d507      	bpl.n	b54 <udd_ep_transfer_process+0xb4>
     b44:	4641      	mov	r1, r8
     b46:	0028      	movs	r0, r5
     b48:	4b3c      	ldr	r3, [pc, #240]	; (c3c <udd_ep_transfer_process+0x19c>)
     b4a:	4798      	blx	r3
     b4c:	b289      	uxth	r1, r1
     b4e:	424b      	negs	r3, r1
     b50:	414b      	adcs	r3, r1
     b52:	b2db      	uxtb	r3, r3
     b54:	005b      	lsls	r3, r3, #1
     b56:	7ca2      	ldrb	r2, [r4, #18]
     b58:	2102      	movs	r1, #2
     b5a:	438a      	bics	r2, r1
     b5c:	4313      	orrs	r3, r2
     b5e:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
     b60:	6862      	ldr	r2, [r4, #4]
     b62:	1992      	adds	r2, r2, r6
     b64:	002b      	movs	r3, r5
     b66:	0039      	movs	r1, r7
     b68:	4835      	ldr	r0, [pc, #212]	; (c40 <udd_ep_transfer_process+0x1a0>)
     b6a:	4c36      	ldr	r4, [pc, #216]	; (c44 <udd_ep_transfer_process+0x1a4>)
     b6c:	47a0      	blx	r4
     b6e:	e7c3      	b.n	af8 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
     b70:	7c83      	ldrb	r3, [r0, #18]
     b72:	079b      	lsls	r3, r3, #30
     b74:	d40b      	bmi.n	b8e <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
     b76:	7c83      	ldrb	r3, [r0, #18]
     b78:	2201      	movs	r2, #1
     b7a:	4393      	bics	r3, r2
     b7c:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
     b7e:	6803      	ldr	r3, [r0, #0]
     b80:	2b00      	cmp	r3, #0
     b82:	d0b9      	beq.n	af8 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
     b84:	002a      	movs	r2, r5
     b86:	0031      	movs	r1, r6
     b88:	2000      	movs	r0, #0
     b8a:	4798      	blx	r3
     b8c:	e7b4      	b.n	af8 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
     b8e:	7c83      	ldrb	r3, [r0, #18]
     b90:	2202      	movs	r2, #2
     b92:	4393      	bics	r3, r2
     b94:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
     b96:	6842      	ldr	r2, [r0, #4]
     b98:	1992      	adds	r2, r2, r6
     b9a:	2300      	movs	r3, #0
     b9c:	0039      	movs	r1, r7
     b9e:	4828      	ldr	r0, [pc, #160]	; (c40 <udd_ep_transfer_process+0x1a0>)
     ba0:	4c28      	ldr	r4, [pc, #160]	; (c44 <udd_ep_transfer_process+0x1a4>)
     ba2:	47a0      	blx	r4
     ba4:	e7a8      	b.n	af8 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
     ba6:	6843      	ldr	r3, [r0, #4]
     ba8:	68c2      	ldr	r2, [r0, #12]
     baa:	4694      	mov	ip, r2
     bac:	4463      	add	r3, ip
     bae:	001e      	movs	r6, r3
     bb0:	4641      	mov	r1, r8
     bb2:	6880      	ldr	r0, [r0, #8]
     bb4:	4b21      	ldr	r3, [pc, #132]	; (c3c <udd_ep_transfer_process+0x19c>)
     bb6:	4798      	blx	r3
     bb8:	000a      	movs	r2, r1
     bba:	1e7b      	subs	r3, r7, #1
     bbc:	019b      	lsls	r3, r3, #6
     bbe:	4922      	ldr	r1, [pc, #136]	; (c48 <udd_ep_transfer_process+0x1a8>)
     bc0:	1859      	adds	r1, r3, r1
     bc2:	0030      	movs	r0, r6
     bc4:	4b21      	ldr	r3, [pc, #132]	; (c4c <udd_ep_transfer_process+0x1ac>)
     bc6:	4798      	blx	r3
     bc8:	e782      	b.n	ad0 <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
     bca:	464a      	mov	r2, r9
     bcc:	8892      	ldrh	r2, [r2, #4]
     bce:	4552      	cmp	r2, sl
     bd0:	d000      	beq.n	bd4 <udd_ep_transfer_process+0x134>
     bd2:	e786      	b.n	ae2 <udd_ep_transfer_process+0x42>
     bd4:	429e      	cmp	r6, r3
     bd6:	d100      	bne.n	bda <udd_ep_transfer_process+0x13a>
     bd8:	e783      	b.n	ae2 <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
     bda:	1b9b      	subs	r3, r3, r6
     bdc:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
     bde:	4b15      	ldr	r3, [pc, #84]	; (c34 <udd_ep_transfer_process+0x194>)
     be0:	429d      	cmp	r5, r3
     be2:	d916      	bls.n	c12 <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
     be4:	001d      	movs	r5, r3
     be6:	4641      	mov	r1, r8
     be8:	0018      	movs	r0, r3
     bea:	4b13      	ldr	r3, [pc, #76]	; (c38 <udd_ep_transfer_process+0x198>)
     bec:	4798      	blx	r3
     bee:	1a6b      	subs	r3, r5, r1
     bf0:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
     bf2:	4598      	cmp	r8, r3
     bf4:	d914      	bls.n	c20 <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
     bf6:	7ca3      	ldrb	r3, [r4, #18]
     bf8:	2204      	movs	r2, #4
     bfa:	4313      	orrs	r3, r2
     bfc:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
     bfe:	1e7a      	subs	r2, r7, #1
     c00:	0192      	lsls	r2, r2, #6
     c02:	4b11      	ldr	r3, [pc, #68]	; (c48 <udd_ep_transfer_process+0x1a8>)
     c04:	18d2      	adds	r2, r2, r3
     c06:	4643      	mov	r3, r8
     c08:	0039      	movs	r1, r7
     c0a:	480d      	ldr	r0, [pc, #52]	; (c40 <udd_ep_transfer_process+0x1a0>)
     c0c:	4c10      	ldr	r4, [pc, #64]	; (c50 <udd_ep_transfer_process+0x1b0>)
     c0e:	47a0      	blx	r4
     c10:	e772      	b.n	af8 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
     c12:	4641      	mov	r1, r8
     c14:	0028      	movs	r0, r5
     c16:	4b09      	ldr	r3, [pc, #36]	; (c3c <udd_ep_transfer_process+0x19c>)
     c18:	4798      	blx	r3
     c1a:	1a6b      	subs	r3, r5, r1
     c1c:	b29b      	uxth	r3, r3
     c1e:	e7e8      	b.n	bf2 <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
     c20:	6862      	ldr	r2, [r4, #4]
     c22:	1992      	adds	r2, r2, r6
     c24:	0039      	movs	r1, r7
     c26:	4806      	ldr	r0, [pc, #24]	; (c40 <udd_ep_transfer_process+0x1a0>)
     c28:	4c09      	ldr	r4, [pc, #36]	; (c50 <udd_ep_transfer_process+0x1b0>)
     c2a:	47a0      	blx	r4
     c2c:	e764      	b.n	af8 <udd_ep_transfer_process+0x58>
     c2e:	46c0      	nop			; (mov r8, r8)
     c30:	00000a7d 	.word	0x00000a7d
     c34:	00001fff 	.word	0x00001fff
     c38:	00004181 	.word	0x00004181
     c3c:	00003fad 	.word	0x00003fad
     c40:	20000500 	.word	0x20000500
     c44:	00001a59 	.word	0x00001a59
     c48:	20000380 	.word	0x20000380
     c4c:	00004269 	.word	0x00004269
     c50:	00001aad 	.word	0x00001aad

00000c54 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
     c54:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
     c56:	2205      	movs	r2, #5
     c58:	4b05      	ldr	r3, [pc, #20]	; (c70 <udd_ctrl_stall_data+0x1c>)
     c5a:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
     c5c:	4c05      	ldr	r4, [pc, #20]	; (c74 <udd_ctrl_stall_data+0x20>)
     c5e:	2180      	movs	r1, #128	; 0x80
     c60:	0020      	movs	r0, r4
     c62:	4b05      	ldr	r3, [pc, #20]	; (c78 <udd_ctrl_stall_data+0x24>)
     c64:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
     c66:	2100      	movs	r1, #0
     c68:	0020      	movs	r0, r4
     c6a:	4b04      	ldr	r3, [pc, #16]	; (c7c <udd_ctrl_stall_data+0x28>)
     c6c:	4798      	blx	r3
}
     c6e:	bd10      	pop	{r4, pc}
     c70:	20000142 	.word	0x20000142
     c74:	20000500 	.word	0x20000500
     c78:	000019ad 	.word	0x000019ad
     c7c:	000019d3 	.word	0x000019d3

00000c80 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
     c80:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
     c82:	4c08      	ldr	r4, [pc, #32]	; (ca4 <_usb_device_lpm_suspend+0x24>)
     c84:	2106      	movs	r1, #6
     c86:	0020      	movs	r0, r4
     c88:	4d07      	ldr	r5, [pc, #28]	; (ca8 <_usb_device_lpm_suspend+0x28>)
     c8a:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
     c8c:	2104      	movs	r1, #4
     c8e:	0020      	movs	r0, r4
     c90:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
     c92:	2102      	movs	r1, #2
     c94:	0020      	movs	r0, r4
     c96:	4b05      	ldr	r3, [pc, #20]	; (cac <_usb_device_lpm_suspend+0x2c>)
     c98:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
     c9a:	2002      	movs	r0, #2
     c9c:	4b04      	ldr	r3, [pc, #16]	; (cb0 <_usb_device_lpm_suspend+0x30>)
     c9e:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
     ca0:	bd70      	pop	{r4, r5, r6, pc}
     ca2:	46c0      	nop			; (mov r8, r8)
     ca4:	20000500 	.word	0x20000500
     ca8:	000014ed 	.word	0x000014ed
     cac:	000014cd 	.word	0x000014cd
     cb0:	000009bd 	.word	0x000009bd

00000cb4 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
     cb4:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
     cb6:	4b13      	ldr	r3, [pc, #76]	; (d04 <_usb_on_wakeup+0x50>)
     cb8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     cba:	069b      	lsls	r3, r3, #26
     cbc:	d41c      	bmi.n	cf8 <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
     cbe:	4911      	ldr	r1, [pc, #68]	; (d04 <_usb_on_wakeup+0x50>)
     cc0:	22d0      	movs	r2, #208	; 0xd0
     cc2:	68cb      	ldr	r3, [r1, #12]
     cc4:	4013      	ands	r3, r2
     cc6:	2bd0      	cmp	r3, #208	; 0xd0
     cc8:	d1fb      	bne.n	cc2 <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
     cca:	4c0f      	ldr	r4, [pc, #60]	; (d08 <_usb_on_wakeup+0x54>)
     ccc:	2102      	movs	r1, #2
     cce:	0020      	movs	r0, r4
     cd0:	4b0e      	ldr	r3, [pc, #56]	; (d0c <_usb_on_wakeup+0x58>)
     cd2:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
     cd4:	2104      	movs	r1, #4
     cd6:	0020      	movs	r0, r4
     cd8:	4d0d      	ldr	r5, [pc, #52]	; (d10 <_usb_on_wakeup+0x5c>)
     cda:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
     cdc:	4a0d      	ldr	r2, [pc, #52]	; (d14 <_usb_on_wakeup+0x60>)
     cde:	2106      	movs	r1, #6
     ce0:	0020      	movs	r0, r4
     ce2:	4b0d      	ldr	r3, [pc, #52]	; (d18 <_usb_on_wakeup+0x64>)
     ce4:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
     ce6:	2106      	movs	r1, #6
     ce8:	0020      	movs	r0, r4
     cea:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
     cec:	2003      	movs	r0, #3
     cee:	4b0b      	ldr	r3, [pc, #44]	; (d1c <_usb_on_wakeup+0x68>)
     cf0:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
     cf2:	4b0b      	ldr	r3, [pc, #44]	; (d20 <_usb_on_wakeup+0x6c>)
     cf4:	4798      	blx	r3
#endif
}
     cf6:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
     cf8:	4902      	ldr	r1, [pc, #8]	; (d04 <_usb_on_wakeup+0x50>)
     cfa:	2210      	movs	r2, #16
     cfc:	68cb      	ldr	r3, [r1, #12]
     cfe:	421a      	tst	r2, r3
     d00:	d0fc      	beq.n	cfc <_usb_on_wakeup+0x48>
     d02:	e7e2      	b.n	cca <_usb_on_wakeup+0x16>
     d04:	40000800 	.word	0x40000800
     d08:	20000500 	.word	0x20000500
     d0c:	000014ed 	.word	0x000014ed
     d10:	000014cd 	.word	0x000014cd
     d14:	00000c81 	.word	0x00000c81
     d18:	000014a9 	.word	0x000014a9
     d1c:	000009bd 	.word	0x000009bd
     d20:	00000135 	.word	0x00000135

00000d24 <_usb_on_bus_reset>:
{
     d24:	b530      	push	{r4, r5, lr}
     d26:	b083      	sub	sp, #12
     d28:	0004      	movs	r4, r0
	udc_reset();
     d2a:	4b1e      	ldr	r3, [pc, #120]	; (da4 <_usb_on_bus_reset+0x80>)
     d2c:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
     d2e:	2380      	movs	r3, #128	; 0x80
     d30:	6822      	ldr	r2, [r4, #0]
     d32:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
     d34:	ad01      	add	r5, sp, #4
     d36:	0028      	movs	r0, r5
     d38:	4b1b      	ldr	r3, [pc, #108]	; (da8 <_usb_on_bus_reset+0x84>)
     d3a:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
     d3c:	2303      	movs	r3, #3
     d3e:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
     d40:	0029      	movs	r1, r5
     d42:	0020      	movs	r0, r4
     d44:	4b19      	ldr	r3, [pc, #100]	; (dac <_usb_on_bus_reset+0x88>)
     d46:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
     d48:	4919      	ldr	r1, [pc, #100]	; (db0 <_usb_on_bus_reset+0x8c>)
     d4a:	0020      	movs	r0, r4
     d4c:	4b19      	ldr	r3, [pc, #100]	; (db4 <_usb_on_bus_reset+0x90>)
     d4e:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
     d50:	4b19      	ldr	r3, [pc, #100]	; (db8 <_usb_on_bus_reset+0x94>)
     d52:	2202      	movs	r2, #2
     d54:	2100      	movs	r1, #0
     d56:	0020      	movs	r0, r4
     d58:	4d18      	ldr	r5, [pc, #96]	; (dbc <_usb_on_bus_reset+0x98>)
     d5a:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
     d5c:	4b18      	ldr	r3, [pc, #96]	; (dc0 <_usb_on_bus_reset+0x9c>)
     d5e:	2200      	movs	r2, #0
     d60:	2100      	movs	r1, #0
     d62:	0020      	movs	r0, r4
     d64:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
     d66:	4b17      	ldr	r3, [pc, #92]	; (dc4 <_usb_on_bus_reset+0xa0>)
     d68:	2201      	movs	r2, #1
     d6a:	2100      	movs	r1, #0
     d6c:	0020      	movs	r0, r4
     d6e:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
     d70:	2202      	movs	r2, #2
     d72:	2100      	movs	r1, #0
     d74:	0020      	movs	r0, r4
     d76:	4d14      	ldr	r5, [pc, #80]	; (dc8 <_usb_on_bus_reset+0xa4>)
     d78:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
     d7a:	2200      	movs	r2, #0
     d7c:	2100      	movs	r1, #0
     d7e:	0020      	movs	r0, r4
     d80:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
     d82:	2201      	movs	r2, #1
     d84:	2100      	movs	r1, #0
     d86:	0020      	movs	r0, r4
     d88:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
     d8a:	6821      	ldr	r1, [r4, #0]
     d8c:	890b      	ldrh	r3, [r1, #8]
     d8e:	4a0f      	ldr	r2, [pc, #60]	; (dcc <_usb_on_bus_reset+0xa8>)
     d90:	401a      	ands	r2, r3
     d92:	2380      	movs	r3, #128	; 0x80
     d94:	00db      	lsls	r3, r3, #3
     d96:	4313      	orrs	r3, r2
     d98:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
     d9a:	2200      	movs	r2, #0
     d9c:	4b0c      	ldr	r3, [pc, #48]	; (dd0 <_usb_on_bus_reset+0xac>)
     d9e:	701a      	strb	r2, [r3, #0]
}
     da0:	b003      	add	sp, #12
     da2:	bd30      	pop	{r4, r5, pc}
     da4:	000003e1 	.word	0x000003e1
     da8:	000016f9 	.word	0x000016f9
     dac:	00001709 	.word	0x00001709
     db0:	20000680 	.word	0x20000680
     db4:	00001afd 	.word	0x00001afd
     db8:	00000f0d 	.word	0x00000f0d
     dbc:	00001509 	.word	0x00001509
     dc0:	00001219 	.word	0x00001219
     dc4:	00000e11 	.word	0x00000e11
     dc8:	00001559 	.word	0x00001559
     dcc:	fffff3ff 	.word	0xfffff3ff
     dd0:	20000142 	.word	0x20000142

00000dd4 <udd_ctrl_send_zlp_in>:
{
     dd4:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
     dd6:	2203      	movs	r2, #3
     dd8:	4b07      	ldr	r3, [pc, #28]	; (df8 <udd_ctrl_send_zlp_in+0x24>)
     dda:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
     ddc:	4c07      	ldr	r4, [pc, #28]	; (dfc <udd_ctrl_send_zlp_in+0x28>)
     dde:	4908      	ldr	r1, [pc, #32]	; (e00 <udd_ctrl_send_zlp_in+0x2c>)
     de0:	0020      	movs	r0, r4
     de2:	4b08      	ldr	r3, [pc, #32]	; (e04 <udd_ctrl_send_zlp_in+0x30>)
     de4:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
     de6:	4b08      	ldr	r3, [pc, #32]	; (e08 <udd_ctrl_send_zlp_in+0x34>)
     de8:	689a      	ldr	r2, [r3, #8]
     dea:	2300      	movs	r3, #0
     dec:	2100      	movs	r1, #0
     dee:	0020      	movs	r0, r4
     df0:	4c06      	ldr	r4, [pc, #24]	; (e0c <udd_ctrl_send_zlp_in+0x38>)
     df2:	47a0      	blx	r4
}
     df4:	bd10      	pop	{r4, pc}
     df6:	46c0      	nop			; (mov r8, r8)
     df8:	20000142 	.word	0x20000142
     dfc:	20000500 	.word	0x20000500
     e00:	20000680 	.word	0x20000680
     e04:	00001afd 	.word	0x00001afd
     e08:	20000668 	.word	0x20000668
     e0c:	00001a59 	.word	0x00001a59

00000e10 <_usb_ep0_on_tansfer_fail>:
{
     e10:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
     e12:	7989      	ldrb	r1, [r1, #6]
     e14:	b24b      	sxtb	r3, r1
     e16:	2b00      	cmp	r3, #0
     e18:	db06      	blt.n	e28 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
     e1a:	4b0e      	ldr	r3, [pc, #56]	; (e54 <_usb_ep0_on_tansfer_fail+0x44>)
     e1c:	781b      	ldrb	r3, [r3, #0]
     e1e:	2b02      	cmp	r3, #2
     e20:	d00f      	beq.n	e42 <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
     e22:	2b03      	cmp	r3, #3
     e24:	d011      	beq.n	e4a <_usb_ep0_on_tansfer_fail+0x3a>
}
     e26:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
     e28:	4b0a      	ldr	r3, [pc, #40]	; (e54 <_usb_ep0_on_tansfer_fail+0x44>)
     e2a:	781b      	ldrb	r3, [r3, #0]
     e2c:	2b01      	cmp	r3, #1
     e2e:	d005      	beq.n	e3c <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
     e30:	2b04      	cmp	r3, #4
     e32:	d1f8      	bne.n	e26 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
     e34:	4808      	ldr	r0, [pc, #32]	; (e58 <_usb_ep0_on_tansfer_fail+0x48>)
     e36:	4b09      	ldr	r3, [pc, #36]	; (e5c <_usb_ep0_on_tansfer_fail+0x4c>)
     e38:	4798      	blx	r3
     e3a:	e7f4      	b.n	e26 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
     e3c:	4b08      	ldr	r3, [pc, #32]	; (e60 <_usb_ep0_on_tansfer_fail+0x50>)
     e3e:	4798      	blx	r3
     e40:	e7f1      	b.n	e26 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
     e42:	2204      	movs	r2, #4
     e44:	4b03      	ldr	r3, [pc, #12]	; (e54 <_usb_ep0_on_tansfer_fail+0x44>)
     e46:	701a      	strb	r2, [r3, #0]
     e48:	e7ed      	b.n	e26 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
     e4a:	4803      	ldr	r0, [pc, #12]	; (e58 <_usb_ep0_on_tansfer_fail+0x48>)
     e4c:	4b03      	ldr	r3, [pc, #12]	; (e5c <_usb_ep0_on_tansfer_fail+0x4c>)
     e4e:	4798      	blx	r3
}
     e50:	e7e9      	b.n	e26 <_usb_ep0_on_tansfer_fail+0x16>
     e52:	46c0      	nop			; (mov r8, r8)
     e54:	20000142 	.word	0x20000142
     e58:	20000500 	.word	0x20000500
     e5c:	000019ad 	.word	0x000019ad
     e60:	00000dd5 	.word	0x00000dd5

00000e64 <udd_ctrl_in_sent>:
{
     e64:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
     e66:	4b20      	ldr	r3, [pc, #128]	; (ee8 <udd_ctrl_in_sent+0x84>)
     e68:	881b      	ldrh	r3, [r3, #0]
     e6a:	4a20      	ldr	r2, [pc, #128]	; (eec <udd_ctrl_in_sent+0x88>)
     e6c:	8994      	ldrh	r4, [r2, #12]
     e6e:	1ae4      	subs	r4, r4, r3
     e70:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
     e72:	2c00      	cmp	r4, #0
     e74:	d118      	bne.n	ea8 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
     e76:	4a1e      	ldr	r2, [pc, #120]	; (ef0 <udd_ctrl_in_sent+0x8c>)
     e78:	8811      	ldrh	r1, [r2, #0]
     e7a:	185b      	adds	r3, r3, r1
     e7c:	b29b      	uxth	r3, r3
     e7e:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
     e80:	4a1a      	ldr	r2, [pc, #104]	; (eec <udd_ctrl_in_sent+0x88>)
     e82:	88d2      	ldrh	r2, [r2, #6]
     e84:	429a      	cmp	r2, r3
     e86:	d023      	beq.n	ed0 <udd_ctrl_in_sent+0x6c>
     e88:	4b1a      	ldr	r3, [pc, #104]	; (ef4 <udd_ctrl_in_sent+0x90>)
     e8a:	781b      	ldrb	r3, [r3, #0]
     e8c:	2b00      	cmp	r3, #0
     e8e:	d11f      	bne.n	ed0 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
     e90:	4b16      	ldr	r3, [pc, #88]	; (eec <udd_ctrl_in_sent+0x88>)
     e92:	695b      	ldr	r3, [r3, #20]
     e94:	2b00      	cmp	r3, #0
     e96:	d023      	beq.n	ee0 <udd_ctrl_in_sent+0x7c>
     e98:	4798      	blx	r3
     e9a:	2800      	cmp	r0, #0
     e9c:	d020      	beq.n	ee0 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
     e9e:	2200      	movs	r2, #0
     ea0:	4b11      	ldr	r3, [pc, #68]	; (ee8 <udd_ctrl_in_sent+0x84>)
     ea2:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
     ea4:	4b11      	ldr	r3, [pc, #68]	; (eec <udd_ctrl_in_sent+0x88>)
     ea6:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
     ea8:	2c3f      	cmp	r4, #63	; 0x3f
     eaa:	d919      	bls.n	ee0 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
     eac:	2200      	movs	r2, #0
     eae:	4b11      	ldr	r3, [pc, #68]	; (ef4 <udd_ctrl_in_sent+0x90>)
     eb0:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
     eb2:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
     eb4:	4d0c      	ldr	r5, [pc, #48]	; (ee8 <udd_ctrl_in_sent+0x84>)
     eb6:	882b      	ldrh	r3, [r5, #0]
     eb8:	4a0c      	ldr	r2, [pc, #48]	; (eec <udd_ctrl_in_sent+0x88>)
     eba:	6892      	ldr	r2, [r2, #8]
     ebc:	18d2      	adds	r2, r2, r3
     ebe:	0023      	movs	r3, r4
     ec0:	2100      	movs	r1, #0
     ec2:	480d      	ldr	r0, [pc, #52]	; (ef8 <udd_ctrl_in_sent+0x94>)
     ec4:	4e0d      	ldr	r6, [pc, #52]	; (efc <udd_ctrl_in_sent+0x98>)
     ec6:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
     ec8:	882b      	ldrh	r3, [r5, #0]
     eca:	18e4      	adds	r4, r4, r3
     ecc:	802c      	strh	r4, [r5, #0]
}
     ece:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
     ed0:	2204      	movs	r2, #4
     ed2:	4b0b      	ldr	r3, [pc, #44]	; (f00 <udd_ctrl_in_sent+0x9c>)
     ed4:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
     ed6:	490b      	ldr	r1, [pc, #44]	; (f04 <udd_ctrl_in_sent+0xa0>)
     ed8:	4807      	ldr	r0, [pc, #28]	; (ef8 <udd_ctrl_in_sent+0x94>)
     eda:	4b0b      	ldr	r3, [pc, #44]	; (f08 <udd_ctrl_in_sent+0xa4>)
     edc:	4798      	blx	r3
			return;
     ede:	e7f6      	b.n	ece <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
     ee0:	2201      	movs	r2, #1
     ee2:	4b04      	ldr	r3, [pc, #16]	; (ef4 <udd_ctrl_in_sent+0x90>)
     ee4:	701a      	strb	r2, [r3, #0]
     ee6:	e7e5      	b.n	eb4 <udd_ctrl_in_sent+0x50>
     ee8:	2000013e 	.word	0x2000013e
     eec:	20000668 	.word	0x20000668
     ef0:	20000140 	.word	0x20000140
     ef4:	2000013c 	.word	0x2000013c
     ef8:	20000500 	.word	0x20000500
     efc:	00001a59 	.word	0x00001a59
     f00:	20000142 	.word	0x20000142
     f04:	20000680 	.word	0x20000680
     f08:	00001afd 	.word	0x00001afd

00000f0c <_usb_ep0_on_setup>:
{
     f0c:	b510      	push	{r4, lr}
     f0e:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
     f10:	4b2c      	ldr	r3, [pc, #176]	; (fc4 <_usb_ep0_on_setup+0xb8>)
     f12:	781b      	ldrb	r3, [r3, #0]
     f14:	2b00      	cmp	r3, #0
     f16:	d007      	beq.n	f28 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
     f18:	4b2b      	ldr	r3, [pc, #172]	; (fc8 <_usb_ep0_on_setup+0xbc>)
     f1a:	691b      	ldr	r3, [r3, #16]
     f1c:	2b00      	cmp	r3, #0
     f1e:	d000      	beq.n	f22 <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
     f20:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
     f22:	2200      	movs	r2, #0
     f24:	4b27      	ldr	r3, [pc, #156]	; (fc4 <_usb_ep0_on_setup+0xb8>)
     f26:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
     f28:	8823      	ldrh	r3, [r4, #0]
     f2a:	2b08      	cmp	r3, #8
     f2c:	d002      	beq.n	f34 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
     f2e:	4b27      	ldr	r3, [pc, #156]	; (fcc <_usb_ep0_on_setup+0xc0>)
     f30:	4798      	blx	r3
}
     f32:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
     f34:	4a24      	ldr	r2, [pc, #144]	; (fc8 <_usb_ep0_on_setup+0xbc>)
     f36:	4b26      	ldr	r3, [pc, #152]	; (fd0 <_usb_ep0_on_setup+0xc4>)
     f38:	7819      	ldrb	r1, [r3, #0]
     f3a:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
     f3c:	7859      	ldrb	r1, [r3, #1]
     f3e:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
     f40:	78d8      	ldrb	r0, [r3, #3]
     f42:	0200      	lsls	r0, r0, #8
     f44:	7899      	ldrb	r1, [r3, #2]
     f46:	1809      	adds	r1, r1, r0
     f48:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
     f4a:	7958      	ldrb	r0, [r3, #5]
     f4c:	0200      	lsls	r0, r0, #8
     f4e:	7919      	ldrb	r1, [r3, #4]
     f50:	1809      	adds	r1, r1, r0
     f52:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
     f54:	79d9      	ldrb	r1, [r3, #7]
     f56:	0209      	lsls	r1, r1, #8
     f58:	799b      	ldrb	r3, [r3, #6]
     f5a:	185b      	adds	r3, r3, r1
     f5c:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
     f5e:	4b1d      	ldr	r3, [pc, #116]	; (fd4 <_usb_ep0_on_setup+0xc8>)
     f60:	4798      	blx	r3
     f62:	2800      	cmp	r0, #0
     f64:	d016      	beq.n	f94 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
     f66:	4b18      	ldr	r3, [pc, #96]	; (fc8 <_usb_ep0_on_setup+0xbc>)
     f68:	781b      	ldrb	r3, [r3, #0]
     f6a:	2b7f      	cmp	r3, #127	; 0x7f
     f6c:	d815      	bhi.n	f9a <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
     f6e:	4b16      	ldr	r3, [pc, #88]	; (fc8 <_usb_ep0_on_setup+0xbc>)
     f70:	88db      	ldrh	r3, [r3, #6]
     f72:	2b00      	cmp	r3, #0
     f74:	d022      	beq.n	fbc <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
     f76:	2300      	movs	r3, #0
     f78:	4a17      	ldr	r2, [pc, #92]	; (fd8 <_usb_ep0_on_setup+0xcc>)
     f7a:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
     f7c:	4a17      	ldr	r2, [pc, #92]	; (fdc <_usb_ep0_on_setup+0xd0>)
     f7e:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
     f80:	2201      	movs	r2, #1
     f82:	4b10      	ldr	r3, [pc, #64]	; (fc4 <_usb_ep0_on_setup+0xb8>)
     f84:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
     f86:	2340      	movs	r3, #64	; 0x40
     f88:	4a11      	ldr	r2, [pc, #68]	; (fd0 <_usb_ep0_on_setup+0xc4>)
     f8a:	2100      	movs	r1, #0
     f8c:	4814      	ldr	r0, [pc, #80]	; (fe0 <_usb_ep0_on_setup+0xd4>)
     f8e:	4c15      	ldr	r4, [pc, #84]	; (fe4 <_usb_ep0_on_setup+0xd8>)
     f90:	47a0      	blx	r4
     f92:	e7ce      	b.n	f32 <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
     f94:	4b0d      	ldr	r3, [pc, #52]	; (fcc <_usb_ep0_on_setup+0xc0>)
     f96:	4798      	blx	r3
			return;
     f98:	e7cb      	b.n	f32 <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
     f9a:	2300      	movs	r3, #0
     f9c:	4a0e      	ldr	r2, [pc, #56]	; (fd8 <_usb_ep0_on_setup+0xcc>)
     f9e:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
     fa0:	4a0e      	ldr	r2, [pc, #56]	; (fdc <_usb_ep0_on_setup+0xd0>)
     fa2:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
     fa4:	2202      	movs	r2, #2
     fa6:	4b07      	ldr	r3, [pc, #28]	; (fc4 <_usb_ep0_on_setup+0xb8>)
     fa8:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
     faa:	2340      	movs	r3, #64	; 0x40
     fac:	4a08      	ldr	r2, [pc, #32]	; (fd0 <_usb_ep0_on_setup+0xc4>)
     fae:	2100      	movs	r1, #0
     fb0:	480b      	ldr	r0, [pc, #44]	; (fe0 <_usb_ep0_on_setup+0xd4>)
     fb2:	4c0c      	ldr	r4, [pc, #48]	; (fe4 <_usb_ep0_on_setup+0xd8>)
     fb4:	47a0      	blx	r4
			udd_ctrl_in_sent();
     fb6:	4b0c      	ldr	r3, [pc, #48]	; (fe8 <_usb_ep0_on_setup+0xdc>)
     fb8:	4798      	blx	r3
     fba:	e7ba      	b.n	f32 <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
     fbc:	4b0b      	ldr	r3, [pc, #44]	; (fec <_usb_ep0_on_setup+0xe0>)
     fbe:	4798      	blx	r3
				return;
     fc0:	e7b7      	b.n	f32 <_usb_ep0_on_setup+0x26>
     fc2:	46c0      	nop			; (mov r8, r8)
     fc4:	20000142 	.word	0x20000142
     fc8:	20000668 	.word	0x20000668
     fcc:	00000c55 	.word	0x00000c55
     fd0:	20000680 	.word	0x20000680
     fd4:	00000471 	.word	0x00000471
     fd8:	20000140 	.word	0x20000140
     fdc:	2000013e 	.word	0x2000013e
     fe0:	20000500 	.word	0x20000500
     fe4:	00001aad 	.word	0x00001aad
     fe8:	00000e65 	.word	0x00000e65
     fec:	00000dd5 	.word	0x00000dd5

00000ff0 <_usb_on_sof_notify>:
{
     ff0:	b510      	push	{r4, lr}
	udc_sof_notify();
     ff2:	4b02      	ldr	r3, [pc, #8]	; (ffc <_usb_on_sof_notify+0xc>)
     ff4:	4798      	blx	r3
	UDC_SOF_EVENT();
     ff6:	4b02      	ldr	r3, [pc, #8]	; (1000 <_usb_on_sof_notify+0x10>)
     ff8:	4798      	blx	r3
}
     ffa:	bd10      	pop	{r4, pc}
     ffc:	0000042d 	.word	0x0000042d
    1000:	00000115 	.word	0x00000115

00001004 <_usb_on_suspend>:
{
    1004:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1006:	4c07      	ldr	r4, [pc, #28]	; (1024 <_usb_on_suspend+0x20>)
    1008:	2104      	movs	r1, #4
    100a:	0020      	movs	r0, r4
    100c:	4b06      	ldr	r3, [pc, #24]	; (1028 <_usb_on_suspend+0x24>)
    100e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1010:	2102      	movs	r1, #2
    1012:	0020      	movs	r0, r4
    1014:	4b05      	ldr	r3, [pc, #20]	; (102c <_usb_on_suspend+0x28>)
    1016:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    1018:	2001      	movs	r0, #1
    101a:	4b05      	ldr	r3, [pc, #20]	; (1030 <_usb_on_suspend+0x2c>)
    101c:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    101e:	4b05      	ldr	r3, [pc, #20]	; (1034 <_usb_on_suspend+0x30>)
    1020:	4798      	blx	r3
}
    1022:	bd10      	pop	{r4, pc}
    1024:	20000500 	.word	0x20000500
    1028:	000014ed 	.word	0x000014ed
    102c:	000014cd 	.word	0x000014cd
    1030:	000009bd 	.word	0x000009bd
    1034:	00000121 	.word	0x00000121

00001038 <udd_ep_abort>:
{
    1038:	b510      	push	{r4, lr}
    103a:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    103c:	0001      	movs	r1, r0
    103e:	480a      	ldr	r0, [pc, #40]	; (1068 <udd_ep_abort+0x30>)
    1040:	4b0a      	ldr	r3, [pc, #40]	; (106c <udd_ep_abort+0x34>)
    1042:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    1044:	0020      	movs	r0, r4
    1046:	4b0a      	ldr	r3, [pc, #40]	; (1070 <udd_ep_abort+0x38>)
    1048:	4798      	blx	r3
	if (!ptr_job->busy) {
    104a:	7c83      	ldrb	r3, [r0, #18]
    104c:	07db      	lsls	r3, r3, #31
    104e:	d50a      	bpl.n	1066 <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    1050:	7c83      	ldrb	r3, [r0, #18]
    1052:	2201      	movs	r2, #1
    1054:	4393      	bics	r3, r2
    1056:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    1058:	6803      	ldr	r3, [r0, #0]
    105a:	2b00      	cmp	r3, #0
    105c:	d003      	beq.n	1066 <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    105e:	68c1      	ldr	r1, [r0, #12]
    1060:	0022      	movs	r2, r4
    1062:	2001      	movs	r0, #1
    1064:	4798      	blx	r3
}
    1066:	bd10      	pop	{r4, pc}
    1068:	20000500 	.word	0x20000500
    106c:	0000194d 	.word	0x0000194d
    1070:	00000a7d 	.word	0x00000a7d

00001074 <udd_ep_free>:
{
    1074:	b570      	push	{r4, r5, r6, lr}
    1076:	b082      	sub	sp, #8
    1078:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    107a:	ad01      	add	r5, sp, #4
    107c:	0028      	movs	r0, r5
    107e:	4b0d      	ldr	r3, [pc, #52]	; (10b4 <udd_ep_free+0x40>)
    1080:	4798      	blx	r3
	udd_ep_abort(ep);
    1082:	0020      	movs	r0, r4
    1084:	4b0c      	ldr	r3, [pc, #48]	; (10b8 <udd_ep_free+0x44>)
    1086:	4798      	blx	r3
	config_ep.ep_address = ep;
    1088:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    108a:	2300      	movs	r3, #0
    108c:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    108e:	4e0b      	ldr	r6, [pc, #44]	; (10bc <udd_ep_free+0x48>)
    1090:	0029      	movs	r1, r5
    1092:	0030      	movs	r0, r6
    1094:	4b0a      	ldr	r3, [pc, #40]	; (10c0 <udd_ep_free+0x4c>)
    1096:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1098:	210f      	movs	r1, #15
    109a:	4021      	ands	r1, r4
    109c:	2200      	movs	r2, #0
    109e:	0030      	movs	r0, r6
    10a0:	4b08      	ldr	r3, [pc, #32]	; (10c4 <udd_ep_free+0x50>)
    10a2:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    10a4:	2200      	movs	r2, #0
    10a6:	0021      	movs	r1, r4
    10a8:	0030      	movs	r0, r6
    10aa:	4b07      	ldr	r3, [pc, #28]	; (10c8 <udd_ep_free+0x54>)
    10ac:	4798      	blx	r3
}
    10ae:	b002      	add	sp, #8
    10b0:	bd70      	pop	{r4, r5, r6, pc}
    10b2:	46c0      	nop			; (mov r8, r8)
    10b4:	000016f9 	.word	0x000016f9
    10b8:	00001039 	.word	0x00001039
    10bc:	20000500 	.word	0x20000500
    10c0:	00001709 	.word	0x00001709
    10c4:	00001531 	.word	0x00001531
    10c8:	00001629 	.word	0x00001629

000010cc <udd_ep_alloc>:
{
    10cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    10ce:	b083      	sub	sp, #12
    10d0:	0005      	movs	r5, r0
    10d2:	000f      	movs	r7, r1
    10d4:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    10d6:	ae01      	add	r6, sp, #4
    10d8:	0030      	movs	r0, r6
    10da:	4b36      	ldr	r3, [pc, #216]	; (11b4 <udd_ep_alloc+0xe8>)
    10dc:	4798      	blx	r3
	config_ep.ep_address = ep;
    10de:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    10e0:	2c08      	cmp	r4, #8
    10e2:	d813      	bhi.n	110c <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    10e4:	2200      	movs	r2, #0
    10e6:	ab01      	add	r3, sp, #4
    10e8:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    10ea:	0028      	movs	r0, r5
    10ec:	4b32      	ldr	r3, [pc, #200]	; (11b8 <udd_ep_alloc+0xec>)
    10ee:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    10f0:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    10f2:	2103      	movs	r1, #3
    10f4:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    10f6:	2901      	cmp	r1, #1
    10f8:	d038      	beq.n	116c <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    10fa:	2902      	cmp	r1, #2
    10fc:	d043      	beq.n	1186 <udd_ep_alloc+0xba>
		return false;
    10fe:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    1100:	2903      	cmp	r1, #3
    1102:	d13d      	bne.n	1180 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    1104:	2204      	movs	r2, #4
    1106:	ab01      	add	r3, sp, #4
    1108:	70da      	strb	r2, [r3, #3]
    110a:	e032      	b.n	1172 <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    110c:	2c10      	cmp	r4, #16
    110e:	d803      	bhi.n	1118 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    1110:	2201      	movs	r2, #1
    1112:	ab01      	add	r3, sp, #4
    1114:	705a      	strb	r2, [r3, #1]
    1116:	e7e8      	b.n	10ea <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    1118:	2c20      	cmp	r4, #32
    111a:	d803      	bhi.n	1124 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    111c:	2202      	movs	r2, #2
    111e:	ab01      	add	r3, sp, #4
    1120:	705a      	strb	r2, [r3, #1]
    1122:	e7e2      	b.n	10ea <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    1124:	2c40      	cmp	r4, #64	; 0x40
    1126:	d803      	bhi.n	1130 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    1128:	2203      	movs	r2, #3
    112a:	ab01      	add	r3, sp, #4
    112c:	705a      	strb	r2, [r3, #1]
    112e:	e7dc      	b.n	10ea <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    1130:	2c80      	cmp	r4, #128	; 0x80
    1132:	d803      	bhi.n	113c <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    1134:	2204      	movs	r2, #4
    1136:	ab01      	add	r3, sp, #4
    1138:	705a      	strb	r2, [r3, #1]
    113a:	e7d6      	b.n	10ea <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    113c:	2380      	movs	r3, #128	; 0x80
    113e:	005b      	lsls	r3, r3, #1
    1140:	429c      	cmp	r4, r3
    1142:	d803      	bhi.n	114c <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    1144:	2205      	movs	r2, #5
    1146:	ab01      	add	r3, sp, #4
    1148:	705a      	strb	r2, [r3, #1]
    114a:	e7ce      	b.n	10ea <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    114c:	2380      	movs	r3, #128	; 0x80
    114e:	009b      	lsls	r3, r3, #2
    1150:	429c      	cmp	r4, r3
    1152:	d803      	bhi.n	115c <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    1154:	2206      	movs	r2, #6
    1156:	ab01      	add	r3, sp, #4
    1158:	705a      	strb	r2, [r3, #1]
    115a:	e7c6      	b.n	10ea <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    115c:	4a17      	ldr	r2, [pc, #92]	; (11bc <udd_ep_alloc+0xf0>)
		return false;
    115e:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    1160:	4294      	cmp	r4, r2
    1162:	d80d      	bhi.n	1180 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    1164:	2207      	movs	r2, #7
    1166:	ab01      	add	r3, sp, #4
    1168:	705a      	strb	r2, [r3, #1]
    116a:	e7be      	b.n	10ea <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    116c:	2202      	movs	r2, #2
    116e:	ab01      	add	r3, sp, #4
    1170:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    1172:	a901      	add	r1, sp, #4
    1174:	4812      	ldr	r0, [pc, #72]	; (11c0 <udd_ep_alloc+0xf4>)
    1176:	4b13      	ldr	r3, [pc, #76]	; (11c4 <udd_ep_alloc+0xf8>)
    1178:	4798      	blx	r3
		return false;
    117a:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    117c:	2800      	cmp	r0, #0
    117e:	d006      	beq.n	118e <udd_ep_alloc+0xc2>
}
    1180:	0018      	movs	r0, r3
    1182:	b003      	add	sp, #12
    1184:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    1186:	2203      	movs	r2, #3
    1188:	ab01      	add	r3, sp, #4
    118a:	70da      	strb	r2, [r3, #3]
    118c:	e7f1      	b.n	1172 <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    118e:	210f      	movs	r1, #15
    1190:	4029      	ands	r1, r5
    1192:	4c0b      	ldr	r4, [pc, #44]	; (11c0 <udd_ep_alloc+0xf4>)
    1194:	4b0c      	ldr	r3, [pc, #48]	; (11c8 <udd_ep_alloc+0xfc>)
    1196:	2200      	movs	r2, #0
    1198:	0020      	movs	r0, r4
    119a:	4e0c      	ldr	r6, [pc, #48]	; (11cc <udd_ep_alloc+0x100>)
    119c:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    119e:	2200      	movs	r2, #0
    11a0:	0029      	movs	r1, r5
    11a2:	0020      	movs	r0, r4
    11a4:	4e0a      	ldr	r6, [pc, #40]	; (11d0 <udd_ep_alloc+0x104>)
    11a6:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    11a8:	2201      	movs	r2, #1
    11aa:	0029      	movs	r1, r5
    11ac:	0020      	movs	r0, r4
    11ae:	47b0      	blx	r6
	return true;
    11b0:	2301      	movs	r3, #1
    11b2:	e7e5      	b.n	1180 <udd_ep_alloc+0xb4>
    11b4:	000016f9 	.word	0x000016f9
    11b8:	00000a7d 	.word	0x00000a7d
    11bc:	000003ff 	.word	0x000003ff
    11c0:	20000500 	.word	0x20000500
    11c4:	00001709 	.word	0x00001709
    11c8:	00000aa1 	.word	0x00000aa1
    11cc:	00001509 	.word	0x00001509
    11d0:	00001559 	.word	0x00001559

000011d4 <udd_ep_is_halted>:
{
    11d4:	b510      	push	{r4, lr}
    11d6:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    11d8:	4801      	ldr	r0, [pc, #4]	; (11e0 <udd_ep_is_halted+0xc>)
    11da:	4b02      	ldr	r3, [pc, #8]	; (11e4 <udd_ep_is_halted+0x10>)
    11dc:	4798      	blx	r3
}
    11de:	bd10      	pop	{r4, pc}
    11e0:	20000500 	.word	0x20000500
    11e4:	00001983 	.word	0x00001983

000011e8 <udd_ep_set_halt>:
{
    11e8:	b510      	push	{r4, lr}
    11ea:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    11ec:	230f      	movs	r3, #15
    11ee:	4003      	ands	r3, r0
		return false;
    11f0:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    11f2:	2b06      	cmp	r3, #6
    11f4:	d900      	bls.n	11f8 <udd_ep_set_halt+0x10>
}
    11f6:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    11f8:	0021      	movs	r1, r4
    11fa:	4804      	ldr	r0, [pc, #16]	; (120c <udd_ep_set_halt+0x24>)
    11fc:	4b04      	ldr	r3, [pc, #16]	; (1210 <udd_ep_set_halt+0x28>)
    11fe:	4798      	blx	r3
	udd_ep_abort(ep);
    1200:	0020      	movs	r0, r4
    1202:	4b04      	ldr	r3, [pc, #16]	; (1214 <udd_ep_set_halt+0x2c>)
    1204:	4798      	blx	r3
	return true;
    1206:	2001      	movs	r0, #1
    1208:	e7f5      	b.n	11f6 <udd_ep_set_halt+0xe>
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	20000500 	.word	0x20000500
    1210:	000019ad 	.word	0x000019ad
    1214:	00001039 	.word	0x00001039

00001218 <_usb_ep0_on_tansfer_ok>:
{
    1218:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    121a:	4b34      	ldr	r3, [pc, #208]	; (12ec <_usb_ep0_on_tansfer_ok+0xd4>)
    121c:	781b      	ldrb	r3, [r3, #0]
    121e:	2b01      	cmp	r3, #1
    1220:	d00a      	beq.n	1238 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    1222:	2b02      	cmp	r3, #2
    1224:	d05f      	beq.n	12e6 <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    1226:	4b32      	ldr	r3, [pc, #200]	; (12f0 <_usb_ep0_on_tansfer_ok+0xd8>)
    1228:	691b      	ldr	r3, [r3, #16]
    122a:	2b00      	cmp	r3, #0
    122c:	d000      	beq.n	1230 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    122e:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    1230:	2200      	movs	r2, #0
    1232:	4b2e      	ldr	r3, [pc, #184]	; (12ec <_usb_ep0_on_tansfer_ok+0xd4>)
    1234:	701a      	strb	r2, [r3, #0]
}
    1236:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    1238:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    123a:	4b2d      	ldr	r3, [pc, #180]	; (12f0 <_usb_ep0_on_tansfer_ok+0xd8>)
    123c:	899b      	ldrh	r3, [r3, #12]
    123e:	4a2d      	ldr	r2, [pc, #180]	; (12f4 <_usb_ep0_on_tansfer_ok+0xdc>)
    1240:	8814      	ldrh	r4, [r2, #0]
    1242:	1962      	adds	r2, r4, r5
    1244:	4293      	cmp	r3, r2
    1246:	da01      	bge.n	124c <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1248:	1b1d      	subs	r5, r3, r4
    124a:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    124c:	4b28      	ldr	r3, [pc, #160]	; (12f0 <_usb_ep0_on_tansfer_ok+0xd8>)
    124e:	6898      	ldr	r0, [r3, #8]
    1250:	1900      	adds	r0, r0, r4
    1252:	002a      	movs	r2, r5
    1254:	4928      	ldr	r1, [pc, #160]	; (12f8 <_usb_ep0_on_tansfer_ok+0xe0>)
    1256:	4b29      	ldr	r3, [pc, #164]	; (12fc <_usb_ep0_on_tansfer_ok+0xe4>)
    1258:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    125a:	1964      	adds	r4, r4, r5
    125c:	b2a4      	uxth	r4, r4
    125e:	4b25      	ldr	r3, [pc, #148]	; (12f4 <_usb_ep0_on_tansfer_ok+0xdc>)
    1260:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    1262:	2d40      	cmp	r5, #64	; 0x40
    1264:	d00a      	beq.n	127c <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1266:	4b22      	ldr	r3, [pc, #136]	; (12f0 <_usb_ep0_on_tansfer_ok+0xd8>)
    1268:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    126a:	695b      	ldr	r3, [r3, #20]
    126c:	2b00      	cmp	r3, #0
    126e:	d002      	beq.n	1276 <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    1270:	4798      	blx	r3
    1272:	2800      	cmp	r0, #0
    1274:	d014      	beq.n	12a0 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    1276:	4b22      	ldr	r3, [pc, #136]	; (1300 <_usb_ep0_on_tansfer_ok+0xe8>)
    1278:	4798      	blx	r3
    127a:	e7dc      	b.n	1236 <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    127c:	4b1c      	ldr	r3, [pc, #112]	; (12f0 <_usb_ep0_on_tansfer_ok+0xd8>)
    127e:	88da      	ldrh	r2, [r3, #6]
    1280:	4b20      	ldr	r3, [pc, #128]	; (1304 <_usb_ep0_on_tansfer_ok+0xec>)
    1282:	881b      	ldrh	r3, [r3, #0]
    1284:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    1286:	429a      	cmp	r2, r3
    1288:	dded      	ble.n	1266 <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    128a:	4b19      	ldr	r3, [pc, #100]	; (12f0 <_usb_ep0_on_tansfer_ok+0xd8>)
    128c:	899b      	ldrh	r3, [r3, #12]
    128e:	42a3      	cmp	r3, r4
    1290:	d00c      	beq.n	12ac <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1292:	2340      	movs	r3, #64	; 0x40
    1294:	4a18      	ldr	r2, [pc, #96]	; (12f8 <_usb_ep0_on_tansfer_ok+0xe0>)
    1296:	2100      	movs	r1, #0
    1298:	481b      	ldr	r0, [pc, #108]	; (1308 <_usb_ep0_on_tansfer_ok+0xf0>)
    129a:	4c1c      	ldr	r4, [pc, #112]	; (130c <_usb_ep0_on_tansfer_ok+0xf4>)
    129c:	47a0      	blx	r4
    129e:	e7ca      	b.n	1236 <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    12a0:	2205      	movs	r2, #5
    12a2:	4b12      	ldr	r3, [pc, #72]	; (12ec <_usb_ep0_on_tansfer_ok+0xd4>)
    12a4:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    12a6:	4b1a      	ldr	r3, [pc, #104]	; (1310 <_usb_ep0_on_tansfer_ok+0xf8>)
    12a8:	4798      	blx	r3
    12aa:	e7c4      	b.n	1236 <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    12ac:	4b10      	ldr	r3, [pc, #64]	; (12f0 <_usb_ep0_on_tansfer_ok+0xd8>)
    12ae:	695b      	ldr	r3, [r3, #20]
    12b0:	2b00      	cmp	r3, #0
    12b2:	d00b      	beq.n	12cc <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    12b4:	4798      	blx	r3
    12b6:	2800      	cmp	r0, #0
    12b8:	d00f      	beq.n	12da <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    12ba:	4912      	ldr	r1, [pc, #72]	; (1304 <_usb_ep0_on_tansfer_ok+0xec>)
    12bc:	4a0d      	ldr	r2, [pc, #52]	; (12f4 <_usb_ep0_on_tansfer_ok+0xdc>)
    12be:	880b      	ldrh	r3, [r1, #0]
    12c0:	8810      	ldrh	r0, [r2, #0]
    12c2:	181b      	adds	r3, r3, r0
    12c4:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    12c6:	2300      	movs	r3, #0
    12c8:	8013      	strh	r3, [r2, #0]
    12ca:	e7e2      	b.n	1292 <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    12cc:	2205      	movs	r2, #5
    12ce:	4b07      	ldr	r3, [pc, #28]	; (12ec <_usb_ep0_on_tansfer_ok+0xd4>)
    12d0:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    12d2:	2000      	movs	r0, #0
    12d4:	4b0e      	ldr	r3, [pc, #56]	; (1310 <_usb_ep0_on_tansfer_ok+0xf8>)
    12d6:	4798      	blx	r3
    12d8:	e7ad      	b.n	1236 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    12da:	2205      	movs	r2, #5
    12dc:	4b03      	ldr	r3, [pc, #12]	; (12ec <_usb_ep0_on_tansfer_ok+0xd4>)
    12de:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    12e0:	4b0b      	ldr	r3, [pc, #44]	; (1310 <_usb_ep0_on_tansfer_ok+0xf8>)
    12e2:	4798      	blx	r3
    12e4:	e7a7      	b.n	1236 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    12e6:	4b0b      	ldr	r3, [pc, #44]	; (1314 <_usb_ep0_on_tansfer_ok+0xfc>)
    12e8:	4798      	blx	r3
    12ea:	e7a4      	b.n	1236 <_usb_ep0_on_tansfer_ok+0x1e>
    12ec:	20000142 	.word	0x20000142
    12f0:	20000668 	.word	0x20000668
    12f4:	2000013e 	.word	0x2000013e
    12f8:	20000680 	.word	0x20000680
    12fc:	00004269 	.word	0x00004269
    1300:	00000dd5 	.word	0x00000dd5
    1304:	20000140 	.word	0x20000140
    1308:	20000500 	.word	0x20000500
    130c:	00001aad 	.word	0x00001aad
    1310:	000011e9 	.word	0x000011e9
    1314:	00000e65 	.word	0x00000e65

00001318 <udd_ep_clear_halt>:
{
    1318:	b570      	push	{r4, r5, r6, lr}
    131a:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    131c:	230f      	movs	r3, #15
    131e:	4003      	ands	r3, r0
		return false;
    1320:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    1322:	2b06      	cmp	r3, #6
    1324:	d900      	bls.n	1328 <udd_ep_clear_halt+0x10>
}
    1326:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    1328:	0020      	movs	r0, r4
    132a:	4b09      	ldr	r3, [pc, #36]	; (1350 <udd_ep_clear_halt+0x38>)
    132c:	4798      	blx	r3
    132e:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    1330:	0021      	movs	r1, r4
    1332:	4808      	ldr	r0, [pc, #32]	; (1354 <udd_ep_clear_halt+0x3c>)
    1334:	4b08      	ldr	r3, [pc, #32]	; (1358 <udd_ep_clear_halt+0x40>)
    1336:	4798      	blx	r3
	if (ptr_job->busy == true) {
    1338:	7cab      	ldrb	r3, [r5, #18]
	return true;
    133a:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    133c:	07db      	lsls	r3, r3, #31
    133e:	d5f2      	bpl.n	1326 <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    1340:	7cab      	ldrb	r3, [r5, #18]
    1342:	2201      	movs	r2, #1
    1344:	4393      	bics	r3, r2
    1346:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    1348:	682b      	ldr	r3, [r5, #0]
    134a:	4798      	blx	r3
	return true;
    134c:	2001      	movs	r0, #1
    134e:	e7ea      	b.n	1326 <udd_ep_clear_halt+0xe>
    1350:	00000a7d 	.word	0x00000a7d
    1354:	20000500 	.word	0x20000500
    1358:	000019d3 	.word	0x000019d3

0000135c <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    135c:	4b02      	ldr	r3, [pc, #8]	; (1368 <udd_set_address+0xc>)
    135e:	681b      	ldr	r3, [r3, #0]
    1360:	2280      	movs	r2, #128	; 0x80
    1362:	4310      	orrs	r0, r2
    1364:	7298      	strb	r0, [r3, #10]
}
    1366:	4770      	bx	lr
    1368:	20000500 	.word	0x20000500

0000136c <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    136c:	4b02      	ldr	r3, [pc, #8]	; (1378 <udd_getaddress+0xc>)
    136e:	681b      	ldr	r3, [r3, #0]
    1370:	7a98      	ldrb	r0, [r3, #10]
    1372:	0640      	lsls	r0, r0, #25
    1374:	0e40      	lsrs	r0, r0, #25
}
    1376:	4770      	bx	lr
    1378:	20000500 	.word	0x20000500

0000137c <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    137c:	4b01      	ldr	r3, [pc, #4]	; (1384 <udd_set_setup_payload+0x8>)
    137e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    1380:	8199      	strh	r1, [r3, #12]
}
    1382:	4770      	bx	lr
    1384:	20000668 	.word	0x20000668

00001388 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    1388:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    138a:	2003      	movs	r0, #3
    138c:	4b16      	ldr	r3, [pc, #88]	; (13e8 <udd_attach+0x60>)
    138e:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1390:	4c16      	ldr	r4, [pc, #88]	; (13ec <udd_attach+0x64>)
    1392:	6822      	ldr	r2, [r4, #0]
    1394:	8913      	ldrh	r3, [r2, #8]
    1396:	2101      	movs	r1, #1
    1398:	438b      	bics	r3, r1
    139a:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    139c:	4a14      	ldr	r2, [pc, #80]	; (13f0 <udd_attach+0x68>)
    139e:	3103      	adds	r1, #3
    13a0:	0020      	movs	r0, r4
    13a2:	4e14      	ldr	r6, [pc, #80]	; (13f4 <udd_attach+0x6c>)
    13a4:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    13a6:	4a14      	ldr	r2, [pc, #80]	; (13f8 <udd_attach+0x70>)
    13a8:	2100      	movs	r1, #0
    13aa:	0020      	movs	r0, r4
    13ac:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    13ae:	4a13      	ldr	r2, [pc, #76]	; (13fc <udd_attach+0x74>)
    13b0:	2101      	movs	r1, #1
    13b2:	0020      	movs	r0, r4
    13b4:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    13b6:	4a12      	ldr	r2, [pc, #72]	; (1400 <udd_attach+0x78>)
    13b8:	2102      	movs	r1, #2
    13ba:	0020      	movs	r0, r4
    13bc:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    13be:	2104      	movs	r1, #4
    13c0:	0020      	movs	r0, r4
    13c2:	4d10      	ldr	r5, [pc, #64]	; (1404 <udd_attach+0x7c>)
    13c4:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    13c6:	2100      	movs	r1, #0
    13c8:	0020      	movs	r0, r4
    13ca:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    13cc:	2101      	movs	r1, #1
    13ce:	0020      	movs	r0, r4
    13d0:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    13d2:	2102      	movs	r1, #2
    13d4:	0020      	movs	r0, r4
    13d6:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    13d8:	4a0b      	ldr	r2, [pc, #44]	; (1408 <udd_attach+0x80>)
    13da:	2106      	movs	r1, #6
    13dc:	0020      	movs	r0, r4
    13de:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    13e0:	2106      	movs	r1, #6
    13e2:	0020      	movs	r0, r4
    13e4:	47a8      	blx	r5
#endif
}
    13e6:	bd70      	pop	{r4, r5, r6, pc}
    13e8:	000009bd 	.word	0x000009bd
    13ec:	20000500 	.word	0x20000500
    13f0:	00001005 	.word	0x00001005
    13f4:	000014a9 	.word	0x000014a9
    13f8:	00000ff1 	.word	0x00000ff1
    13fc:	00000d25 	.word	0x00000d25
    1400:	00000cb5 	.word	0x00000cb5
    1404:	000014cd 	.word	0x000014cd
    1408:	00000c81 	.word	0x00000c81

0000140c <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    140c:	b570      	push	{r4, r5, r6, lr}
    140e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1410:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1414:	425a      	negs	r2, r3
    1416:	4153      	adcs	r3, r2
    1418:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    141a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    141c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1420:	2600      	movs	r6, #0
    1422:	4b18      	ldr	r3, [pc, #96]	; (1484 <udd_enable+0x78>)
    1424:	701e      	strb	r6, [r3, #0]
	return flags;
    1426:	9c00      	ldr	r4, [sp, #0]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    1428:	ad01      	add	r5, sp, #4
    142a:	0028      	movs	r0, r5
    142c:	4b16      	ldr	r3, [pc, #88]	; (1488 <udd_enable+0x7c>)
    142e:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    1430:	70ae      	strb	r6, [r5, #2]
	usb_init(&usb_device, USB, &config_usb);
    1432:	4e16      	ldr	r6, [pc, #88]	; (148c <udd_enable+0x80>)
    1434:	002a      	movs	r2, r5
    1436:	4916      	ldr	r1, [pc, #88]	; (1490 <udd_enable+0x84>)
    1438:	0030      	movs	r0, r6
    143a:	4b16      	ldr	r3, [pc, #88]	; (1494 <udd_enable+0x88>)
    143c:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    143e:	0030      	movs	r0, r6
    1440:	4b15      	ldr	r3, [pc, #84]	; (1498 <udd_enable+0x8c>)
    1442:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    1444:	4b15      	ldr	r3, [pc, #84]	; (149c <udd_enable+0x90>)
    1446:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1448:	069b      	lsls	r3, r3, #26
    144a:	d414      	bmi.n	1476 <udd_enable+0x6a>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    144c:	4913      	ldr	r1, [pc, #76]	; (149c <udd_enable+0x90>)
    144e:	22d0      	movs	r2, #208	; 0xd0
    1450:	68cb      	ldr	r3, [r1, #12]
    1452:	4013      	ands	r3, r2
    1454:	2bd0      	cmp	r3, #208	; 0xd0
    1456:	d1fb      	bne.n	1450 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    1458:	2001      	movs	r0, #1
    145a:	4b11      	ldr	r3, [pc, #68]	; (14a0 <udd_enable+0x94>)
    145c:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    145e:	4b11      	ldr	r3, [pc, #68]	; (14a4 <udd_enable+0x98>)
    1460:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    1462:	2c00      	cmp	r4, #0
    1464:	d005      	beq.n	1472 <udd_enable+0x66>
		cpu_irq_enable();
    1466:	2201      	movs	r2, #1
    1468:	4b06      	ldr	r3, [pc, #24]	; (1484 <udd_enable+0x78>)
    146a:	701a      	strb	r2, [r3, #0]
    146c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1470:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    1472:	b002      	add	sp, #8
    1474:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    1476:	4909      	ldr	r1, [pc, #36]	; (149c <udd_enable+0x90>)
    1478:	2210      	movs	r2, #16
    147a:	68cb      	ldr	r3, [r1, #12]
    147c:	421a      	tst	r2, r3
    147e:	d0fc      	beq.n	147a <udd_enable+0x6e>
    1480:	e7ea      	b.n	1458 <udd_enable+0x4c>
    1482:	46c0      	nop			; (mov r8, r8)
    1484:	20000090 	.word	0x20000090
    1488:	00002221 	.word	0x00002221
    148c:	20000500 	.word	0x20000500
    1490:	41005000 	.word	0x41005000
    1494:	00002231 	.word	0x00002231
    1498:	00001b2d 	.word	0x00001b2d
    149c:	40000800 	.word	0x40000800
    14a0:	000009bd 	.word	0x000009bd
    14a4:	00001389 	.word	0x00001389

000014a8 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    14a8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    14aa:	000b      	movs	r3, r1
    14ac:	332e      	adds	r3, #46	; 0x2e
    14ae:	009b      	lsls	r3, r3, #2
    14b0:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    14b2:	22aa      	movs	r2, #170	; 0xaa
    14b4:	0052      	lsls	r2, r2, #1
    14b6:	0049      	lsls	r1, r1, #1
    14b8:	5a83      	ldrh	r3, [r0, r2]
    14ba:	4c03      	ldr	r4, [pc, #12]	; (14c8 <usb_device_register_callback+0x20>)
    14bc:	5b09      	ldrh	r1, [r1, r4]
    14be:	430b      	orrs	r3, r1
    14c0:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    14c2:	2000      	movs	r0, #0
    14c4:	bd10      	pop	{r4, pc}
    14c6:	46c0      	nop			; (mov r8, r8)
    14c8:	000052f0 	.word	0x000052f0

000014cc <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    14cc:	0049      	lsls	r1, r1, #1
    14ce:	4b06      	ldr	r3, [pc, #24]	; (14e8 <usb_device_enable_callback+0x1c>)
    14d0:	5acb      	ldrh	r3, [r1, r3]
    14d2:	6802      	ldr	r2, [r0, #0]
    14d4:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    14d6:	21ab      	movs	r1, #171	; 0xab
    14d8:	0049      	lsls	r1, r1, #1
    14da:	5a42      	ldrh	r2, [r0, r1]
    14dc:	431a      	orrs	r2, r3
    14de:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    14e0:	6802      	ldr	r2, [r0, #0]
    14e2:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    14e4:	2000      	movs	r0, #0
    14e6:	4770      	bx	lr
    14e8:	000052f0 	.word	0x000052f0

000014ec <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    14ec:	0049      	lsls	r1, r1, #1
    14ee:	4b05      	ldr	r3, [pc, #20]	; (1504 <usb_device_disable_callback+0x18>)
    14f0:	5aca      	ldrh	r2, [r1, r3]
    14f2:	21ab      	movs	r1, #171	; 0xab
    14f4:	0049      	lsls	r1, r1, #1
    14f6:	5a43      	ldrh	r3, [r0, r1]
    14f8:	4393      	bics	r3, r2
    14fa:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    14fc:	6803      	ldr	r3, [r0, #0]
    14fe:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    1500:	2000      	movs	r0, #0
    1502:	4770      	bx	lr
    1504:	000052f0 	.word	0x000052f0

00001508 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    1508:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    150a:	008c      	lsls	r4, r1, #2
    150c:	18a4      	adds	r4, r4, r2
    150e:	3434      	adds	r4, #52	; 0x34
    1510:	00a4      	lsls	r4, r4, #2
    1512:	1904      	adds	r4, r0, r4
    1514:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    1516:	1840      	adds	r0, r0, r1
    1518:	3059      	adds	r0, #89	; 0x59
    151a:	30ff      	adds	r0, #255	; 0xff
    151c:	7803      	ldrb	r3, [r0, #0]
    151e:	4903      	ldr	r1, [pc, #12]	; (152c <usb_device_endpoint_register_callback+0x24>)
    1520:	5c8a      	ldrb	r2, [r1, r2]
    1522:	4313      	orrs	r3, r2
    1524:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    1526:	2000      	movs	r0, #0
    1528:	bd10      	pop	{r4, pc}
    152a:	46c0      	nop			; (mov r8, r8)
    152c:	00005300 	.word	0x00005300

00001530 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    1530:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    1532:	008b      	lsls	r3, r1, #2
    1534:	189b      	adds	r3, r3, r2
    1536:	3334      	adds	r3, #52	; 0x34
    1538:	009b      	lsls	r3, r3, #2
    153a:	18c3      	adds	r3, r0, r3
    153c:	2400      	movs	r4, #0
    153e:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    1540:	1840      	adds	r0, r0, r1
    1542:	3059      	adds	r0, #89	; 0x59
    1544:	30ff      	adds	r0, #255	; 0xff
    1546:	4b03      	ldr	r3, [pc, #12]	; (1554 <usb_device_endpoint_unregister_callback+0x24>)
    1548:	5c9a      	ldrb	r2, [r3, r2]
    154a:	7803      	ldrb	r3, [r0, #0]
    154c:	4393      	bics	r3, r2
    154e:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    1550:	2000      	movs	r0, #0
    1552:	bd10      	pop	{r4, pc}
    1554:	00005300 	.word	0x00005300

00001558 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    1558:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    155a:	230f      	movs	r3, #15
    155c:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    155e:	18c4      	adds	r4, r0, r3
    1560:	3461      	adds	r4, #97	; 0x61
    1562:	34ff      	adds	r4, #255	; 0xff
    1564:	7825      	ldrb	r5, [r4, #0]
    1566:	4e2f      	ldr	r6, [pc, #188]	; (1624 <usb_device_endpoint_enable_callback+0xcc>)
    1568:	5cb6      	ldrb	r6, [r6, r2]
    156a:	4335      	orrs	r5, r6
    156c:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    156e:	2a00      	cmp	r2, #0
    1570:	d129      	bne.n	15c6 <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    1572:	2b00      	cmp	r3, #0
    1574:	d112      	bne.n	159c <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    1576:	2503      	movs	r5, #3
    1578:	240a      	movs	r4, #10
    157a:	34ff      	adds	r4, #255	; 0xff
    157c:	6806      	ldr	r6, [r0, #0]
    157e:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    1580:	2a03      	cmp	r2, #3
    1582:	d109      	bne.n	1598 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    1584:	b249      	sxtb	r1, r1
    1586:	2900      	cmp	r1, #0
    1588:	db44      	blt.n	1614 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    158a:	6802      	ldr	r2, [r0, #0]
    158c:	015b      	lsls	r3, r3, #5
    158e:	18d3      	adds	r3, r2, r3
    1590:	330a      	adds	r3, #10
    1592:	33ff      	adds	r3, #255	; 0xff
    1594:	2220      	movs	r2, #32
    1596:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    1598:	2000      	movs	r0, #0
    159a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    159c:	b24c      	sxtb	r4, r1
    159e:	2c00      	cmp	r4, #0
    15a0:	db08      	blt.n	15b4 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    15a2:	015c      	lsls	r4, r3, #5
    15a4:	6805      	ldr	r5, [r0, #0]
    15a6:	46ac      	mov	ip, r5
    15a8:	4464      	add	r4, ip
    15aa:	340a      	adds	r4, #10
    15ac:	34ff      	adds	r4, #255	; 0xff
    15ae:	2501      	movs	r5, #1
    15b0:	7025      	strb	r5, [r4, #0]
    15b2:	e7e5      	b.n	1580 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    15b4:	015c      	lsls	r4, r3, #5
    15b6:	6805      	ldr	r5, [r0, #0]
    15b8:	46ac      	mov	ip, r5
    15ba:	4464      	add	r4, ip
    15bc:	340a      	adds	r4, #10
    15be:	34ff      	adds	r4, #255	; 0xff
    15c0:	2502      	movs	r5, #2
    15c2:	7025      	strb	r5, [r4, #0]
    15c4:	e7dc      	b.n	1580 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    15c6:	2a01      	cmp	r2, #1
    15c8:	d11a      	bne.n	1600 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    15ca:	2b00      	cmp	r3, #0
    15cc:	d105      	bne.n	15da <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    15ce:	6802      	ldr	r2, [r0, #0]
    15d0:	210c      	movs	r1, #12
    15d2:	230a      	movs	r3, #10
    15d4:	33ff      	adds	r3, #255	; 0xff
    15d6:	54d1      	strb	r1, [r2, r3]
    15d8:	e7de      	b.n	1598 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    15da:	b249      	sxtb	r1, r1
    15dc:	2900      	cmp	r1, #0
    15de:	db07      	blt.n	15f0 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    15e0:	6802      	ldr	r2, [r0, #0]
    15e2:	015b      	lsls	r3, r3, #5
    15e4:	18d3      	adds	r3, r2, r3
    15e6:	330a      	adds	r3, #10
    15e8:	33ff      	adds	r3, #255	; 0xff
    15ea:	2204      	movs	r2, #4
    15ec:	701a      	strb	r2, [r3, #0]
    15ee:	e7d3      	b.n	1598 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    15f0:	6802      	ldr	r2, [r0, #0]
    15f2:	015b      	lsls	r3, r3, #5
    15f4:	18d3      	adds	r3, r2, r3
    15f6:	330a      	adds	r3, #10
    15f8:	33ff      	adds	r3, #255	; 0xff
    15fa:	2208      	movs	r2, #8
    15fc:	701a      	strb	r2, [r3, #0]
    15fe:	e7cb      	b.n	1598 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    1600:	2a02      	cmp	r2, #2
    1602:	d1bd      	bne.n	1580 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    1604:	6802      	ldr	r2, [r0, #0]
    1606:	015b      	lsls	r3, r3, #5
    1608:	18d3      	adds	r3, r2, r3
    160a:	330a      	adds	r3, #10
    160c:	33ff      	adds	r3, #255	; 0xff
    160e:	2210      	movs	r2, #16
    1610:	701a      	strb	r2, [r3, #0]
    1612:	e7c1      	b.n	1598 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    1614:	6802      	ldr	r2, [r0, #0]
    1616:	015b      	lsls	r3, r3, #5
    1618:	18d3      	adds	r3, r2, r3
    161a:	330a      	adds	r3, #10
    161c:	33ff      	adds	r3, #255	; 0xff
    161e:	2240      	movs	r2, #64	; 0x40
    1620:	701a      	strb	r2, [r3, #0]
    1622:	e7b9      	b.n	1598 <usb_device_endpoint_enable_callback+0x40>
    1624:	00005300 	.word	0x00005300

00001628 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    1628:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    162a:	230f      	movs	r3, #15
    162c:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    162e:	18c4      	adds	r4, r0, r3
    1630:	3461      	adds	r4, #97	; 0x61
    1632:	34ff      	adds	r4, #255	; 0xff
    1634:	4d2f      	ldr	r5, [pc, #188]	; (16f4 <usb_device_endpoint_disable_callback+0xcc>)
    1636:	5cae      	ldrb	r6, [r5, r2]
    1638:	7825      	ldrb	r5, [r4, #0]
    163a:	43b5      	bics	r5, r6
    163c:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    163e:	2a00      	cmp	r2, #0
    1640:	d129      	bne.n	1696 <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    1642:	2b00      	cmp	r3, #0
    1644:	d112      	bne.n	166c <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    1646:	2503      	movs	r5, #3
    1648:	2484      	movs	r4, #132	; 0x84
    164a:	0064      	lsls	r4, r4, #1
    164c:	6806      	ldr	r6, [r0, #0]
    164e:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    1650:	2a03      	cmp	r2, #3
    1652:	d109      	bne.n	1668 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    1654:	b249      	sxtb	r1, r1
    1656:	2900      	cmp	r1, #0
    1658:	db44      	blt.n	16e4 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    165a:	6802      	ldr	r2, [r0, #0]
    165c:	015b      	lsls	r3, r3, #5
    165e:	18d3      	adds	r3, r2, r3
    1660:	3309      	adds	r3, #9
    1662:	33ff      	adds	r3, #255	; 0xff
    1664:	2220      	movs	r2, #32
    1666:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    1668:	2000      	movs	r0, #0
    166a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    166c:	b24c      	sxtb	r4, r1
    166e:	2c00      	cmp	r4, #0
    1670:	db08      	blt.n	1684 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    1672:	015c      	lsls	r4, r3, #5
    1674:	6805      	ldr	r5, [r0, #0]
    1676:	46ac      	mov	ip, r5
    1678:	4464      	add	r4, ip
    167a:	3409      	adds	r4, #9
    167c:	34ff      	adds	r4, #255	; 0xff
    167e:	2501      	movs	r5, #1
    1680:	7025      	strb	r5, [r4, #0]
    1682:	e7e5      	b.n	1650 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    1684:	015c      	lsls	r4, r3, #5
    1686:	6805      	ldr	r5, [r0, #0]
    1688:	46ac      	mov	ip, r5
    168a:	4464      	add	r4, ip
    168c:	3409      	adds	r4, #9
    168e:	34ff      	adds	r4, #255	; 0xff
    1690:	2502      	movs	r5, #2
    1692:	7025      	strb	r5, [r4, #0]
    1694:	e7dc      	b.n	1650 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    1696:	2a01      	cmp	r2, #1
    1698:	d11a      	bne.n	16d0 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    169a:	2b00      	cmp	r3, #0
    169c:	d105      	bne.n	16aa <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    169e:	6802      	ldr	r2, [r0, #0]
    16a0:	210c      	movs	r1, #12
    16a2:	3309      	adds	r3, #9
    16a4:	33ff      	adds	r3, #255	; 0xff
    16a6:	54d1      	strb	r1, [r2, r3]
    16a8:	e7de      	b.n	1668 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    16aa:	b249      	sxtb	r1, r1
    16ac:	2900      	cmp	r1, #0
    16ae:	db07      	blt.n	16c0 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    16b0:	6802      	ldr	r2, [r0, #0]
    16b2:	015b      	lsls	r3, r3, #5
    16b4:	18d3      	adds	r3, r2, r3
    16b6:	3309      	adds	r3, #9
    16b8:	33ff      	adds	r3, #255	; 0xff
    16ba:	2204      	movs	r2, #4
    16bc:	701a      	strb	r2, [r3, #0]
    16be:	e7d3      	b.n	1668 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    16c0:	6802      	ldr	r2, [r0, #0]
    16c2:	015b      	lsls	r3, r3, #5
    16c4:	18d3      	adds	r3, r2, r3
    16c6:	3309      	adds	r3, #9
    16c8:	33ff      	adds	r3, #255	; 0xff
    16ca:	2208      	movs	r2, #8
    16cc:	701a      	strb	r2, [r3, #0]
    16ce:	e7cb      	b.n	1668 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    16d0:	2a02      	cmp	r2, #2
    16d2:	d1bd      	bne.n	1650 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    16d4:	6802      	ldr	r2, [r0, #0]
    16d6:	015b      	lsls	r3, r3, #5
    16d8:	18d3      	adds	r3, r2, r3
    16da:	3309      	adds	r3, #9
    16dc:	33ff      	adds	r3, #255	; 0xff
    16de:	2210      	movs	r2, #16
    16e0:	701a      	strb	r2, [r3, #0]
    16e2:	e7c1      	b.n	1668 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    16e4:	6802      	ldr	r2, [r0, #0]
    16e6:	015b      	lsls	r3, r3, #5
    16e8:	18d3      	adds	r3, r2, r3
    16ea:	3309      	adds	r3, #9
    16ec:	33ff      	adds	r3, #255	; 0xff
    16ee:	2240      	movs	r2, #64	; 0x40
    16f0:	701a      	strb	r2, [r3, #0]
    16f2:	e7b9      	b.n	1668 <usb_device_endpoint_disable_callback+0x40>
    16f4:	00005300 	.word	0x00005300

000016f8 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    16f8:	2300      	movs	r3, #0
    16fa:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    16fc:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    16fe:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    1700:	3301      	adds	r3, #1
    1702:	70c3      	strb	r3, [r0, #3]
}
    1704:	4770      	bx	lr
	...

00001708 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    1708:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    170a:	780c      	ldrb	r4, [r1, #0]
    170c:	230f      	movs	r3, #15
    170e:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    1710:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    1712:	78ca      	ldrb	r2, [r1, #3]
    1714:	2a04      	cmp	r2, #4
    1716:	d870      	bhi.n	17fa <usb_device_endpoint_set_config+0xf2>
    1718:	0092      	lsls	r2, r2, #2
    171a:	4d89      	ldr	r5, [pc, #548]	; (1940 <usb_device_endpoint_set_config+0x238>)
    171c:	58aa      	ldr	r2, [r5, r2]
    171e:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    1720:	6802      	ldr	r2, [r0, #0]
    1722:	3308      	adds	r3, #8
    1724:	015b      	lsls	r3, r3, #5
    1726:	2100      	movs	r1, #0
    1728:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    172a:	2200      	movs	r2, #0
    172c:	e082      	b.n	1834 <usb_device_endpoint_set_config+0x12c>
    172e:	015c      	lsls	r4, r3, #5
    1730:	6802      	ldr	r2, [r0, #0]
    1732:	4694      	mov	ip, r2
    1734:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    1736:	2280      	movs	r2, #128	; 0x80
    1738:	0052      	lsls	r2, r2, #1
    173a:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    173c:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    173e:	076d      	lsls	r5, r5, #29
    1740:	d178      	bne.n	1834 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    1742:	32e4      	adds	r2, #228	; 0xe4
    1744:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    1746:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    1748:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    174a:	422e      	tst	r6, r5
    174c:	d172      	bne.n	1834 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    174e:	3d5f      	subs	r5, #95	; 0x5f
    1750:	32e4      	adds	r2, #228	; 0xe4
    1752:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    1754:	001a      	movs	r2, r3
    1756:	3208      	adds	r2, #8
    1758:	0152      	lsls	r2, r2, #5
    175a:	6804      	ldr	r4, [r0, #0]
    175c:	18a4      	adds	r4, r4, r2
    175e:	352f      	adds	r5, #47	; 0x2f
    1760:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    1762:	6800      	ldr	r0, [r0, #0]
    1764:	1882      	adds	r2, r0, r2
    1766:	2080      	movs	r0, #128	; 0x80
    1768:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    176a:	788a      	ldrb	r2, [r1, #2]
    176c:	2a00      	cmp	r2, #0
    176e:	d01f      	beq.n	17b0 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    1770:	0158      	lsls	r0, r3, #5
    1772:	4a74      	ldr	r2, [pc, #464]	; (1944 <usb_device_endpoint_set_config+0x23c>)
    1774:	1812      	adds	r2, r2, r0
    1776:	6854      	ldr	r4, [r2, #4]
    1778:	2080      	movs	r0, #128	; 0x80
    177a:	0600      	lsls	r0, r0, #24
    177c:	4304      	orrs	r4, r0
    177e:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    1780:	6954      	ldr	r4, [r2, #20]
    1782:	4320      	orrs	r0, r4
    1784:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    1786:	2507      	movs	r5, #7
    1788:	784c      	ldrb	r4, [r1, #1]
    178a:	015a      	lsls	r2, r3, #5
    178c:	4b6d      	ldr	r3, [pc, #436]	; (1944 <usb_device_endpoint_set_config+0x23c>)
    178e:	189b      	adds	r3, r3, r2
    1790:	6858      	ldr	r0, [r3, #4]
    1792:	402c      	ands	r4, r5
    1794:	0724      	lsls	r4, r4, #28
    1796:	4e6c      	ldr	r6, [pc, #432]	; (1948 <usb_device_endpoint_set_config+0x240>)
    1798:	4030      	ands	r0, r6
    179a:	4320      	orrs	r0, r4
    179c:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    179e:	7849      	ldrb	r1, [r1, #1]
    17a0:	695a      	ldr	r2, [r3, #20]
    17a2:	4029      	ands	r1, r5
    17a4:	0709      	lsls	r1, r1, #28
    17a6:	4032      	ands	r2, r6
    17a8:	430a      	orrs	r2, r1
    17aa:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    17ac:	2200      	movs	r2, #0
    17ae:	e041      	b.n	1834 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    17b0:	0158      	lsls	r0, r3, #5
    17b2:	4a64      	ldr	r2, [pc, #400]	; (1944 <usb_device_endpoint_set_config+0x23c>)
    17b4:	1812      	adds	r2, r2, r0
    17b6:	6850      	ldr	r0, [r2, #4]
    17b8:	0040      	lsls	r0, r0, #1
    17ba:	0840      	lsrs	r0, r0, #1
    17bc:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    17be:	6950      	ldr	r0, [r2, #20]
    17c0:	0040      	lsls	r0, r0, #1
    17c2:	0840      	lsrs	r0, r0, #1
    17c4:	6150      	str	r0, [r2, #20]
    17c6:	e7de      	b.n	1786 <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    17c8:	2c00      	cmp	r4, #0
    17ca:	db35      	blt.n	1838 <usb_device_endpoint_set_config+0x130>
    17cc:	015d      	lsls	r5, r3, #5
    17ce:	6802      	ldr	r2, [r0, #0]
    17d0:	4694      	mov	ip, r2
    17d2:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    17d4:	2280      	movs	r2, #128	; 0x80
    17d6:	0052      	lsls	r2, r2, #1
    17d8:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    17da:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    17dc:	0776      	lsls	r6, r6, #29
    17de:	d129      	bne.n	1834 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    17e0:	2680      	movs	r6, #128	; 0x80
    17e2:	0076      	lsls	r6, r6, #1
    17e4:	5daa      	ldrb	r2, [r5, r6]
    17e6:	2702      	movs	r7, #2
    17e8:	433a      	orrs	r2, r7
    17ea:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    17ec:	6802      	ldr	r2, [r0, #0]
    17ee:	0018      	movs	r0, r3
    17f0:	3008      	adds	r0, #8
    17f2:	0140      	lsls	r0, r0, #5
    17f4:	1812      	adds	r2, r2, r0
    17f6:	2040      	movs	r0, #64	; 0x40
    17f8:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    17fa:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    17fc:	784f      	ldrb	r7, [r1, #1]
    17fe:	005d      	lsls	r5, r3, #1
    1800:	18ad      	adds	r5, r5, r2
    1802:	012d      	lsls	r5, r5, #4
    1804:	4e4f      	ldr	r6, [pc, #316]	; (1944 <usb_device_endpoint_set_config+0x23c>)
    1806:	1975      	adds	r5, r6, r5
    1808:	6868      	ldr	r0, [r5, #4]
    180a:	2407      	movs	r4, #7
    180c:	403c      	ands	r4, r7
    180e:	0724      	lsls	r4, r4, #28
    1810:	4e4d      	ldr	r6, [pc, #308]	; (1948 <usb_device_endpoint_set_config+0x240>)
    1812:	4030      	ands	r0, r6
    1814:	4320      	orrs	r0, r4
    1816:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    1818:	7889      	ldrb	r1, [r1, #2]
    181a:	2900      	cmp	r1, #0
    181c:	d000      	beq.n	1820 <usb_device_endpoint_set_config+0x118>
    181e:	e088      	b.n	1932 <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    1820:	005b      	lsls	r3, r3, #1
    1822:	189b      	adds	r3, r3, r2
    1824:	011b      	lsls	r3, r3, #4
    1826:	4a47      	ldr	r2, [pc, #284]	; (1944 <usb_device_endpoint_set_config+0x23c>)
    1828:	18d3      	adds	r3, r2, r3
    182a:	685a      	ldr	r2, [r3, #4]
    182c:	0052      	lsls	r2, r2, #1
    182e:	0852      	lsrs	r2, r2, #1
    1830:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    1832:	2200      	movs	r2, #0
}
    1834:	0010      	movs	r0, r2
    1836:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1838:	015d      	lsls	r5, r3, #5
    183a:	6802      	ldr	r2, [r0, #0]
    183c:	4694      	mov	ip, r2
    183e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    1840:	2280      	movs	r2, #128	; 0x80
    1842:	0052      	lsls	r2, r2, #1
    1844:	5caf      	ldrb	r7, [r5, r2]
    1846:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    1848:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    184a:	4237      	tst	r7, r6
    184c:	d1f2      	bne.n	1834 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    184e:	3690      	adds	r6, #144	; 0x90
    1850:	5daa      	ldrb	r2, [r5, r6]
    1852:	2720      	movs	r7, #32
    1854:	433a      	orrs	r2, r7
    1856:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    1858:	6802      	ldr	r2, [r0, #0]
    185a:	0018      	movs	r0, r3
    185c:	3008      	adds	r0, #8
    185e:	0140      	lsls	r0, r0, #5
    1860:	1812      	adds	r2, r2, r0
    1862:	2080      	movs	r0, #128	; 0x80
    1864:	7110      	strb	r0, [r2, #4]
    1866:	e7c8      	b.n	17fa <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    1868:	2c00      	cmp	r4, #0
    186a:	db17      	blt.n	189c <usb_device_endpoint_set_config+0x194>
    186c:	015d      	lsls	r5, r3, #5
    186e:	6802      	ldr	r2, [r0, #0]
    1870:	4694      	mov	ip, r2
    1872:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    1874:	2280      	movs	r2, #128	; 0x80
    1876:	0052      	lsls	r2, r2, #1
    1878:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    187a:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    187c:	0776      	lsls	r6, r6, #29
    187e:	d1d9      	bne.n	1834 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    1880:	2680      	movs	r6, #128	; 0x80
    1882:	0076      	lsls	r6, r6, #1
    1884:	5daa      	ldrb	r2, [r5, r6]
    1886:	2703      	movs	r7, #3
    1888:	433a      	orrs	r2, r7
    188a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    188c:	6802      	ldr	r2, [r0, #0]
    188e:	0018      	movs	r0, r3
    1890:	3008      	adds	r0, #8
    1892:	0140      	lsls	r0, r0, #5
    1894:	1812      	adds	r2, r2, r0
    1896:	2040      	movs	r0, #64	; 0x40
    1898:	7150      	strb	r0, [r2, #5]
    189a:	e7ae      	b.n	17fa <usb_device_endpoint_set_config+0xf2>
    189c:	015d      	lsls	r5, r3, #5
    189e:	6802      	ldr	r2, [r0, #0]
    18a0:	4694      	mov	ip, r2
    18a2:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    18a4:	2280      	movs	r2, #128	; 0x80
    18a6:	0052      	lsls	r2, r2, #1
    18a8:	5caf      	ldrb	r7, [r5, r2]
    18aa:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    18ac:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    18ae:	4237      	tst	r7, r6
    18b0:	d1c0      	bne.n	1834 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    18b2:	3690      	adds	r6, #144	; 0x90
    18b4:	5daa      	ldrb	r2, [r5, r6]
    18b6:	2730      	movs	r7, #48	; 0x30
    18b8:	433a      	orrs	r2, r7
    18ba:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    18bc:	6802      	ldr	r2, [r0, #0]
    18be:	0018      	movs	r0, r3
    18c0:	3008      	adds	r0, #8
    18c2:	0140      	lsls	r0, r0, #5
    18c4:	1812      	adds	r2, r2, r0
    18c6:	2080      	movs	r0, #128	; 0x80
    18c8:	7110      	strb	r0, [r2, #4]
    18ca:	e796      	b.n	17fa <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    18cc:	2c00      	cmp	r4, #0
    18ce:	db17      	blt.n	1900 <usb_device_endpoint_set_config+0x1f8>
    18d0:	015d      	lsls	r5, r3, #5
    18d2:	6802      	ldr	r2, [r0, #0]
    18d4:	4694      	mov	ip, r2
    18d6:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    18d8:	2280      	movs	r2, #128	; 0x80
    18da:	0052      	lsls	r2, r2, #1
    18dc:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    18de:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    18e0:	0776      	lsls	r6, r6, #29
    18e2:	d1a7      	bne.n	1834 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    18e4:	2680      	movs	r6, #128	; 0x80
    18e6:	0076      	lsls	r6, r6, #1
    18e8:	5daa      	ldrb	r2, [r5, r6]
    18ea:	2704      	movs	r7, #4
    18ec:	433a      	orrs	r2, r7
    18ee:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    18f0:	6802      	ldr	r2, [r0, #0]
    18f2:	0018      	movs	r0, r3
    18f4:	3008      	adds	r0, #8
    18f6:	0140      	lsls	r0, r0, #5
    18f8:	1812      	adds	r2, r2, r0
    18fa:	2040      	movs	r0, #64	; 0x40
    18fc:	7150      	strb	r0, [r2, #5]
    18fe:	e77c      	b.n	17fa <usb_device_endpoint_set_config+0xf2>
    1900:	015d      	lsls	r5, r3, #5
    1902:	6802      	ldr	r2, [r0, #0]
    1904:	4694      	mov	ip, r2
    1906:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    1908:	2280      	movs	r2, #128	; 0x80
    190a:	0052      	lsls	r2, r2, #1
    190c:	5caf      	ldrb	r7, [r5, r2]
    190e:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    1910:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    1912:	4237      	tst	r7, r6
    1914:	d000      	beq.n	1918 <usb_device_endpoint_set_config+0x210>
    1916:	e78d      	b.n	1834 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    1918:	3690      	adds	r6, #144	; 0x90
    191a:	5daa      	ldrb	r2, [r5, r6]
    191c:	2740      	movs	r7, #64	; 0x40
    191e:	433a      	orrs	r2, r7
    1920:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    1922:	6802      	ldr	r2, [r0, #0]
    1924:	0018      	movs	r0, r3
    1926:	3008      	adds	r0, #8
    1928:	0140      	lsls	r0, r0, #5
    192a:	1812      	adds	r2, r2, r0
    192c:	2080      	movs	r0, #128	; 0x80
    192e:	7110      	strb	r0, [r2, #4]
    1930:	e763      	b.n	17fa <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    1932:	6869      	ldr	r1, [r5, #4]
    1934:	2380      	movs	r3, #128	; 0x80
    1936:	061b      	lsls	r3, r3, #24
    1938:	430b      	orrs	r3, r1
    193a:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    193c:	2200      	movs	r2, #0
    193e:	e779      	b.n	1834 <usb_device_endpoint_set_config+0x12c>
    1940:	000052dc 	.word	0x000052dc
    1944:	200006c0 	.word	0x200006c0
    1948:	8fffffff 	.word	0x8fffffff

0000194c <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    194c:	230f      	movs	r3, #15
    194e:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    1950:	b249      	sxtb	r1, r1
    1952:	2900      	cmp	r1, #0
    1954:	db0a      	blt.n	196c <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    1956:	3308      	adds	r3, #8
    1958:	015b      	lsls	r3, r3, #5
    195a:	6802      	ldr	r2, [r0, #0]
    195c:	18d2      	adds	r2, r2, r3
    195e:	2140      	movs	r1, #64	; 0x40
    1960:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    1962:	6802      	ldr	r2, [r0, #0]
    1964:	18d3      	adds	r3, r2, r3
    1966:	2201      	movs	r2, #1
    1968:	71da      	strb	r2, [r3, #7]
	}
}
    196a:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    196c:	3308      	adds	r3, #8
    196e:	015b      	lsls	r3, r3, #5
    1970:	6802      	ldr	r2, [r0, #0]
    1972:	18d2      	adds	r2, r2, r3
    1974:	2180      	movs	r1, #128	; 0x80
    1976:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    1978:	6802      	ldr	r2, [r0, #0]
    197a:	18d3      	adds	r3, r2, r3
    197c:	2202      	movs	r2, #2
    197e:	71da      	strb	r2, [r3, #7]
    1980:	e7f3      	b.n	196a <usb_device_endpoint_abort_job+0x1e>

00001982 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    1982:	230f      	movs	r3, #15
    1984:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    1986:	b249      	sxtb	r1, r1
    1988:	2900      	cmp	r1, #0
    198a:	db07      	blt.n	199c <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    198c:	6802      	ldr	r2, [r0, #0]
    198e:	3308      	adds	r3, #8
    1990:	015b      	lsls	r3, r3, #5
    1992:	18d3      	adds	r3, r2, r3
    1994:	7998      	ldrb	r0, [r3, #6]
    1996:	06c0      	lsls	r0, r0, #27
    1998:	0fc0      	lsrs	r0, r0, #31
	}
}
    199a:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    199c:	6802      	ldr	r2, [r0, #0]
    199e:	3308      	adds	r3, #8
    19a0:	015b      	lsls	r3, r3, #5
    19a2:	18d3      	adds	r3, r2, r3
    19a4:	7998      	ldrb	r0, [r3, #6]
    19a6:	0680      	lsls	r0, r0, #26
    19a8:	0fc0      	lsrs	r0, r0, #31
    19aa:	e7f6      	b.n	199a <usb_device_endpoint_is_halted+0x18>

000019ac <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    19ac:	230f      	movs	r3, #15
    19ae:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    19b0:	b249      	sxtb	r1, r1
    19b2:	2900      	cmp	r1, #0
    19b4:	db06      	blt.n	19c4 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    19b6:	6802      	ldr	r2, [r0, #0]
    19b8:	3308      	adds	r3, #8
    19ba:	015b      	lsls	r3, r3, #5
    19bc:	18d3      	adds	r3, r2, r3
    19be:	2210      	movs	r2, #16
    19c0:	715a      	strb	r2, [r3, #5]
	}
}
    19c2:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    19c4:	6802      	ldr	r2, [r0, #0]
    19c6:	3308      	adds	r3, #8
    19c8:	015b      	lsls	r3, r3, #5
    19ca:	18d3      	adds	r3, r2, r3
    19cc:	2220      	movs	r2, #32
    19ce:	715a      	strb	r2, [r3, #5]
    19d0:	e7f7      	b.n	19c2 <usb_device_endpoint_set_halt+0x16>

000019d2 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    19d2:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    19d4:	230f      	movs	r3, #15
    19d6:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    19d8:	b249      	sxtb	r1, r1
    19da:	2900      	cmp	r1, #0
    19dc:	db1d      	blt.n	1a1a <usb_device_endpoint_clear_halt+0x48>
    19de:	0159      	lsls	r1, r3, #5
    19e0:	6802      	ldr	r2, [r0, #0]
    19e2:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    19e4:	2483      	movs	r4, #131	; 0x83
    19e6:	0064      	lsls	r4, r4, #1
    19e8:	5d14      	ldrb	r4, [r2, r4]
    19ea:	06e4      	lsls	r4, r4, #27
    19ec:	d514      	bpl.n	1a18 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    19ee:	2510      	movs	r5, #16
    19f0:	2482      	movs	r4, #130	; 0x82
    19f2:	0064      	lsls	r4, r4, #1
    19f4:	5515      	strb	r5, [r2, r4]
    19f6:	6802      	ldr	r2, [r0, #0]
    19f8:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    19fa:	2108      	movs	r1, #8
    19fc:	31ff      	adds	r1, #255	; 0xff
    19fe:	5c51      	ldrb	r1, [r2, r1]
    1a00:	0689      	lsls	r1, r1, #26
    1a02:	d509      	bpl.n	1a18 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    1a04:	3ce4      	subs	r4, #228	; 0xe4
    1a06:	2108      	movs	r1, #8
    1a08:	31ff      	adds	r1, #255	; 0xff
    1a0a:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    1a0c:	6802      	ldr	r2, [r0, #0]
    1a0e:	3308      	adds	r3, #8
    1a10:	015b      	lsls	r3, r3, #5
    1a12:	18d3      	adds	r3, r2, r3
    1a14:	2201      	movs	r2, #1
    1a16:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    1a18:	bd30      	pop	{r4, r5, pc}
    1a1a:	0159      	lsls	r1, r3, #5
    1a1c:	6802      	ldr	r2, [r0, #0]
    1a1e:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    1a20:	2483      	movs	r4, #131	; 0x83
    1a22:	0064      	lsls	r4, r4, #1
    1a24:	5d14      	ldrb	r4, [r2, r4]
    1a26:	06a4      	lsls	r4, r4, #26
    1a28:	d5f6      	bpl.n	1a18 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    1a2a:	2520      	movs	r5, #32
    1a2c:	2482      	movs	r4, #130	; 0x82
    1a2e:	0064      	lsls	r4, r4, #1
    1a30:	5515      	strb	r5, [r2, r4]
    1a32:	6802      	ldr	r2, [r0, #0]
    1a34:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    1a36:	2108      	movs	r1, #8
    1a38:	31ff      	adds	r1, #255	; 0xff
    1a3a:	5c51      	ldrb	r1, [r2, r1]
    1a3c:	0649      	lsls	r1, r1, #25
    1a3e:	d5eb      	bpl.n	1a18 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    1a40:	3cc4      	subs	r4, #196	; 0xc4
    1a42:	2108      	movs	r1, #8
    1a44:	31ff      	adds	r1, #255	; 0xff
    1a46:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    1a48:	6802      	ldr	r2, [r0, #0]
    1a4a:	3308      	adds	r3, #8
    1a4c:	015b      	lsls	r3, r3, #5
    1a4e:	18d3      	adds	r3, r2, r3
    1a50:	2202      	movs	r2, #2
    1a52:	711a      	strb	r2, [r3, #4]
    1a54:	e7e0      	b.n	1a18 <usb_device_endpoint_clear_halt+0x46>
	...

00001a58 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    1a58:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    1a5a:	000c      	movs	r4, r1
    1a5c:	3408      	adds	r4, #8
    1a5e:	0164      	lsls	r4, r4, #5
    1a60:	6805      	ldr	r5, [r0, #0]
    1a62:	5d64      	ldrb	r4, [r4, r5]
    1a64:	0664      	lsls	r4, r4, #25
    1a66:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    1a68:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    1a6a:	2c00      	cmp	r4, #0
    1a6c:	d101      	bne.n	1a72 <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    1a6e:	0028      	movs	r0, r5
    1a70:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    1a72:	014c      	lsls	r4, r1, #5
    1a74:	4d0b      	ldr	r5, [pc, #44]	; (1aa4 <usb_device_endpoint_write_buffer_job+0x4c>)
    1a76:	192d      	adds	r5, r5, r4
    1a78:	002c      	movs	r4, r5
    1a7a:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    1a7c:	696a      	ldr	r2, [r5, #20]
    1a7e:	4d0a      	ldr	r5, [pc, #40]	; (1aa8 <usb_device_endpoint_write_buffer_job+0x50>)
    1a80:	402a      	ands	r2, r5
    1a82:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    1a84:	6962      	ldr	r2, [r4, #20]
    1a86:	049b      	lsls	r3, r3, #18
    1a88:	0c9b      	lsrs	r3, r3, #18
    1a8a:	0b92      	lsrs	r2, r2, #14
    1a8c:	0392      	lsls	r2, r2, #14
    1a8e:	4313      	orrs	r3, r2
    1a90:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    1a92:	6803      	ldr	r3, [r0, #0]
    1a94:	3108      	adds	r1, #8
    1a96:	0149      	lsls	r1, r1, #5
    1a98:	1859      	adds	r1, r3, r1
    1a9a:	2380      	movs	r3, #128	; 0x80
    1a9c:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    1a9e:	2500      	movs	r5, #0
    1aa0:	e7e5      	b.n	1a6e <usb_device_endpoint_write_buffer_job+0x16>
    1aa2:	46c0      	nop			; (mov r8, r8)
    1aa4:	200006c0 	.word	0x200006c0
    1aa8:	f0003fff 	.word	0xf0003fff

00001aac <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    1aac:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    1aae:	000c      	movs	r4, r1
    1ab0:	3408      	adds	r4, #8
    1ab2:	0164      	lsls	r4, r4, #5
    1ab4:	6805      	ldr	r5, [r0, #0]
    1ab6:	5d64      	ldrb	r4, [r4, r5]
    1ab8:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    1aba:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    1abc:	2c00      	cmp	r4, #0
    1abe:	d101      	bne.n	1ac4 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    1ac0:	0028      	movs	r0, r5
    1ac2:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    1ac4:	4c0b      	ldr	r4, [pc, #44]	; (1af4 <usb_device_endpoint_read_buffer_job+0x48>)
    1ac6:	014d      	lsls	r5, r1, #5
    1ac8:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    1aca:	1962      	adds	r2, r4, r5
    1acc:	6854      	ldr	r4, [r2, #4]
    1ace:	049b      	lsls	r3, r3, #18
    1ad0:	091b      	lsrs	r3, r3, #4
    1ad2:	4d09      	ldr	r5, [pc, #36]	; (1af8 <usb_device_endpoint_read_buffer_job+0x4c>)
    1ad4:	402c      	ands	r4, r5
    1ad6:	4323      	orrs	r3, r4
    1ad8:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    1ada:	6853      	ldr	r3, [r2, #4]
    1adc:	0b9b      	lsrs	r3, r3, #14
    1ade:	039b      	lsls	r3, r3, #14
    1ae0:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    1ae2:	6803      	ldr	r3, [r0, #0]
    1ae4:	3108      	adds	r1, #8
    1ae6:	0149      	lsls	r1, r1, #5
    1ae8:	1859      	adds	r1, r3, r1
    1aea:	2340      	movs	r3, #64	; 0x40
    1aec:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    1aee:	2500      	movs	r5, #0
    1af0:	e7e6      	b.n	1ac0 <usb_device_endpoint_read_buffer_job+0x14>
    1af2:	46c0      	nop			; (mov r8, r8)
    1af4:	200006c0 	.word	0x200006c0
    1af8:	f0003fff 	.word	0xf0003fff

00001afc <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    1afc:	4b09      	ldr	r3, [pc, #36]	; (1b24 <usb_device_endpoint_setup_buffer_job+0x28>)
    1afe:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    1b00:	685a      	ldr	r2, [r3, #4]
    1b02:	4909      	ldr	r1, [pc, #36]	; (1b28 <usb_device_endpoint_setup_buffer_job+0x2c>)
    1b04:	4011      	ands	r1, r2
    1b06:	2280      	movs	r2, #128	; 0x80
    1b08:	0292      	lsls	r2, r2, #10
    1b0a:	430a      	orrs	r2, r1
    1b0c:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    1b0e:	685a      	ldr	r2, [r3, #4]
    1b10:	0b92      	lsrs	r2, r2, #14
    1b12:	0392      	lsls	r2, r2, #14
    1b14:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    1b16:	6802      	ldr	r2, [r0, #0]
    1b18:	2140      	movs	r1, #64	; 0x40
    1b1a:	2382      	movs	r3, #130	; 0x82
    1b1c:	005b      	lsls	r3, r3, #1
    1b1e:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    1b20:	2000      	movs	r0, #0
    1b22:	4770      	bx	lr
    1b24:	200006c0 	.word	0x200006c0
    1b28:	f0003fff 	.word	0xf0003fff

00001b2c <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    1b2c:	6802      	ldr	r2, [r0, #0]
    1b2e:	7813      	ldrb	r3, [r2, #0]
    1b30:	2102      	movs	r1, #2
    1b32:	430b      	orrs	r3, r1
    1b34:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    1b36:	6802      	ldr	r2, [r0, #0]
    1b38:	7893      	ldrb	r3, [r2, #2]
    1b3a:	2b02      	cmp	r3, #2
    1b3c:	d0fc      	beq.n	1b38 <usb_enable+0xc>
}
    1b3e:	4770      	bx	lr

00001b40 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    1b40:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b42:	46de      	mov	lr, fp
    1b44:	4657      	mov	r7, sl
    1b46:	464e      	mov	r6, r9
    1b48:	4645      	mov	r5, r8
    1b4a:	b5e0      	push	{r5, r6, r7, lr}
    1b4c:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    1b4e:	4bc4      	ldr	r3, [pc, #784]	; (1e60 <USB_Handler+0x320>)
    1b50:	681f      	ldr	r7, [r3, #0]
    1b52:	683d      	ldr	r5, [r7, #0]
    1b54:	782b      	ldrb	r3, [r5, #0]
    1b56:	09db      	lsrs	r3, r3, #7
    1b58:	d114      	bne.n	1b84 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    1b5a:	8c2e      	ldrh	r6, [r5, #32]
    1b5c:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    1b5e:	2e00      	cmp	r6, #0
    1b60:	d000      	beq.n	1b64 <USB_Handler+0x24>
    1b62:	e22d      	b.n	1fc0 <USB_Handler+0x480>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    1b64:	8bae      	ldrh	r6, [r5, #28]
    1b66:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    1b68:	23ab      	movs	r3, #171	; 0xab
    1b6a:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    1b6c:	5afb      	ldrh	r3, [r7, r3]
    1b6e:	22aa      	movs	r2, #170	; 0xaa
    1b70:	0052      	lsls	r2, r2, #1
    1b72:	5abd      	ldrh	r5, [r7, r2]
    1b74:	401d      	ands	r5, r3
    1b76:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    1b78:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    1b7a:	4fba      	ldr	r7, [pc, #744]	; (1e64 <USB_Handler+0x324>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    1b7c:	4bb8      	ldr	r3, [pc, #736]	; (1e60 <USB_Handler+0x320>)
    1b7e:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    1b80:	4698      	mov	r8, r3
    1b82:	e208      	b.n	1f96 <USB_Handler+0x456>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    1b84:	8c2b      	ldrh	r3, [r5, #32]
    1b86:	b29b      	uxth	r3, r3
    1b88:	2b00      	cmp	r3, #0
    1b8a:	d100      	bne.n	1b8e <USB_Handler+0x4e>
    1b8c:	e13d      	b.n	1e0a <USB_Handler+0x2ca>
    1b8e:	8c28      	ldrh	r0, [r5, #32]
    1b90:	b280      	uxth	r0, r0
    1b92:	4bb5      	ldr	r3, [pc, #724]	; (1e68 <USB_Handler+0x328>)
    1b94:	4798      	blx	r3
    1b96:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    1b98:	281f      	cmp	r0, #31
    1b9a:	d900      	bls.n	1b9e <USB_Handler+0x5e>
    1b9c:	e135      	b.n	1e0a <USB_Handler+0x2ca>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    1b9e:	0003      	movs	r3, r0
    1ba0:	3308      	adds	r3, #8
    1ba2:	015b      	lsls	r3, r3, #5
    1ba4:	18ed      	adds	r5, r5, r3
    1ba6:	79ed      	ldrb	r5, [r5, #7]
    1ba8:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    1baa:	07ab      	lsls	r3, r5, #30
    1bac:	d041      	beq.n	1c32 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    1bae:	4aaf      	ldr	r2, [pc, #700]	; (1e6c <USB_Handler+0x32c>)
    1bb0:	2301      	movs	r3, #1
    1bb2:	4083      	lsls	r3, r0
    1bb4:	6811      	ldr	r1, [r2, #0]
    1bb6:	4399      	bics	r1, r3
    1bb8:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1bba:	0003      	movs	r3, r0
    1bbc:	3308      	adds	r3, #8
    1bbe:	015b      	lsls	r3, r3, #5
    1bc0:	683a      	ldr	r2, [r7, #0]
    1bc2:	4694      	mov	ip, r2
    1bc4:	4463      	add	r3, ip
    1bc6:	2203      	movs	r2, #3
    1bc8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    1bca:	183b      	adds	r3, r7, r0
    1bcc:	33ae      	adds	r3, #174	; 0xae
    1bce:	781b      	ldrb	r3, [r3, #0]
    1bd0:	07db      	lsls	r3, r3, #31
    1bd2:	d52e      	bpl.n	1c32 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    1bd4:	4ba6      	ldr	r3, [pc, #664]	; (1e70 <USB_Handler+0x330>)
    1bd6:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    1bd8:	683a      	ldr	r2, [r7, #0]
    1bda:	0003      	movs	r3, r0
    1bdc:	3308      	adds	r3, #8
    1bde:	015b      	lsls	r3, r3, #5
    1be0:	5c9b      	ldrb	r3, [r3, r2]
    1be2:	079b      	lsls	r3, r3, #30
    1be4:	0f9b      	lsrs	r3, r3, #30
    1be6:	2b01      	cmp	r3, #1
    1be8:	d100      	bne.n	1bec <USB_Handler+0xac>
    1bea:	e094      	b.n	1d16 <USB_Handler+0x1d6>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    1bec:	0142      	lsls	r2, r0, #5
    1bee:	4ba1      	ldr	r3, [pc, #644]	; (1e74 <USB_Handler+0x334>)
    1bf0:	189b      	adds	r3, r3, r2
    1bf2:	685a      	ldr	r2, [r3, #4]
    1bf4:	0112      	lsls	r2, r2, #4
    1bf6:	0c92      	lsrs	r2, r2, #18
    1bf8:	b290      	uxth	r0, r2
    1bfa:	499d      	ldr	r1, [pc, #628]	; (1e70 <USB_Handler+0x330>)
    1bfc:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    1bfe:	685a      	ldr	r2, [r3, #4]
    1c00:	0492      	lsls	r2, r2, #18
    1c02:	0c92      	lsrs	r2, r2, #18
    1c04:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    1c06:	685a      	ldr	r2, [r3, #4]
    1c08:	499b      	ldr	r1, [pc, #620]	; (1e78 <USB_Handler+0x338>)
    1c0a:	400a      	ands	r2, r1
    1c0c:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    1c0e:	2800      	cmp	r0, #0
    1c10:	d107      	bne.n	1c22 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    1c12:	0162      	lsls	r2, r4, #5
    1c14:	4b97      	ldr	r3, [pc, #604]	; (1e74 <USB_Handler+0x334>)
    1c16:	189b      	adds	r3, r3, r2
    1c18:	685b      	ldr	r3, [r3, #4]
    1c1a:	049b      	lsls	r3, r3, #18
    1c1c:	0c9b      	lsrs	r3, r3, #18
    1c1e:	4a94      	ldr	r2, [pc, #592]	; (1e70 <USB_Handler+0x330>)
    1c20:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    1c22:	4b8f      	ldr	r3, [pc, #572]	; (1e60 <USB_Handler+0x320>)
    1c24:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    1c26:	1ca3      	adds	r3, r4, #2
    1c28:	011b      	lsls	r3, r3, #4
    1c2a:	18c3      	adds	r3, r0, r3
    1c2c:	685b      	ldr	r3, [r3, #4]
    1c2e:	4990      	ldr	r1, [pc, #576]	; (1e70 <USB_Handler+0x330>)
    1c30:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    1c32:	076b      	lsls	r3, r5, #29
    1c34:	d51f      	bpl.n	1c76 <USB_Handler+0x136>
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    1c36:	4b8a      	ldr	r3, [pc, #552]	; (1e60 <USB_Handler+0x320>)
    1c38:	6818      	ldr	r0, [r3, #0]
    1c3a:	6802      	ldr	r2, [r0, #0]
    1c3c:	0023      	movs	r3, r4
    1c3e:	3308      	adds	r3, #8
    1c40:	015b      	lsls	r3, r3, #5
    1c42:	5c9b      	ldrb	r3, [r3, r2]
    1c44:	069b      	lsls	r3, r3, #26
    1c46:	0f5b      	lsrs	r3, r3, #29
    1c48:	2b02      	cmp	r3, #2
    1c4a:	d075      	beq.n	1d38 <USB_Handler+0x1f8>
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    1c4c:	0023      	movs	r3, r4
    1c4e:	3308      	adds	r3, #8
    1c50:	015b      	lsls	r3, r3, #5
    1c52:	5c9b      	ldrb	r3, [r3, r2]
    1c54:	069b      	lsls	r3, r3, #26
    1c56:	0f5b      	lsrs	r3, r3, #29
    1c58:	2b03      	cmp	r3, #3
    1c5a:	d100      	bne.n	1c5e <USB_Handler+0x11e>
    1c5c:	e09e      	b.n	1d9c <USB_Handler+0x25c>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    1c5e:	0162      	lsls	r2, r4, #5
    1c60:	4b84      	ldr	r3, [pc, #528]	; (1e74 <USB_Handler+0x334>)
    1c62:	189b      	adds	r3, r3, r2
    1c64:	2200      	movs	r2, #0
    1c66:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1c68:	6803      	ldr	r3, [r0, #0]
    1c6a:	0022      	movs	r2, r4
    1c6c:	3208      	adds	r2, #8
    1c6e:	0152      	lsls	r2, r2, #5
    1c70:	189b      	adds	r3, r3, r2
    1c72:	2204      	movs	r2, #4
    1c74:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    1c76:	072b      	lsls	r3, r5, #28
    1c78:	d515      	bpl.n	1ca6 <USB_Handler+0x166>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    1c7a:	4a7c      	ldr	r2, [pc, #496]	; (1e6c <USB_Handler+0x32c>)
    1c7c:	2301      	movs	r3, #1
    1c7e:	40a3      	lsls	r3, r4
    1c80:	6811      	ldr	r1, [r2, #0]
    1c82:	4399      	bics	r1, r3
    1c84:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1c86:	4b76      	ldr	r3, [pc, #472]	; (1e60 <USB_Handler+0x320>)
    1c88:	6818      	ldr	r0, [r3, #0]
    1c8a:	0023      	movs	r3, r4
    1c8c:	3308      	adds	r3, #8
    1c8e:	015b      	lsls	r3, r3, #5
    1c90:	6802      	ldr	r2, [r0, #0]
    1c92:	4694      	mov	ip, r2
    1c94:	4463      	add	r3, ip
    1c96:	2208      	movs	r2, #8
    1c98:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    1c9a:	1903      	adds	r3, r0, r4
    1c9c:	33ae      	adds	r3, #174	; 0xae
    1c9e:	781b      	ldrb	r3, [r3, #0]
    1ca0:	079b      	lsls	r3, r3, #30
    1ca2:	d500      	bpl.n	1ca6 <USB_Handler+0x166>
    1ca4:	e094      	b.n	1dd0 <USB_Handler+0x290>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    1ca6:	06eb      	lsls	r3, r5, #27
    1ca8:	d515      	bpl.n	1cd6 <USB_Handler+0x196>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    1caa:	4a70      	ldr	r2, [pc, #448]	; (1e6c <USB_Handler+0x32c>)
    1cac:	2301      	movs	r3, #1
    1cae:	40a3      	lsls	r3, r4
    1cb0:	6811      	ldr	r1, [r2, #0]
    1cb2:	4399      	bics	r1, r3
    1cb4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1cb6:	4b6a      	ldr	r3, [pc, #424]	; (1e60 <USB_Handler+0x320>)
    1cb8:	6818      	ldr	r0, [r3, #0]
    1cba:	0023      	movs	r3, r4
    1cbc:	3308      	adds	r3, #8
    1cbe:	015b      	lsls	r3, r3, #5
    1cc0:	6802      	ldr	r2, [r0, #0]
    1cc2:	4694      	mov	ip, r2
    1cc4:	4463      	add	r3, ip
    1cc6:	2210      	movs	r2, #16
    1cc8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    1cca:	1903      	adds	r3, r0, r4
    1ccc:	33ae      	adds	r3, #174	; 0xae
    1cce:	781b      	ldrb	r3, [r3, #0]
    1cd0:	075b      	lsls	r3, r3, #29
    1cd2:	d500      	bpl.n	1cd6 <USB_Handler+0x196>
    1cd4:	e08a      	b.n	1dec <USB_Handler+0x2ac>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    1cd6:	06ab      	lsls	r3, r5, #26
    1cd8:	d400      	bmi.n	1cdc <USB_Handler+0x19c>
    1cda:	e12f      	b.n	1f3c <USB_Handler+0x3fc>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    1cdc:	4a63      	ldr	r2, [pc, #396]	; (1e6c <USB_Handler+0x32c>)
    1cde:	2301      	movs	r3, #1
    1ce0:	40a3      	lsls	r3, r4
    1ce2:	6811      	ldr	r1, [r2, #0]
    1ce4:	4399      	bics	r1, r3
    1ce6:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1ce8:	4b5d      	ldr	r3, [pc, #372]	; (1e60 <USB_Handler+0x320>)
    1cea:	6818      	ldr	r0, [r3, #0]
    1cec:	0023      	movs	r3, r4
    1cee:	3308      	adds	r3, #8
    1cf0:	015b      	lsls	r3, r3, #5
    1cf2:	6802      	ldr	r2, [r0, #0]
    1cf4:	4694      	mov	ip, r2
    1cf6:	4463      	add	r3, ip
    1cf8:	2220      	movs	r2, #32
    1cfa:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    1cfc:	1903      	adds	r3, r0, r4
    1cfe:	33ae      	adds	r3, #174	; 0xae
    1d00:	781b      	ldrb	r3, [r3, #0]
    1d02:	071b      	lsls	r3, r3, #28
    1d04:	d400      	bmi.n	1d08 <USB_Handler+0x1c8>
    1d06:	e119      	b.n	1f3c <USB_Handler+0x3fc>
				pipe_callback_para.pipe_num = pipe_int;
    1d08:	4959      	ldr	r1, [pc, #356]	; (1e70 <USB_Handler+0x330>)
    1d0a:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    1d0c:	0124      	lsls	r4, r4, #4
    1d0e:	1904      	adds	r4, r0, r4
    1d10:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1d12:	4798      	blx	r3
    1d14:	e112      	b.n	1f3c <USB_Handler+0x3fc>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    1d16:	0142      	lsls	r2, r0, #5
    1d18:	4b56      	ldr	r3, [pc, #344]	; (1e74 <USB_Handler+0x334>)
    1d1a:	189b      	adds	r3, r3, r2
    1d1c:	685a      	ldr	r2, [r3, #4]
    1d1e:	0492      	lsls	r2, r2, #18
    1d20:	0c92      	lsrs	r2, r2, #18
    1d22:	4953      	ldr	r1, [pc, #332]	; (1e70 <USB_Handler+0x330>)
    1d24:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    1d26:	685a      	ldr	r2, [r3, #4]
    1d28:	0112      	lsls	r2, r2, #4
    1d2a:	0c92      	lsrs	r2, r2, #18
    1d2c:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    1d2e:	685a      	ldr	r2, [r3, #4]
    1d30:	0b92      	lsrs	r2, r2, #14
    1d32:	0392      	lsls	r2, r2, #14
    1d34:	605a      	str	r2, [r3, #4]
    1d36:	e774      	b.n	1c22 <USB_Handler+0xe2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    1d38:	0023      	movs	r3, r4
    1d3a:	3308      	adds	r3, #8
    1d3c:	015b      	lsls	r3, r3, #5
    1d3e:	5c9b      	ldrb	r3, [r3, r2]
    1d40:	079b      	lsls	r3, r3, #30
    1d42:	0f9b      	lsrs	r3, r3, #30
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    1d44:	2b01      	cmp	r3, #1
    1d46:	d181      	bne.n	1c4c <USB_Handler+0x10c>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    1d48:	0161      	lsls	r1, r4, #5
    1d4a:	4b4a      	ldr	r3, [pc, #296]	; (1e74 <USB_Handler+0x334>)
    1d4c:	185b      	adds	r3, r3, r1
    1d4e:	3308      	adds	r3, #8
    1d50:	789b      	ldrb	r3, [r3, #2]
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    1d52:	07db      	lsls	r3, r3, #31
    1d54:	d400      	bmi.n	1d58 <USB_Handler+0x218>
    1d56:	e779      	b.n	1c4c <USB_Handler+0x10c>
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    1d58:	4a44      	ldr	r2, [pc, #272]	; (1e6c <USB_Handler+0x32c>)
    1d5a:	2301      	movs	r3, #1
    1d5c:	40a3      	lsls	r3, r4
    1d5e:	6811      	ldr	r1, [r2, #0]
    1d60:	4399      	bics	r1, r3
    1d62:	6011      	str	r1, [r2, #0]
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    1d64:	0162      	lsls	r2, r4, #5
    1d66:	4b43      	ldr	r3, [pc, #268]	; (1e74 <USB_Handler+0x334>)
    1d68:	189b      	adds	r3, r3, r2
    1d6a:	2200      	movs	r2, #0
    1d6c:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1d6e:	0023      	movs	r3, r4
    1d70:	3308      	adds	r3, #8
    1d72:	015b      	lsls	r3, r3, #5
    1d74:	6802      	ldr	r2, [r0, #0]
    1d76:	4694      	mov	ip, r2
    1d78:	4463      	add	r3, ip
    1d7a:	2204      	movs	r2, #4
    1d7c:	71da      	strb	r2, [r3, #7]
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    1d7e:	1903      	adds	r3, r0, r4
    1d80:	33ae      	adds	r3, #174	; 0xae
    1d82:	781b      	ldrb	r3, [r3, #0]
    1d84:	079b      	lsls	r3, r3, #30
    1d86:	d400      	bmi.n	1d8a <USB_Handler+0x24a>
    1d88:	e775      	b.n	1c76 <USB_Handler+0x136>
					pipe_callback_para.pipe_num = pipe_int;
    1d8a:	4939      	ldr	r1, [pc, #228]	; (1e70 <USB_Handler+0x330>)
    1d8c:	700c      	strb	r4, [r1, #0]
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    1d8e:	2310      	movs	r3, #16
    1d90:	704b      	strb	r3, [r1, #1]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    1d92:	0123      	lsls	r3, r4, #4
    1d94:	18c3      	adds	r3, r0, r3
    1d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1d98:	4798      	blx	r3
    1d9a:	e76c      	b.n	1c76 <USB_Handler+0x136>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
    1d9c:	0023      	movs	r3, r4
    1d9e:	3308      	adds	r3, #8
    1da0:	015b      	lsls	r3, r3, #5
    1da2:	5c9b      	ldrb	r3, [r3, r2]
    1da4:	079b      	lsls	r3, r3, #30
    1da6:	0f9b      	lsrs	r3, r3, #30
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    1da8:	2b01      	cmp	r3, #1
    1daa:	d000      	beq.n	1dae <USB_Handler+0x26e>
    1dac:	e757      	b.n	1c5e <USB_Handler+0x11e>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    1dae:	0162      	lsls	r2, r4, #5
    1db0:	4b30      	ldr	r3, [pc, #192]	; (1e74 <USB_Handler+0x334>)
    1db2:	189b      	adds	r3, r3, r2
    1db4:	2200      	movs	r2, #0
    1db6:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    1db8:	0023      	movs	r3, r4
    1dba:	3308      	adds	r3, #8
    1dbc:	015b      	lsls	r3, r3, #5
    1dbe:	6802      	ldr	r2, [r0, #0]
    1dc0:	18d2      	adds	r2, r2, r3
    1dc2:	2104      	movs	r1, #4
    1dc4:	71d1      	strb	r1, [r2, #7]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
    1dc6:	6802      	ldr	r2, [r0, #0]
    1dc8:	18d3      	adds	r3, r2, r3
    1dca:	2210      	movs	r2, #16
    1dcc:	715a      	strb	r2, [r3, #5]
    1dce:	e752      	b.n	1c76 <USB_Handler+0x136>
				pipe_callback_para.pipe_num = pipe_int;
    1dd0:	4927      	ldr	r1, [pc, #156]	; (1e70 <USB_Handler+0x330>)
    1dd2:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    1dd4:	0162      	lsls	r2, r4, #5
    1dd6:	4b27      	ldr	r3, [pc, #156]	; (1e74 <USB_Handler+0x334>)
    1dd8:	189b      	adds	r3, r3, r2
    1dda:	89db      	ldrh	r3, [r3, #14]
    1ddc:	221f      	movs	r2, #31
    1dde:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    1de0:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    1de2:	0123      	lsls	r3, r4, #4
    1de4:	18c3      	adds	r3, r0, r3
    1de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1de8:	4798      	blx	r3
    1dea:	e75c      	b.n	1ca6 <USB_Handler+0x166>
				pipe_callback_para.pipe_num = pipe_int;
    1dec:	4920      	ldr	r1, [pc, #128]	; (1e70 <USB_Handler+0x330>)
    1dee:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    1df0:	0162      	lsls	r2, r4, #5
    1df2:	4b20      	ldr	r3, [pc, #128]	; (1e74 <USB_Handler+0x334>)
    1df4:	189b      	adds	r3, r3, r2
    1df6:	685b      	ldr	r3, [r3, #4]
    1df8:	011b      	lsls	r3, r3, #4
    1dfa:	0c9b      	lsrs	r3, r3, #18
    1dfc:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    1dfe:	0123      	lsls	r3, r4, #4
    1e00:	18c3      	adds	r3, r0, r3
    1e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1e04:	2100      	movs	r1, #0
    1e06:	4798      	blx	r3
    1e08:	e765      	b.n	1cd6 <USB_Handler+0x196>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    1e0a:	8bac      	ldrh	r4, [r5, #28]
    1e0c:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    1e0e:	0763      	lsls	r3, r4, #29
    1e10:	d538      	bpl.n	1e84 <USB_Handler+0x344>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    1e12:	2304      	movs	r3, #4
    1e14:	83ab      	strh	r3, [r5, #28]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    1e16:	4b15      	ldr	r3, [pc, #84]	; (1e6c <USB_Handler+0x32c>)
    1e18:	681d      	ldr	r5, [r3, #0]
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    1e1a:	2301      	movs	r3, #1
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    1e1c:	2001      	movs	r0, #1
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    1e1e:	2610      	movs	r6, #16
    1e20:	e002      	b.n	1e28 <USB_Handler+0x2e8>
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    1e22:	3301      	adds	r3, #1
    1e24:	2b08      	cmp	r3, #8
    1e26:	d029      	beq.n	1e7c <USB_Handler+0x33c>
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    1e28:	0002      	movs	r2, r0
    1e2a:	409a      	lsls	r2, r3
    1e2c:	4215      	tst	r5, r2
    1e2e:	d0f8      	beq.n	1e22 <USB_Handler+0x2e2>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    1e30:	6839      	ldr	r1, [r7, #0]
    1e32:	001a      	movs	r2, r3
    1e34:	3208      	adds	r2, #8
    1e36:	0152      	lsls	r2, r2, #5
    1e38:	5c52      	ldrb	r2, [r2, r1]
    1e3a:	0692      	lsls	r2, r2, #26
    1e3c:	0f52      	lsrs	r2, r2, #29
    1e3e:	2a03      	cmp	r2, #3
    1e40:	d1ef      	bne.n	1e22 <USB_Handler+0x2e2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    1e42:	001a      	movs	r2, r3
    1e44:	3208      	adds	r2, #8
    1e46:	0152      	lsls	r2, r2, #5
    1e48:	5c52      	ldrb	r2, [r2, r1]
    1e4a:	0792      	lsls	r2, r2, #30
    1e4c:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    1e4e:	2a01      	cmp	r2, #1
    1e50:	d1e7      	bne.n	1e22 <USB_Handler+0x2e2>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    1e52:	001a      	movs	r2, r3
    1e54:	3208      	adds	r2, #8
    1e56:	0152      	lsls	r2, r2, #5
    1e58:	1889      	adds	r1, r1, r2
    1e5a:	710e      	strb	r6, [r1, #4]
    1e5c:	e7e1      	b.n	1e22 <USB_Handler+0x2e2>
    1e5e:	46c0      	nop			; (mov r8, r8)
    1e60:	20000238 	.word	0x20000238
    1e64:	000052f0 	.word	0x000052f0
    1e68:	0000418d 	.word	0x0000418d
    1e6c:	20000248 	.word	0x20000248
    1e70:	2000024c 	.word	0x2000024c
    1e74:	200006c0 	.word	0x200006c0
    1e78:	f0003fff 	.word	0xf0003fff
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    1e7c:	339d      	adds	r3, #157	; 0x9d
    1e7e:	5cfb      	ldrb	r3, [r7, r3]
    1e80:	07db      	lsls	r3, r3, #31
    1e82:	d462      	bmi.n	1f4a <USB_Handler+0x40a>
		if (flags & USB_HOST_INTFLAG_RST) {
    1e84:	0723      	lsls	r3, r4, #28
    1e86:	d50b      	bpl.n	1ea0 <USB_Handler+0x360>
			host_pipe_job_busy_status = 0;
    1e88:	2200      	movs	r2, #0
    1e8a:	4baf      	ldr	r3, [pc, #700]	; (2148 <STACK_SIZE+0x148>)
    1e8c:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    1e8e:	4baf      	ldr	r3, [pc, #700]	; (214c <STACK_SIZE+0x14c>)
    1e90:	6818      	ldr	r0, [r3, #0]
    1e92:	2308      	movs	r3, #8
    1e94:	6802      	ldr	r2, [r0, #0]
    1e96:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    1e98:	339d      	adds	r3, #157	; 0x9d
    1e9a:	5cc3      	ldrb	r3, [r0, r3]
    1e9c:	079b      	lsls	r3, r3, #30
    1e9e:	d458      	bmi.n	1f52 <USB_Handler+0x412>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    1ea0:	0663      	lsls	r3, r4, #25
    1ea2:	d508      	bpl.n	1eb6 <USB_Handler+0x376>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    1ea4:	4ba9      	ldr	r3, [pc, #676]	; (214c <STACK_SIZE+0x14c>)
    1ea6:	6818      	ldr	r0, [r3, #0]
    1ea8:	2340      	movs	r3, #64	; 0x40
    1eaa:	6802      	ldr	r2, [r0, #0]
    1eac:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    1eae:	3365      	adds	r3, #101	; 0x65
    1eb0:	5cc3      	ldrb	r3, [r0, r3]
    1eb2:	06db      	lsls	r3, r3, #27
    1eb4:	d450      	bmi.n	1f58 <USB_Handler+0x418>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    1eb6:	06a3      	lsls	r3, r4, #26
    1eb8:	d508      	bpl.n	1ecc <USB_Handler+0x38c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    1eba:	4ba4      	ldr	r3, [pc, #656]	; (214c <STACK_SIZE+0x14c>)
    1ebc:	6818      	ldr	r0, [r3, #0]
    1ebe:	2320      	movs	r3, #32
    1ec0:	6802      	ldr	r2, [r0, #0]
    1ec2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    1ec4:	3385      	adds	r3, #133	; 0x85
    1ec6:	5cc3      	ldrb	r3, [r0, r3]
    1ec8:	071b      	lsls	r3, r3, #28
    1eca:	d448      	bmi.n	1f5e <USB_Handler+0x41e>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    1ecc:	06e3      	lsls	r3, r4, #27
    1ece:	d508      	bpl.n	1ee2 <USB_Handler+0x3a2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    1ed0:	4b9e      	ldr	r3, [pc, #632]	; (214c <STACK_SIZE+0x14c>)
    1ed2:	6818      	ldr	r0, [r3, #0]
    1ed4:	2310      	movs	r3, #16
    1ed6:	6802      	ldr	r2, [r0, #0]
    1ed8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    1eda:	3395      	adds	r3, #149	; 0x95
    1edc:	5cc3      	ldrb	r3, [r0, r3]
    1ede:	075b      	lsls	r3, r3, #29
    1ee0:	d440      	bmi.n	1f64 <USB_Handler+0x424>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    1ee2:	0623      	lsls	r3, r4, #24
    1ee4:	d50b      	bpl.n	1efe <USB_Handler+0x3be>
			host_pipe_job_busy_status = 0;
    1ee6:	2200      	movs	r2, #0
    1ee8:	4b97      	ldr	r3, [pc, #604]	; (2148 <STACK_SIZE+0x148>)
    1eea:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    1eec:	4b97      	ldr	r3, [pc, #604]	; (214c <STACK_SIZE+0x14c>)
    1eee:	6818      	ldr	r0, [r3, #0]
    1ef0:	2380      	movs	r3, #128	; 0x80
    1ef2:	6802      	ldr	r2, [r0, #0]
    1ef4:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    1ef6:	3325      	adds	r3, #37	; 0x25
    1ef8:	5cc3      	ldrb	r3, [r0, r3]
    1efa:	069b      	lsls	r3, r3, #26
    1efc:	d435      	bmi.n	1f6a <USB_Handler+0x42a>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    1efe:	05e3      	lsls	r3, r4, #23
    1f00:	d50c      	bpl.n	1f1c <USB_Handler+0x3dc>
			host_pipe_job_busy_status = 0;
    1f02:	2200      	movs	r2, #0
    1f04:	4b90      	ldr	r3, [pc, #576]	; (2148 <STACK_SIZE+0x148>)
    1f06:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    1f08:	4b90      	ldr	r3, [pc, #576]	; (214c <STACK_SIZE+0x14c>)
    1f0a:	6818      	ldr	r0, [r3, #0]
    1f0c:	2380      	movs	r3, #128	; 0x80
    1f0e:	005b      	lsls	r3, r3, #1
    1f10:	6802      	ldr	r2, [r0, #0]
    1f12:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    1f14:	3b5b      	subs	r3, #91	; 0x5b
    1f16:	5cc3      	ldrb	r3, [r0, r3]
    1f18:	065b      	lsls	r3, r3, #25
    1f1a:	d429      	bmi.n	1f70 <USB_Handler+0x430>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    1f1c:	05a3      	lsls	r3, r4, #22
    1f1e:	d50d      	bpl.n	1f3c <USB_Handler+0x3fc>
			host_pipe_job_busy_status = 0;
    1f20:	2200      	movs	r2, #0
    1f22:	4b89      	ldr	r3, [pc, #548]	; (2148 <STACK_SIZE+0x148>)
    1f24:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    1f26:	4b89      	ldr	r3, [pc, #548]	; (214c <STACK_SIZE+0x14c>)
    1f28:	6818      	ldr	r0, [r3, #0]
    1f2a:	2380      	movs	r3, #128	; 0x80
    1f2c:	009b      	lsls	r3, r3, #2
    1f2e:	6802      	ldr	r2, [r0, #0]
    1f30:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    1f32:	3b5c      	subs	r3, #92	; 0x5c
    1f34:	3bff      	subs	r3, #255	; 0xff
    1f36:	5cc3      	ldrb	r3, [r0, r3]
    1f38:	2b7f      	cmp	r3, #127	; 0x7f
    1f3a:	d81c      	bhi.n	1f76 <USB_Handler+0x436>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    1f3c:	b003      	add	sp, #12
    1f3e:	bc3c      	pop	{r2, r3, r4, r5}
    1f40:	4690      	mov	r8, r2
    1f42:	4699      	mov	r9, r3
    1f44:	46a2      	mov	sl, r4
    1f46:	46ab      	mov	fp, r5
    1f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    1f4a:	687b      	ldr	r3, [r7, #4]
    1f4c:	0038      	movs	r0, r7
    1f4e:	4798      	blx	r3
    1f50:	e798      	b.n	1e84 <USB_Handler+0x344>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    1f52:	6883      	ldr	r3, [r0, #8]
    1f54:	4798      	blx	r3
    1f56:	e7a3      	b.n	1ea0 <USB_Handler+0x360>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    1f58:	6943      	ldr	r3, [r0, #20]
    1f5a:	4798      	blx	r3
    1f5c:	e7ab      	b.n	1eb6 <USB_Handler+0x376>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    1f5e:	6903      	ldr	r3, [r0, #16]
    1f60:	4798      	blx	r3
    1f62:	e7b3      	b.n	1ecc <USB_Handler+0x38c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    1f64:	68c3      	ldr	r3, [r0, #12]
    1f66:	4798      	blx	r3
    1f68:	e7bb      	b.n	1ee2 <USB_Handler+0x3a2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    1f6a:	6983      	ldr	r3, [r0, #24]
    1f6c:	4798      	blx	r3
    1f6e:	e7c6      	b.n	1efe <USB_Handler+0x3be>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    1f70:	69c3      	ldr	r3, [r0, #28]
    1f72:	4798      	blx	r3
    1f74:	e7d2      	b.n	1f1c <USB_Handler+0x3dc>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    1f76:	6a03      	ldr	r3, [r0, #32]
    1f78:	4798      	blx	r3
    1f7a:	e7df      	b.n	1f3c <USB_Handler+0x3fc>
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    1f7c:	0023      	movs	r3, r4
    1f7e:	332e      	adds	r3, #46	; 0x2e
    1f80:	009b      	lsls	r3, r3, #2
    1f82:	4642      	mov	r2, r8
    1f84:	6812      	ldr	r2, [r2, #0]
    1f86:	589b      	ldr	r3, [r3, r2]
    1f88:	4971      	ldr	r1, [pc, #452]	; (2150 <STACK_SIZE+0x150>)
    1f8a:	4642      	mov	r2, r8
    1f8c:	6810      	ldr	r0, [r2, #0]
    1f8e:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    1f90:	3401      	adds	r4, #1
    1f92:	2c07      	cmp	r4, #7
    1f94:	d0d2      	beq.n	1f3c <USB_Handler+0x3fc>
			if (flags & _usb_device_irq_bits[i]) {
    1f96:	0063      	lsls	r3, r4, #1
    1f98:	5bdb      	ldrh	r3, [r3, r7]
    1f9a:	4233      	tst	r3, r6
    1f9c:	d003      	beq.n	1fa6 <USB_Handler+0x466>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    1f9e:	464a      	mov	r2, r9
    1fa0:	6812      	ldr	r2, [r2, #0]
    1fa2:	6812      	ldr	r2, [r2, #0]
    1fa4:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    1fa6:	422b      	tst	r3, r5
    1fa8:	d0f2      	beq.n	1f90 <USB_Handler+0x450>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    1faa:	2c06      	cmp	r4, #6
    1fac:	d1e6      	bne.n	1f7c <USB_Handler+0x43c>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    1fae:	4b69      	ldr	r3, [pc, #420]	; (2154 <STACK_SIZE+0x154>)
    1fb0:	891b      	ldrh	r3, [r3, #8]
    1fb2:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    1fb4:	2280      	movs	r2, #128	; 0x80
    1fb6:	0052      	lsls	r2, r2, #1
    1fb8:	4013      	ands	r3, r2
    1fba:	4a65      	ldr	r2, [pc, #404]	; (2150 <STACK_SIZE+0x150>)
    1fbc:	6013      	str	r3, [r2, #0]
    1fbe:	e7dd      	b.n	1f7c <USB_Handler+0x43c>
    1fc0:	003c      	movs	r4, r7
    1fc2:	3459      	adds	r4, #89	; 0x59
    1fc4:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    1fc6:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    1fc8:	2201      	movs	r2, #1
    1fca:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    1fcc:	325f      	adds	r2, #95	; 0x5f
    1fce:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1fd0:	3a50      	subs	r2, #80	; 0x50
    1fd2:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    1fd4:	3a0d      	subs	r2, #13
    1fd6:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    1fd8:	46b8      	mov	r8, r7
    1fda:	002f      	movs	r7, r5
    1fdc:	e0c3      	b.n	2166 <STACK_SIZE+0x166>
    1fde:	002a      	movs	r2, r5
    1fe0:	003d      	movs	r5, r7
    1fe2:	4647      	mov	r7, r8
    1fe4:	4690      	mov	r8, r2
    1fe6:	015b      	lsls	r3, r3, #5
    1fe8:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    1fea:	2308      	movs	r3, #8
    1fec:	33ff      	adds	r3, #255	; 0xff
    1fee:	5ceb      	ldrb	r3, [r5, r3]
    1ff0:	065b      	lsls	r3, r3, #25
    1ff2:	d515      	bpl.n	2020 <STACK_SIZE+0x20>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    1ff4:	2240      	movs	r2, #64	; 0x40
    1ff6:	2308      	movs	r3, #8
    1ff8:	33ff      	adds	r3, #255	; 0xff
    1ffa:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    1ffc:	3b88      	subs	r3, #136	; 0x88
    1ffe:	3bff      	subs	r3, #255	; 0xff
    2000:	4642      	mov	r2, r8
    2002:	4313      	orrs	r3, r2
    2004:	4a54      	ldr	r2, [pc, #336]	; (2158 <STACK_SIZE+0x158>)
    2006:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    2008:	2360      	movs	r3, #96	; 0x60
    200a:	420b      	tst	r3, r1
    200c:	d096      	beq.n	1f3c <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    200e:	9b01      	ldr	r3, [sp, #4]
    2010:	011b      	lsls	r3, r3, #4
    2012:	18fb      	adds	r3, r7, r3
    2014:	33e0      	adds	r3, #224	; 0xe0
    2016:	681b      	ldr	r3, [r3, #0]
    2018:	494f      	ldr	r1, [pc, #316]	; (2158 <STACK_SIZE+0x158>)
    201a:	0038      	movs	r0, r7
    201c:	4798      	blx	r3
    201e:	e78d      	b.n	1f3c <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    2020:	2308      	movs	r3, #8
    2022:	33ff      	adds	r3, #255	; 0xff
    2024:	5ceb      	ldrb	r3, [r5, r3]
    2026:	069b      	lsls	r3, r3, #26
    2028:	d5ee      	bpl.n	2008 <STACK_SIZE+0x8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    202a:	2220      	movs	r2, #32
    202c:	2308      	movs	r3, #8
    202e:	33ff      	adds	r3, #255	; 0xff
    2030:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    2032:	4b49      	ldr	r3, [pc, #292]	; (2158 <STACK_SIZE+0x158>)
    2034:	4642      	mov	r2, r8
    2036:	719a      	strb	r2, [r3, #6]
    2038:	e7e6      	b.n	2008 <STACK_SIZE+0x8>
    203a:	003d      	movs	r5, r7
    203c:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    203e:	9a01      	ldr	r2, [sp, #4]
    2040:	0013      	movs	r3, r2
    2042:	3308      	adds	r3, #8
    2044:	015b      	lsls	r3, r3, #5
    2046:	18ed      	adds	r5, r5, r3
    2048:	2310      	movs	r3, #16
    204a:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    204c:	18bb      	adds	r3, r7, r2
    204e:	3361      	adds	r3, #97	; 0x61
    2050:	33ff      	adds	r3, #255	; 0xff
    2052:	781b      	ldrb	r3, [r3, #0]
    2054:	06db      	lsls	r3, r3, #27
    2056:	d400      	bmi.n	205a <STACK_SIZE+0x5a>
    2058:	e770      	b.n	1f3c <USB_Handler+0x3fc>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    205a:	0010      	movs	r0, r2
    205c:	0152      	lsls	r2, r2, #5
    205e:	4b3d      	ldr	r3, [pc, #244]	; (2154 <STACK_SIZE+0x154>)
    2060:	189b      	adds	r3, r3, r2
    2062:	685b      	ldr	r3, [r3, #4]
    2064:	049b      	lsls	r3, r3, #18
    2066:	0c9b      	lsrs	r3, r3, #18
    2068:	493b      	ldr	r1, [pc, #236]	; (2158 <STACK_SIZE+0x158>)
    206a:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    206c:	0103      	lsls	r3, r0, #4
    206e:	18fb      	adds	r3, r7, r3
    2070:	33dc      	adds	r3, #220	; 0xdc
    2072:	681b      	ldr	r3, [r3, #0]
    2074:	4640      	mov	r0, r8
    2076:	4798      	blx	r3
    2078:	e760      	b.n	1f3c <USB_Handler+0x3fc>
    207a:	002a      	movs	r2, r5
    207c:	003d      	movs	r5, r7
    207e:	4647      	mov	r7, r8
    2080:	4690      	mov	r8, r2
    2082:	015b      	lsls	r3, r3, #5
    2084:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2086:	2308      	movs	r3, #8
    2088:	33ff      	adds	r3, #255	; 0xff
    208a:	5ceb      	ldrb	r3, [r5, r3]
    208c:	079b      	lsls	r3, r3, #30
    208e:	d51e      	bpl.n	20ce <STACK_SIZE+0xce>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    2090:	2202      	movs	r2, #2
    2092:	2308      	movs	r3, #8
    2094:	33ff      	adds	r3, #255	; 0xff
    2096:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    2098:	482f      	ldr	r0, [pc, #188]	; (2158 <STACK_SIZE+0x158>)
    209a:	3b88      	subs	r3, #136	; 0x88
    209c:	3bff      	subs	r3, #255	; 0xff
    209e:	4642      	mov	r2, r8
    20a0:	4313      	orrs	r3, r2
    20a2:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    20a4:	9b01      	ldr	r3, [sp, #4]
    20a6:	015a      	lsls	r2, r3, #5
    20a8:	4b2a      	ldr	r3, [pc, #168]	; (2154 <STACK_SIZE+0x154>)
    20aa:	189b      	adds	r3, r3, r2
    20ac:	3310      	adds	r3, #16
    20ae:	685b      	ldr	r3, [r3, #4]
    20b0:	049b      	lsls	r3, r3, #18
    20b2:	0c9b      	lsrs	r3, r3, #18
    20b4:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    20b6:	078b      	lsls	r3, r1, #30
    20b8:	d100      	bne.n	20bc <STACK_SIZE+0xbc>
    20ba:	e73f      	b.n	1f3c <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    20bc:	9b01      	ldr	r3, [sp, #4]
    20be:	330d      	adds	r3, #13
    20c0:	011b      	lsls	r3, r3, #4
    20c2:	18fb      	adds	r3, r7, r3
    20c4:	685b      	ldr	r3, [r3, #4]
    20c6:	4924      	ldr	r1, [pc, #144]	; (2158 <STACK_SIZE+0x158>)
    20c8:	0038      	movs	r0, r7
    20ca:	4798      	blx	r3
    20cc:	e736      	b.n	1f3c <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    20ce:	2308      	movs	r3, #8
    20d0:	33ff      	adds	r3, #255	; 0xff
    20d2:	5ceb      	ldrb	r3, [r5, r3]
    20d4:	07db      	lsls	r3, r3, #31
    20d6:	d5ee      	bpl.n	20b6 <STACK_SIZE+0xb6>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    20d8:	2201      	movs	r2, #1
    20da:	2308      	movs	r3, #8
    20dc:	33ff      	adds	r3, #255	; 0xff
    20de:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    20e0:	481d      	ldr	r0, [pc, #116]	; (2158 <STACK_SIZE+0x158>)
    20e2:	4643      	mov	r3, r8
    20e4:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    20e6:	9b01      	ldr	r3, [sp, #4]
    20e8:	015b      	lsls	r3, r3, #5
    20ea:	4a1a      	ldr	r2, [pc, #104]	; (2154 <STACK_SIZE+0x154>)
    20ec:	18d2      	adds	r2, r2, r3
    20ee:	6853      	ldr	r3, [r2, #4]
    20f0:	049b      	lsls	r3, r3, #18
    20f2:	0c9b      	lsrs	r3, r3, #18
    20f4:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    20f6:	6853      	ldr	r3, [r2, #4]
    20f8:	011b      	lsls	r3, r3, #4
    20fa:	0c9b      	lsrs	r3, r3, #18
    20fc:	8083      	strh	r3, [r0, #4]
    20fe:	e7da      	b.n	20b6 <STACK_SIZE+0xb6>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2100:	2208      	movs	r2, #8
    2102:	32ff      	adds	r2, #255	; 0xff
    2104:	5c9a      	ldrb	r2, [r3, r2]
    2106:	0752      	lsls	r2, r2, #29
    2108:	d579      	bpl.n	21fe <STACK_SIZE+0x1fe>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    210a:	2004      	movs	r0, #4
    210c:	2208      	movs	r2, #8
    210e:	32ff      	adds	r2, #255	; 0xff
    2110:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    2112:	9801      	ldr	r0, [sp, #4]
    2114:	0142      	lsls	r2, r0, #5
    2116:	4b0f      	ldr	r3, [pc, #60]	; (2154 <STACK_SIZE+0x154>)
    2118:	189b      	adds	r3, r3, r2
    211a:	7a9b      	ldrb	r3, [r3, #10]
    211c:	079b      	lsls	r3, r3, #30
    211e:	d505      	bpl.n	212c <STACK_SIZE+0x12c>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    2120:	4b0c      	ldr	r3, [pc, #48]	; (2154 <STACK_SIZE+0x154>)
    2122:	189b      	adds	r3, r3, r2
    2124:	7a9a      	ldrb	r2, [r3, #10]
    2126:	2002      	movs	r0, #2
    2128:	4382      	bics	r2, r0
    212a:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    212c:	4b0a      	ldr	r3, [pc, #40]	; (2158 <STACK_SIZE+0x158>)
    212e:	4642      	mov	r2, r8
    2130:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2132:	9b01      	ldr	r3, [sp, #4]
    2134:	3308      	adds	r3, #8
    2136:	015b      	lsls	r3, r3, #5
    2138:	683a      	ldr	r2, [r7, #0]
    213a:	4694      	mov	ip, r2
    213c:	4463      	add	r3, ip
    213e:	79db      	ldrb	r3, [r3, #7]
    2140:	07db      	lsls	r3, r3, #31
    2142:	d55c      	bpl.n	21fe <STACK_SIZE+0x1fe>
    2144:	e6fa      	b.n	1f3c <USB_Handler+0x3fc>
    2146:	46c0      	nop			; (mov r8, r8)
    2148:	20000248 	.word	0x20000248
    214c:	20000238 	.word	0x20000238
    2150:	2000023c 	.word	0x2000023c
    2154:	200006c0 	.word	0x200006c0
    2158:	20000240 	.word	0x20000240
    215c:	3301      	adds	r3, #1
    215e:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    2160:	2b08      	cmp	r3, #8
    2162:	d100      	bne.n	2166 <STACK_SIZE+0x166>
    2164:	e6ea      	b.n	1f3c <USB_Handler+0x3fc>
    2166:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    2168:	9301      	str	r3, [sp, #4]
    216a:	0032      	movs	r2, r6
    216c:	411a      	asrs	r2, r3
    216e:	4661      	mov	r1, ip
    2170:	4211      	tst	r1, r2
    2172:	d0f3      	beq.n	215c <STACK_SIZE+0x15c>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    2174:	001a      	movs	r2, r3
    2176:	3208      	adds	r2, #8
    2178:	0152      	lsls	r2, r2, #5
    217a:	18ba      	adds	r2, r7, r2
    217c:	79d2      	ldrb	r2, [r2, #7]
    217e:	b2d2      	uxtb	r2, r2
    2180:	7a21      	ldrb	r1, [r4, #8]
    2182:	4011      	ands	r1, r2
    2184:	7820      	ldrb	r0, [r4, #0]
    2186:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    2188:	4648      	mov	r0, r9
    218a:	4210      	tst	r0, r2
    218c:	d000      	beq.n	2190 <STACK_SIZE+0x190>
    218e:	e726      	b.n	1fde <USB_Handler+0x49e>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2190:	4650      	mov	r0, sl
    2192:	4210      	tst	r0, r2
    2194:	d000      	beq.n	2198 <STACK_SIZE+0x198>
    2196:	e750      	b.n	203a <STACK_SIZE+0x3a>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    2198:	4658      	mov	r0, fp
    219a:	4210      	tst	r0, r2
    219c:	d000      	beq.n	21a0 <STACK_SIZE+0x1a0>
    219e:	e76c      	b.n	207a <STACK_SIZE+0x7a>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    21a0:	200c      	movs	r0, #12
    21a2:	4210      	tst	r0, r2
    21a4:	d0da      	beq.n	215c <STACK_SIZE+0x15c>
    21a6:	002a      	movs	r2, r5
    21a8:	003d      	movs	r5, r7
    21aa:	4647      	mov	r7, r8
    21ac:	4690      	mov	r8, r2
    21ae:	015b      	lsls	r3, r3, #5
    21b0:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    21b2:	2208      	movs	r2, #8
    21b4:	32ff      	adds	r2, #255	; 0xff
    21b6:	5c9a      	ldrb	r2, [r3, r2]
    21b8:	0712      	lsls	r2, r2, #28
    21ba:	d5a1      	bpl.n	2100 <STACK_SIZE+0x100>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    21bc:	3804      	subs	r0, #4
    21be:	2208      	movs	r2, #8
    21c0:	32ff      	adds	r2, #255	; 0xff
    21c2:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    21c4:	9801      	ldr	r0, [sp, #4]
    21c6:	0142      	lsls	r2, r0, #5
    21c8:	4b13      	ldr	r3, [pc, #76]	; (2218 <STACK_SIZE+0x218>)
    21ca:	189b      	adds	r3, r3, r2
    21cc:	7e9b      	ldrb	r3, [r3, #26]
    21ce:	079b      	lsls	r3, r3, #30
    21d0:	d505      	bpl.n	21de <STACK_SIZE+0x1de>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    21d2:	4b11      	ldr	r3, [pc, #68]	; (2218 <STACK_SIZE+0x218>)
    21d4:	189b      	adds	r3, r3, r2
    21d6:	7e9a      	ldrb	r2, [r3, #26]
    21d8:	2002      	movs	r0, #2
    21da:	4382      	bics	r2, r0
    21dc:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    21de:	2380      	movs	r3, #128	; 0x80
    21e0:	425b      	negs	r3, r3
    21e2:	4642      	mov	r2, r8
    21e4:	4313      	orrs	r3, r2
    21e6:	4a0d      	ldr	r2, [pc, #52]	; (221c <STACK_SIZE+0x21c>)
    21e8:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    21ea:	9b01      	ldr	r3, [sp, #4]
    21ec:	3308      	adds	r3, #8
    21ee:	015b      	lsls	r3, r3, #5
    21f0:	683a      	ldr	r2, [r7, #0]
    21f2:	4694      	mov	ip, r2
    21f4:	4463      	add	r3, ip
    21f6:	79db      	ldrb	r3, [r3, #7]
    21f8:	079b      	lsls	r3, r3, #30
    21fa:	d500      	bpl.n	21fe <STACK_SIZE+0x1fe>
    21fc:	e69e      	b.n	1f3c <USB_Handler+0x3fc>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    21fe:	230c      	movs	r3, #12
    2200:	420b      	tst	r3, r1
    2202:	d100      	bne.n	2206 <STACK_SIZE+0x206>
    2204:	e69a      	b.n	1f3c <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    2206:	9b01      	ldr	r3, [sp, #4]
    2208:	011b      	lsls	r3, r3, #4
    220a:	18fb      	adds	r3, r7, r3
    220c:	33d8      	adds	r3, #216	; 0xd8
    220e:	681b      	ldr	r3, [r3, #0]
    2210:	4902      	ldr	r1, [pc, #8]	; (221c <STACK_SIZE+0x21c>)
    2212:	0038      	movs	r0, r7
    2214:	4798      	blx	r3
    2216:	e691      	b.n	1f3c <USB_Handler+0x3fc>
    2218:	200006c0 	.word	0x200006c0
    221c:	20000240 	.word	0x20000240

00002220 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    2220:	2200      	movs	r2, #0
    2222:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    2224:	2301      	movs	r3, #1
    2226:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    2228:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    222a:	70c3      	strb	r3, [r0, #3]
}
    222c:	4770      	bx	lr
	...

00002230 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    2230:	b5f0      	push	{r4, r5, r6, r7, lr}
    2232:	46ce      	mov	lr, r9
    2234:	4647      	mov	r7, r8
    2236:	b580      	push	{r7, lr}
    2238:	b083      	sub	sp, #12
    223a:	0004      	movs	r4, r0
    223c:	000d      	movs	r5, r1
    223e:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    2240:	2300      	movs	r3, #0
    2242:	4a6e      	ldr	r2, [pc, #440]	; (23fc <usb_init+0x1cc>)
    2244:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    2246:	4a6e      	ldr	r2, [pc, #440]	; (2400 <usb_init+0x1d0>)
    2248:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    224a:	6021      	str	r1, [r4, #0]
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    224c:	496d      	ldr	r1, [pc, #436]	; (2404 <usb_init+0x1d4>)
    224e:	69ca      	ldr	r2, [r1, #28]
    2250:	2020      	movs	r0, #32
    2252:	4302      	orrs	r2, r0
    2254:	61ca      	str	r2, [r1, #28]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2256:	af01      	add	r7, sp, #4
    2258:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    225a:	2201      	movs	r2, #1
    225c:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    225e:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    2260:	3306      	adds	r3, #6
    2262:	4699      	mov	r9, r3
    2264:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    2266:	0039      	movs	r1, r7
    2268:	3808      	subs	r0, #8
    226a:	4b67      	ldr	r3, [pc, #412]	; (2408 <usb_init+0x1d8>)
    226c:	4698      	mov	r8, r3
    226e:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    2270:	464b      	mov	r3, r9
    2272:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    2274:	0039      	movs	r1, r7
    2276:	2019      	movs	r0, #25
    2278:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    227a:	78b3      	ldrb	r3, [r6, #2]
    227c:	466a      	mov	r2, sp
    227e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    2280:	4669      	mov	r1, sp
    2282:	2006      	movs	r0, #6
    2284:	4b61      	ldr	r3, [pc, #388]	; (240c <usb_init+0x1dc>)
    2286:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    2288:	2006      	movs	r0, #6
    228a:	4b61      	ldr	r3, [pc, #388]	; (2410 <usb_init+0x1e0>)
    228c:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    228e:	782b      	ldrb	r3, [r5, #0]
    2290:	2201      	movs	r2, #1
    2292:	4313      	orrs	r3, r2
    2294:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    2296:	78ab      	ldrb	r3, [r5, #2]
    2298:	07db      	lsls	r3, r3, #31
    229a:	d4fc      	bmi.n	2296 <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    229c:	4a5d      	ldr	r2, [pc, #372]	; (2414 <usb_init+0x1e4>)
    229e:	78d3      	ldrb	r3, [r2, #3]
    22a0:	2103      	movs	r1, #3
    22a2:	438b      	bics	r3, r1
    22a4:	2102      	movs	r1, #2
    22a6:	430b      	orrs	r3, r1
    22a8:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    22aa:	78d3      	ldrb	r3, [r2, #3]
    22ac:	210c      	movs	r1, #12
    22ae:	438b      	bics	r3, r1
    22b0:	2108      	movs	r1, #8
    22b2:	430b      	orrs	r3, r1
    22b4:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    22b6:	4b58      	ldr	r3, [pc, #352]	; (2418 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    22b8:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    22ba:	039b      	lsls	r3, r3, #14
    22bc:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    22be:	2b1f      	cmp	r3, #31
    22c0:	d100      	bne.n	22c4 <usb_init+0x94>
    22c2:	e08f      	b.n	23e4 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    22c4:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    22c6:	019b      	lsls	r3, r3, #6
    22c8:	4954      	ldr	r1, [pc, #336]	; (241c <usb_init+0x1ec>)
    22ca:	400a      	ands	r2, r1
    22cc:	4313      	orrs	r3, r2
    22ce:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    22d0:	4b51      	ldr	r3, [pc, #324]	; (2418 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    22d2:	681b      	ldr	r3, [r3, #0]
    22d4:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    22d6:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    22d8:	2b1f      	cmp	r3, #31
    22da:	d100      	bne.n	22de <usb_init+0xae>
    22dc:	e084      	b.n	23e8 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    22de:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    22e0:	211f      	movs	r1, #31
    22e2:	438a      	bics	r2, r1
    22e4:	4313      	orrs	r3, r2
    22e6:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    22e8:	4b4b      	ldr	r3, [pc, #300]	; (2418 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    22ea:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    22ec:	019b      	lsls	r3, r3, #6
    22ee:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    22f0:	2b07      	cmp	r3, #7
    22f2:	d100      	bne.n	22f6 <usb_init+0xc6>
    22f4:	e07a      	b.n	23ec <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    22f6:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    22f8:	031b      	lsls	r3, r3, #12
    22fa:	4949      	ldr	r1, [pc, #292]	; (2420 <usb_init+0x1f0>)
    22fc:	400a      	ands	r2, r1
    22fe:	4313      	orrs	r3, r2
    2300:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    2302:	7832      	ldrb	r2, [r6, #0]
    2304:	7829      	ldrb	r1, [r5, #0]
    2306:	01d2      	lsls	r2, r2, #7
    2308:	237f      	movs	r3, #127	; 0x7f
    230a:	400b      	ands	r3, r1
    230c:	4313      	orrs	r3, r2
    230e:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    2310:	7871      	ldrb	r1, [r6, #1]
    2312:	782b      	ldrb	r3, [r5, #0]
    2314:	2201      	movs	r2, #1
    2316:	400a      	ands	r2, r1
    2318:	0092      	lsls	r2, r2, #2
    231a:	2104      	movs	r1, #4
    231c:	438b      	bics	r3, r1
    231e:	4313      	orrs	r3, r2
    2320:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    2322:	4b40      	ldr	r3, [pc, #256]	; (2424 <usb_init+0x1f4>)
    2324:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    2326:	78f3      	ldrb	r3, [r6, #3]
    2328:	2b01      	cmp	r3, #1
    232a:	d061      	beq.n	23f0 <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    232c:	2b00      	cmp	r3, #0
    232e:	d106      	bne.n	233e <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    2330:	6822      	ldr	r2, [r4, #0]
    2332:	8913      	ldrh	r3, [r2, #8]
    2334:	210c      	movs	r1, #12
    2336:	438b      	bics	r3, r1
    2338:	2104      	movs	r1, #4
    233a:	430b      	orrs	r3, r1
    233c:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    233e:	2280      	movs	r2, #128	; 0x80
    2340:	0052      	lsls	r2, r2, #1
    2342:	2100      	movs	r1, #0
    2344:	4837      	ldr	r0, [pc, #220]	; (2424 <usb_init+0x1f4>)
    2346:	4b38      	ldr	r3, [pc, #224]	; (2428 <usb_init+0x1f8>)
    2348:	4798      	blx	r3
    234a:	1d23      	adds	r3, r4, #4
    234c:	0021      	movs	r1, r4
    234e:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    2350:	2200      	movs	r2, #0
    2352:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    2354:	428b      	cmp	r3, r1
    2356:	d1fc      	bne.n	2352 <usb_init+0x122>
    2358:	0021      	movs	r1, r4
    235a:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    235c:	2200      	movs	r2, #0
    235e:	601a      	str	r2, [r3, #0]
    2360:	605a      	str	r2, [r3, #4]
    2362:	609a      	str	r2, [r3, #8]
    2364:	60da      	str	r2, [r3, #12]
    2366:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    2368:	428b      	cmp	r3, r1
    236a:	d1f8      	bne.n	235e <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    236c:	2300      	movs	r3, #0
    236e:	22a4      	movs	r2, #164	; 0xa4
    2370:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    2372:	3201      	adds	r2, #1
    2374:	54a3      	strb	r3, [r4, r2]
    2376:	0023      	movs	r3, r4
    2378:	33a6      	adds	r3, #166	; 0xa6
    237a:	0021      	movs	r1, r4
    237c:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    237e:	2200      	movs	r2, #0
    2380:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    2382:	721a      	strb	r2, [r3, #8]
    2384:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    2386:	4299      	cmp	r1, r3
    2388:	d1fa      	bne.n	2380 <usb_init+0x150>
    238a:	0023      	movs	r3, r4
    238c:	33b8      	adds	r3, #184	; 0xb8
    238e:	0021      	movs	r1, r4
    2390:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    2392:	2200      	movs	r2, #0
    2394:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    2396:	428b      	cmp	r3, r1
    2398:	d1fc      	bne.n	2394 <usb_init+0x164>
    239a:	0021      	movs	r1, r4
    239c:	3155      	adds	r1, #85	; 0x55
    239e:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    23a0:	2200      	movs	r2, #0
    23a2:	601a      	str	r2, [r3, #0]
    23a4:	605a      	str	r2, [r3, #4]
    23a6:	609a      	str	r2, [r3, #8]
    23a8:	60da      	str	r2, [r3, #12]
    23aa:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    23ac:	428b      	cmp	r3, r1
    23ae:	d1f8      	bne.n	23a2 <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    23b0:	2300      	movs	r3, #0
    23b2:	22aa      	movs	r2, #170	; 0xaa
    23b4:	0052      	lsls	r2, r2, #1
    23b6:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    23b8:	3202      	adds	r2, #2
    23ba:	52a3      	strh	r3, [r4, r2]
    23bc:	0023      	movs	r3, r4
    23be:	3359      	adds	r3, #89	; 0x59
    23c0:	33ff      	adds	r3, #255	; 0xff
    23c2:	3461      	adds	r4, #97	; 0x61
    23c4:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    23c6:	2200      	movs	r2, #0
    23c8:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    23ca:	721a      	strb	r2, [r3, #8]
    23cc:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    23ce:	42a3      	cmp	r3, r4
    23d0:	d1fa      	bne.n	23c8 <usb_init+0x198>
    23d2:	2280      	movs	r2, #128	; 0x80
    23d4:	4b15      	ldr	r3, [pc, #84]	; (242c <usb_init+0x1fc>)
    23d6:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    23d8:	2000      	movs	r0, #0
    23da:	b003      	add	sp, #12
    23dc:	bc0c      	pop	{r2, r3}
    23de:	4690      	mov	r8, r2
    23e0:	4699      	mov	r9, r3
    23e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    23e4:	3b1a      	subs	r3, #26
    23e6:	e76d      	b.n	22c4 <usb_init+0x94>
		pad_transp = 29;
    23e8:	3b02      	subs	r3, #2
    23ea:	e778      	b.n	22de <usb_init+0xae>
		pad_trim = 3;
    23ec:	3b04      	subs	r3, #4
    23ee:	e782      	b.n	22f6 <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    23f0:	6822      	ldr	r2, [r4, #0]
    23f2:	8913      	ldrh	r3, [r2, #8]
    23f4:	3108      	adds	r1, #8
    23f6:	438b      	bics	r3, r1
    23f8:	8113      	strh	r3, [r2, #8]
    23fa:	e7a0      	b.n	233e <usb_init+0x10e>
    23fc:	20000248 	.word	0x20000248
    2400:	20000238 	.word	0x20000238
    2404:	40000400 	.word	0x40000400
    2408:	00003cd5 	.word	0x00003cd5
    240c:	00003bdd 	.word	0x00003bdd
    2410:	00003b51 	.word	0x00003b51
    2414:	41005000 	.word	0x41005000
    2418:	00806024 	.word	0x00806024
    241c:	fffff83f 	.word	0xfffff83f
    2420:	ffff8fff 	.word	0xffff8fff
    2424:	200006c0 	.word	0x200006c0
    2428:	0000427b 	.word	0x0000427b
    242c:	e000e100 	.word	0xe000e100

00002430 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2430:	b570      	push	{r4, r5, r6, lr}
    2432:	b082      	sub	sp, #8
    2434:	0005      	movs	r5, r0
    2436:	000e      	movs	r6, r1
	uint16_t temp = 0;
    2438:	2200      	movs	r2, #0
    243a:	466b      	mov	r3, sp
    243c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    243e:	4c06      	ldr	r4, [pc, #24]	; (2458 <usart_serial_getchar+0x28>)
    2440:	466b      	mov	r3, sp
    2442:	1d99      	adds	r1, r3, #6
    2444:	0028      	movs	r0, r5
    2446:	47a0      	blx	r4
    2448:	2800      	cmp	r0, #0
    244a:	d1f9      	bne.n	2440 <usart_serial_getchar+0x10>

	*c = temp;
    244c:	466b      	mov	r3, sp
    244e:	3306      	adds	r3, #6
    2450:	881b      	ldrh	r3, [r3, #0]
    2452:	7033      	strb	r3, [r6, #0]
}
    2454:	b002      	add	sp, #8
    2456:	bd70      	pop	{r4, r5, r6, pc}
    2458:	00002e5b 	.word	0x00002e5b

0000245c <usart_serial_putchar>:
{
    245c:	b570      	push	{r4, r5, r6, lr}
    245e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    2460:	b28c      	uxth	r4, r1
    2462:	4e03      	ldr	r6, [pc, #12]	; (2470 <usart_serial_putchar+0x14>)
    2464:	0021      	movs	r1, r4
    2466:	0028      	movs	r0, r5
    2468:	47b0      	blx	r6
    246a:	2800      	cmp	r0, #0
    246c:	d1fa      	bne.n	2464 <usart_serial_putchar+0x8>
}
    246e:	bd70      	pop	{r4, r5, r6, pc}
    2470:	00002e35 	.word	0x00002e35

00002474 <console_init>:
	usart_enable(&module);
 }


 void console_init(void)
 {
    2474:	b5f0      	push	{r4, r5, r6, r7, lr}
    2476:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2478:	2380      	movs	r3, #128	; 0x80
    247a:	05db      	lsls	r3, r3, #23
    247c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    247e:	2300      	movs	r3, #0
    2480:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2482:	22ff      	movs	r2, #255	; 0xff
    2484:	4669      	mov	r1, sp
    2486:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2488:	2200      	movs	r2, #0
    248a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    248c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    248e:	2401      	movs	r4, #1
    2490:	2124      	movs	r1, #36	; 0x24
    2492:	4668      	mov	r0, sp
    2494:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    2496:	3101      	adds	r1, #1
    2498:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    249a:	3101      	adds	r1, #1
    249c:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    249e:	3101      	adds	r1, #1
    24a0:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    24a2:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    24a4:	3105      	adds	r1, #5
    24a6:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    24a8:	3101      	adds	r1, #1
    24aa:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    24ac:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    24ae:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    24b0:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    24b2:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    24b4:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    24b6:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    24b8:	2313      	movs	r3, #19
    24ba:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    24bc:	7742      	strb	r2, [r0, #29]
	cfg.baudrate = 115200;
    24be:	23e1      	movs	r3, #225	; 0xe1
    24c0:	025b      	lsls	r3, r3, #9
    24c2:	9308      	str	r3, [sp, #32]
	cfg.pinmux_pad0 = PINMUX_PA22D_SERCOM5_PAD0;
    24c4:	4b1c      	ldr	r3, [pc, #112]	; (2538 <console_init+0xc4>)
    24c6:	930c      	str	r3, [sp, #48]	; 0x30
	cfg.pinmux_pad1 = PINMUX_PA23D_SERCOM5_PAD1;
    24c8:	4b1c      	ldr	r3, [pc, #112]	; (253c <console_init+0xc8>)
    24ca:	930d      	str	r3, [sp, #52]	; 0x34
	cfg.pinmux_pad2 = PINMUX_UNUSED;
    24cc:	2301      	movs	r3, #1
    24ce:	425b      	negs	r3, r3
    24d0:	930e      	str	r3, [sp, #56]	; 0x38
	cfg.pinmux_pad3 = PINMUX_UNUSED;
    24d2:	930f      	str	r3, [sp, #60]	; 0x3c
	cfg.mux_setting = USART_RX_1_TX_0_XCK_1;
    24d4:	2380      	movs	r3, #128	; 0x80
    24d6:	035b      	lsls	r3, r3, #13
    24d8:	9303      	str	r3, [sp, #12]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    24da:	4d19      	ldr	r5, [pc, #100]	; (2540 <console_init+0xcc>)
    24dc:	4b19      	ldr	r3, [pc, #100]	; (2544 <console_init+0xd0>)
    24de:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    24e0:	4a19      	ldr	r2, [pc, #100]	; (2548 <console_init+0xd4>)
    24e2:	4b1a      	ldr	r3, [pc, #104]	; (254c <console_init+0xd8>)
    24e4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    24e6:	4a1a      	ldr	r2, [pc, #104]	; (2550 <console_init+0xdc>)
    24e8:	4b1a      	ldr	r3, [pc, #104]	; (2554 <console_init+0xe0>)
    24ea:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    24ec:	466a      	mov	r2, sp
    24ee:	491a      	ldr	r1, [pc, #104]	; (2558 <console_init+0xe4>)
    24f0:	0028      	movs	r0, r5
    24f2:	4b1a      	ldr	r3, [pc, #104]	; (255c <console_init+0xe8>)
    24f4:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    24f6:	4f1a      	ldr	r7, [pc, #104]	; (2560 <console_init+0xec>)
    24f8:	683b      	ldr	r3, [r7, #0]
    24fa:	6898      	ldr	r0, [r3, #8]
    24fc:	2100      	movs	r1, #0
    24fe:	4e19      	ldr	r6, [pc, #100]	; (2564 <console_init+0xf0>)
    2500:	47b0      	blx	r6
	setbuf(stdin, NULL);
    2502:	683b      	ldr	r3, [r7, #0]
    2504:	6858      	ldr	r0, [r3, #4]
    2506:	2100      	movs	r1, #0
    2508:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    250a:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    250c:	0030      	movs	r0, r6
    250e:	4b16      	ldr	r3, [pc, #88]	; (2568 <console_init+0xf4>)
    2510:	4798      	blx	r3
    2512:	231f      	movs	r3, #31
    2514:	4018      	ands	r0, r3
    2516:	4084      	lsls	r4, r0
    2518:	4b14      	ldr	r3, [pc, #80]	; (256c <console_init+0xf8>)
    251a:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    251c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    251e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2520:	2b00      	cmp	r3, #0
    2522:	d1fc      	bne.n	251e <console_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2524:	6833      	ldr	r3, [r6, #0]
    2526:	2202      	movs	r2, #2
    2528:	4313      	orrs	r3, r2
    252a:	6033      	str	r3, [r6, #0]
	console_hardware_init();
	printf("Serial console init !!!\n\r");
    252c:	4810      	ldr	r0, [pc, #64]	; (2570 <console_init+0xfc>)
    252e:	4b11      	ldr	r3, [pc, #68]	; (2574 <console_init+0x100>)
    2530:	4798      	blx	r3
    2532:	b011      	add	sp, #68	; 0x44
    2534:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2536:	46c0      	nop			; (mov r8, r8)
    2538:	00160003 	.word	0x00160003
    253c:	00170003 	.word	0x00170003
    2540:	20000254 	.word	0x20000254
    2544:	200007c8 	.word	0x200007c8
    2548:	0000245d 	.word	0x0000245d
    254c:	200007c4 	.word	0x200007c4
    2550:	00002431 	.word	0x00002431
    2554:	200007c0 	.word	0x200007c0
    2558:	42001c00 	.word	0x42001c00
    255c:	00002af9 	.word	0x00002af9
    2560:	200000a4 	.word	0x200000a4
    2564:	000042c1 	.word	0x000042c1
    2568:	00003595 	.word	0x00003595
    256c:	e000e100 	.word	0xe000e100
    2570:	00005304 	.word	0x00005304
    2574:	0000428d 	.word	0x0000428d

00002578 <spi_on_recv_callback>:

static struct spi_module module = {0};
static uint8_t rx_data[32];

static void spi_on_recv_callback(struct spi_module *const module)
{
    2578:	b530      	push	{r4, r5, lr}
    257a:	b083      	sub	sp, #12
    257c:	9001      	str	r0, [sp, #4]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    257e:	7e03      	ldrb	r3, [r0, #24]
	while (!spi_is_ready_to_read(&module))
    2580:	075b      	lsls	r3, r3, #29
    2582:	d407      	bmi.n	2594 <spi_on_recv_callback+0x1c>
		delay_cycles_ms(1);
    2584:	4d0a      	ldr	r5, [pc, #40]	; (25b0 <spi_on_recv_callback+0x38>)
	while (!spi_is_ready_to_read(&module))
    2586:	2404      	movs	r4, #4
		delay_cycles_ms(1);
    2588:	2001      	movs	r0, #1
    258a:	47a8      	blx	r5
    258c:	9b01      	ldr	r3, [sp, #4]
    258e:	7e1b      	ldrb	r3, [r3, #24]
	while (!spi_is_ready_to_read(&module))
    2590:	4223      	tst	r3, r4
    2592:	d0f9      	beq.n	2588 <spi_on_recv_callback+0x10>

	spi_read_buffer_job(&module, rx_data, 32, 0);
    2594:	4c07      	ldr	r4, [pc, #28]	; (25b4 <spi_on_recv_callback+0x3c>)
    2596:	2300      	movs	r3, #0
    2598:	2220      	movs	r2, #32
    259a:	0021      	movs	r1, r4
    259c:	a801      	add	r0, sp, #4
    259e:	4d06      	ldr	r5, [pc, #24]	; (25b8 <spi_on_recv_callback+0x40>)
    25a0:	47a8      	blx	r5
	
	printf("%s\n\r", rx_data);
    25a2:	0021      	movs	r1, r4
    25a4:	4805      	ldr	r0, [pc, #20]	; (25bc <spi_on_recv_callback+0x44>)
    25a6:	4b06      	ldr	r3, [pc, #24]	; (25c0 <spi_on_recv_callback+0x48>)
    25a8:	4798      	blx	r3
}
    25aa:	b003      	add	sp, #12
    25ac:	bd30      	pop	{r4, r5, pc}
    25ae:	46c0      	nop			; (mov r8, r8)
    25b0:	000026c5 	.word	0x000026c5
    25b4:	200002c4 	.word	0x200002c4
    25b8:	000032d1 	.word	0x000032d1
    25bc:	00005320 	.word	0x00005320
    25c0:	0000428d 	.word	0x0000428d

000025c4 <spi_initialize>:

	spi_enable(&module);
}

void spi_initialize(bool master)
{
    25c4:	b570      	push	{r4, r5, r6, lr}
    25c6:	b08e      	sub	sp, #56	; 0x38
    25c8:	0006      	movs	r6, r0
	config->data_order       = SPI_DATA_ORDER_MSB;
    25ca:	2400      	movs	r4, #0
    25cc:	9401      	str	r4, [sp, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    25ce:	9402      	str	r4, [sp, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    25d0:	466b      	mov	r3, sp
    25d2:	741c      	strb	r4, [r3, #16]
	config->run_in_standby   = false;
    25d4:	745c      	strb	r4, [r3, #17]
	config->receiver_enable  = true;
    25d6:	2501      	movs	r5, #1
    25d8:	749d      	strb	r5, [r3, #18]
	config->select_slave_low_detect_enable= true;
    25da:	74dd      	strb	r5, [r3, #19]
	config->generator_source = GCLK_GENERATOR_0;
    25dc:	2324      	movs	r3, #36	; 0x24
    25de:	466a      	mov	r2, sp
    25e0:	54d4      	strb	r4, [r2, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    25e2:	220c      	movs	r2, #12
    25e4:	2100      	movs	r1, #0
    25e6:	a806      	add	r0, sp, #24
    25e8:	4b1e      	ldr	r3, [pc, #120]	; (2664 <spi_initialize+0xa0>)
    25ea:	4798      	blx	r3
	cfg.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    25ec:	4b1e      	ldr	r3, [pc, #120]	; (2668 <spi_initialize+0xa4>)
    25ee:	930a      	str	r3, [sp, #40]	; 0x28
	cfg.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    25f0:	4b1e      	ldr	r3, [pc, #120]	; (266c <spi_initialize+0xa8>)
    25f2:	930b      	str	r3, [sp, #44]	; 0x2c
	cfg.pinmux_pad2 = PINMUX_PA18C_SERCOM1_PAD2;
    25f4:	4b1e      	ldr	r3, [pc, #120]	; (2670 <spi_initialize+0xac>)
    25f6:	930c      	str	r3, [sp, #48]	; 0x30
	cfg.pinmux_pad3 = PINMUX_UNUSED;
    25f8:	2301      	movs	r3, #1
    25fa:	425b      	negs	r3, r3
    25fc:	930d      	str	r3, [sp, #52]	; 0x34
	cfg.mux_setting = SPI_SIGNAL_MUX_SETTING_I;
    25fe:	2380      	movs	r3, #128	; 0x80
    2600:	029b      	lsls	r3, r3, #10
    2602:	9303      	str	r3, [sp, #12]
	cfg.mode = master ? SPI_MODE_MASTER : SPI_MODE_SLAVE;
    2604:	466b      	mov	r3, sp
    2606:	701e      	strb	r6, [r3, #0]
	cfg.mode_specific.slave.frame_format = SPI_FRAME_FORMAT_SPI_FRAME;
    2608:	9406      	str	r4, [sp, #24]
	cfg.mode_specific.slave.preload_enable = true;
    260a:	2320      	movs	r3, #32
    260c:	466a      	mov	r2, sp
    260e:	54d5      	strb	r5, [r2, r3]
	cfg.master_slave_select_enable = true;
    2610:	7515      	strb	r5, [r2, #20]
	if (master)
    2612:	2e00      	cmp	r6, #0
    2614:	d001      	beq.n	261a <spi_initialize+0x56>
		cfg.mode_specific.master.baudrate = SPI_BAUDRATE;
    2616:	4b17      	ldr	r3, [pc, #92]	; (2674 <spi_initialize+0xb0>)
    2618:	9306      	str	r3, [sp, #24]
	spi_init(&module, SERCOM1, &cfg);
    261a:	4d17      	ldr	r5, [pc, #92]	; (2678 <spi_initialize+0xb4>)
    261c:	466a      	mov	r2, sp
    261e:	4917      	ldr	r1, [pc, #92]	; (267c <spi_initialize+0xb8>)
    2620:	0028      	movs	r0, r5
    2622:	4b17      	ldr	r3, [pc, #92]	; (2680 <spi_initialize+0xbc>)
    2624:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    2626:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2628:	0020      	movs	r0, r4
    262a:	4b16      	ldr	r3, [pc, #88]	; (2684 <spi_initialize+0xc0>)
    262c:	4798      	blx	r3
    262e:	231f      	movs	r3, #31
    2630:	4018      	ands	r0, r3
    2632:	3b1e      	subs	r3, #30
    2634:	4083      	lsls	r3, r0
    2636:	4a14      	ldr	r2, [pc, #80]	; (2688 <spi_initialize+0xc4>)
    2638:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    263a:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    263c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    263e:	2b00      	cmp	r3, #0
    2640:	d1fc      	bne.n	263c <spi_initialize+0x78>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2642:	6823      	ldr	r3, [r4, #0]
    2644:	2202      	movs	r2, #2
    2646:	4313      	orrs	r3, r2
    2648:	6023      	str	r3, [r4, #0]
	spi_hardware_init(master);
	
	spi_register_callback(&module, spi_on_recv_callback, SPI_CALLBACK_BUFFER_RECEIVED);
    264a:	4c0b      	ldr	r4, [pc, #44]	; (2678 <spi_initialize+0xb4>)
    264c:	3a01      	subs	r2, #1
    264e:	490f      	ldr	r1, [pc, #60]	; (268c <spi_initialize+0xc8>)
    2650:	0020      	movs	r0, r4
    2652:	4b0f      	ldr	r3, [pc, #60]	; (2690 <spi_initialize+0xcc>)
    2654:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
    2656:	2237      	movs	r2, #55	; 0x37
    2658:	5ca3      	ldrb	r3, [r4, r2]
    265a:	2102      	movs	r1, #2
    265c:	430b      	orrs	r3, r1
    265e:	54a3      	strb	r3, [r4, r2]
	spi_enable_callback(&module, SPI_CALLBACK_BUFFER_RECEIVED);
}
    2660:	b00e      	add	sp, #56	; 0x38
    2662:	bd70      	pop	{r4, r5, r6, pc}
    2664:	0000427b 	.word	0x0000427b
    2668:	00100002 	.word	0x00100002
    266c:	00110002 	.word	0x00110002
    2670:	00120002 	.word	0x00120002
    2674:	000f4240 	.word	0x000f4240
    2678:	20000288 	.word	0x20000288
    267c:	42000c00 	.word	0x42000c00
    2680:	00003059 	.word	0x00003059
    2684:	00003595 	.word	0x00003595
    2688:	e000e100 	.word	0xe000e100
    268c:	00002579 	.word	0x00002579
    2690:	0000326d 	.word	0x0000326d

00002694 <spi_write_bytes>:


void spi_write_bytes(uint8_t *tx_data, size_t length)
{
    2694:	b570      	push	{r4, r5, r6, lr}
    2696:	0006      	movs	r6, r0
    2698:	000c      	movs	r4, r1
	printf("spi: sending a packet of length: %d\n\r", length);
    269a:	4805      	ldr	r0, [pc, #20]	; (26b0 <spi_write_bytes+0x1c>)
    269c:	4d05      	ldr	r5, [pc, #20]	; (26b4 <spi_write_bytes+0x20>)
    269e:	47a8      	blx	r5
	spi_write_buffer_job(&module, tx_data, length);
    26a0:	b2a2      	uxth	r2, r4
    26a2:	0031      	movs	r1, r6
    26a4:	4804      	ldr	r0, [pc, #16]	; (26b8 <spi_write_bytes+0x24>)
    26a6:	4b05      	ldr	r3, [pc, #20]	; (26bc <spi_write_bytes+0x28>)
    26a8:	4798      	blx	r3
	printf("spi: packet sent\n\r");
    26aa:	4805      	ldr	r0, [pc, #20]	; (26c0 <spi_write_bytes+0x2c>)
    26ac:	47a8      	blx	r5
	
}
    26ae:	bd70      	pop	{r4, r5, r6, pc}
    26b0:	00005328 	.word	0x00005328
    26b4:	0000428d 	.word	0x0000428d
    26b8:	20000288 	.word	0x20000288
    26bc:	00003285 	.word	0x00003285
    26c0:	00005350 	.word	0x00005350

000026c4 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    26c4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    26c6:	4b08      	ldr	r3, [pc, #32]	; (26e8 <delay_cycles_ms+0x24>)
    26c8:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    26ca:	4a08      	ldr	r2, [pc, #32]	; (26ec <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    26cc:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    26ce:	2180      	movs	r1, #128	; 0x80
    26d0:	0249      	lsls	r1, r1, #9
	while (n--) {
    26d2:	3801      	subs	r0, #1
    26d4:	d307      	bcc.n	26e6 <delay_cycles_ms+0x22>
	if (n > 0) {
    26d6:	2c00      	cmp	r4, #0
    26d8:	d0fb      	beq.n	26d2 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    26da:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    26dc:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    26de:	6813      	ldr	r3, [r2, #0]
    26e0:	420b      	tst	r3, r1
    26e2:	d0fc      	beq.n	26de <delay_cycles_ms+0x1a>
    26e4:	e7f5      	b.n	26d2 <delay_cycles_ms+0xe>
	}
}
    26e6:	bd30      	pop	{r4, r5, pc}
    26e8:	2000008c 	.word	0x2000008c
    26ec:	e000e010 	.word	0xe000e010

000026f0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    26f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    26f2:	46c6      	mov	lr, r8
    26f4:	b500      	push	{lr}
    26f6:	000c      	movs	r4, r1
    26f8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    26fa:	2800      	cmp	r0, #0
    26fc:	d10f      	bne.n	271e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    26fe:	2a00      	cmp	r2, #0
    2700:	dd11      	ble.n	2726 <_read+0x36>
    2702:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2704:	4e09      	ldr	r6, [pc, #36]	; (272c <_read+0x3c>)
    2706:	4d0a      	ldr	r5, [pc, #40]	; (2730 <_read+0x40>)
    2708:	6830      	ldr	r0, [r6, #0]
    270a:	0021      	movs	r1, r4
    270c:	682b      	ldr	r3, [r5, #0]
    270e:	4798      	blx	r3
		ptr++;
    2710:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    2712:	42bc      	cmp	r4, r7
    2714:	d1f8      	bne.n	2708 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    2716:	4640      	mov	r0, r8
    2718:	bc04      	pop	{r2}
    271a:	4690      	mov	r8, r2
    271c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    271e:	2301      	movs	r3, #1
    2720:	425b      	negs	r3, r3
    2722:	4698      	mov	r8, r3
    2724:	e7f7      	b.n	2716 <_read+0x26>
	for (; len > 0; --len) {
    2726:	4680      	mov	r8, r0
    2728:	e7f5      	b.n	2716 <_read+0x26>
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	200007c8 	.word	0x200007c8
    2730:	200007c0 	.word	0x200007c0

00002734 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2734:	b5f0      	push	{r4, r5, r6, r7, lr}
    2736:	46c6      	mov	lr, r8
    2738:	b500      	push	{lr}
    273a:	000e      	movs	r6, r1
    273c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    273e:	3801      	subs	r0, #1
    2740:	2802      	cmp	r0, #2
    2742:	d810      	bhi.n	2766 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2744:	2a00      	cmp	r2, #0
    2746:	d011      	beq.n	276c <_write+0x38>
    2748:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    274a:	4b0c      	ldr	r3, [pc, #48]	; (277c <_write+0x48>)
    274c:	4698      	mov	r8, r3
    274e:	4f0c      	ldr	r7, [pc, #48]	; (2780 <_write+0x4c>)
    2750:	4643      	mov	r3, r8
    2752:	6818      	ldr	r0, [r3, #0]
    2754:	5d31      	ldrb	r1, [r6, r4]
    2756:	683b      	ldr	r3, [r7, #0]
    2758:	4798      	blx	r3
    275a:	2800      	cmp	r0, #0
    275c:	db08      	blt.n	2770 <_write+0x3c>
			return -1;
		}
		++nChars;
    275e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2760:	42a5      	cmp	r5, r4
    2762:	d1f5      	bne.n	2750 <_write+0x1c>
    2764:	e006      	b.n	2774 <_write+0x40>
		return -1;
    2766:	2401      	movs	r4, #1
    2768:	4264      	negs	r4, r4
    276a:	e003      	b.n	2774 <_write+0x40>
	for (; len != 0; --len) {
    276c:	0014      	movs	r4, r2
    276e:	e001      	b.n	2774 <_write+0x40>
			return -1;
    2770:	2401      	movs	r4, #1
    2772:	4264      	negs	r4, r4
	}
	return nChars;
}
    2774:	0020      	movs	r0, r4
    2776:	bc04      	pop	{r2}
    2778:	4690      	mov	r8, r2
    277a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    277c:	200007c8 	.word	0x200007c8
    2780:	200007c4 	.word	0x200007c4

00002784 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    2784:	b5f0      	push	{r4, r5, r6, r7, lr}
    2786:	46de      	mov	lr, fp
    2788:	4657      	mov	r7, sl
    278a:	464e      	mov	r6, r9
    278c:	4645      	mov	r5, r8
    278e:	b5e0      	push	{r5, r6, r7, lr}
    2790:	b087      	sub	sp, #28
    2792:	4680      	mov	r8, r0
    2794:	9104      	str	r1, [sp, #16]
    2796:	0016      	movs	r6, r2
    2798:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    279a:	2200      	movs	r2, #0
    279c:	2300      	movs	r3, #0
    279e:	2100      	movs	r1, #0
    27a0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    27a2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    27a4:	2001      	movs	r0, #1
    27a6:	0021      	movs	r1, r4
    27a8:	9600      	str	r6, [sp, #0]
    27aa:	9701      	str	r7, [sp, #4]
    27ac:	465c      	mov	r4, fp
    27ae:	9403      	str	r4, [sp, #12]
    27b0:	4644      	mov	r4, r8
    27b2:	9405      	str	r4, [sp, #20]
    27b4:	e013      	b.n	27de <long_division+0x5a>
    27b6:	2420      	movs	r4, #32
    27b8:	1a64      	subs	r4, r4, r1
    27ba:	0005      	movs	r5, r0
    27bc:	40e5      	lsrs	r5, r4
    27be:	46a8      	mov	r8, r5
    27c0:	e014      	b.n	27ec <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    27c2:	9c00      	ldr	r4, [sp, #0]
    27c4:	9d01      	ldr	r5, [sp, #4]
    27c6:	1b12      	subs	r2, r2, r4
    27c8:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    27ca:	465c      	mov	r4, fp
    27cc:	464d      	mov	r5, r9
    27ce:	432c      	orrs	r4, r5
    27d0:	46a3      	mov	fp, r4
    27d2:	9c03      	ldr	r4, [sp, #12]
    27d4:	4645      	mov	r5, r8
    27d6:	432c      	orrs	r4, r5
    27d8:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    27da:	3901      	subs	r1, #1
    27dc:	d325      	bcc.n	282a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    27de:	2420      	movs	r4, #32
    27e0:	4264      	negs	r4, r4
    27e2:	190c      	adds	r4, r1, r4
    27e4:	d4e7      	bmi.n	27b6 <long_division+0x32>
    27e6:	0005      	movs	r5, r0
    27e8:	40a5      	lsls	r5, r4
    27ea:	46a8      	mov	r8, r5
    27ec:	0004      	movs	r4, r0
    27ee:	408c      	lsls	r4, r1
    27f0:	46a1      	mov	r9, r4
		r = r << 1;
    27f2:	1892      	adds	r2, r2, r2
    27f4:	415b      	adcs	r3, r3
    27f6:	0014      	movs	r4, r2
    27f8:	001d      	movs	r5, r3
		if (n & bit_shift) {
    27fa:	9e05      	ldr	r6, [sp, #20]
    27fc:	464f      	mov	r7, r9
    27fe:	403e      	ands	r6, r7
    2800:	46b4      	mov	ip, r6
    2802:	9e04      	ldr	r6, [sp, #16]
    2804:	4647      	mov	r7, r8
    2806:	403e      	ands	r6, r7
    2808:	46b2      	mov	sl, r6
    280a:	4666      	mov	r6, ip
    280c:	4657      	mov	r7, sl
    280e:	433e      	orrs	r6, r7
    2810:	d003      	beq.n	281a <long_division+0x96>
			r |= 0x01;
    2812:	0006      	movs	r6, r0
    2814:	4326      	orrs	r6, r4
    2816:	0032      	movs	r2, r6
    2818:	002b      	movs	r3, r5
		if (r >= d) {
    281a:	9c00      	ldr	r4, [sp, #0]
    281c:	9d01      	ldr	r5, [sp, #4]
    281e:	429d      	cmp	r5, r3
    2820:	d8db      	bhi.n	27da <long_division+0x56>
    2822:	d1ce      	bne.n	27c2 <long_division+0x3e>
    2824:	4294      	cmp	r4, r2
    2826:	d8d8      	bhi.n	27da <long_division+0x56>
    2828:	e7cb      	b.n	27c2 <long_division+0x3e>
    282a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    282c:	4658      	mov	r0, fp
    282e:	0019      	movs	r1, r3
    2830:	b007      	add	sp, #28
    2832:	bc3c      	pop	{r2, r3, r4, r5}
    2834:	4690      	mov	r8, r2
    2836:	4699      	mov	r9, r3
    2838:	46a2      	mov	sl, r4
    283a:	46ab      	mov	fp, r5
    283c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000283e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    283e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2840:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2842:	2340      	movs	r3, #64	; 0x40
    2844:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    2846:	4281      	cmp	r1, r0
    2848:	d202      	bcs.n	2850 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    284a:	0018      	movs	r0, r3
    284c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    284e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    2850:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    2852:	1c63      	adds	r3, r4, #1
    2854:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    2856:	4288      	cmp	r0, r1
    2858:	d9f9      	bls.n	284e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    285a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    285c:	2cff      	cmp	r4, #255	; 0xff
    285e:	d8f4      	bhi.n	284a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    2860:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    2862:	2300      	movs	r3, #0
    2864:	e7f1      	b.n	284a <_sercom_get_sync_baud_val+0xc>
	...

00002868 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    2868:	b5f0      	push	{r4, r5, r6, r7, lr}
    286a:	b083      	sub	sp, #12
    286c:	000f      	movs	r7, r1
    286e:	0016      	movs	r6, r2
    2870:	aa08      	add	r2, sp, #32
    2872:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    2874:	0004      	movs	r4, r0
    2876:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2878:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    287a:	42bc      	cmp	r4, r7
    287c:	d902      	bls.n	2884 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    287e:	0010      	movs	r0, r2
    2880:	b003      	add	sp, #12
    2882:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    2884:	2b00      	cmp	r3, #0
    2886:	d114      	bne.n	28b2 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    2888:	0002      	movs	r2, r0
    288a:	0008      	movs	r0, r1
    288c:	2100      	movs	r1, #0
    288e:	4c19      	ldr	r4, [pc, #100]	; (28f4 <_sercom_get_async_baud_val+0x8c>)
    2890:	47a0      	blx	r4
    2892:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    2894:	003a      	movs	r2, r7
    2896:	2300      	movs	r3, #0
    2898:	2000      	movs	r0, #0
    289a:	4c17      	ldr	r4, [pc, #92]	; (28f8 <_sercom_get_async_baud_val+0x90>)
    289c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    289e:	2200      	movs	r2, #0
    28a0:	2301      	movs	r3, #1
    28a2:	1a12      	subs	r2, r2, r0
    28a4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    28a6:	0c12      	lsrs	r2, r2, #16
    28a8:	041b      	lsls	r3, r3, #16
    28aa:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    28ac:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    28ae:	2200      	movs	r2, #0
    28b0:	e7e5      	b.n	287e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    28b2:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    28b4:	2b01      	cmp	r3, #1
    28b6:	d1f9      	bne.n	28ac <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    28b8:	000a      	movs	r2, r1
    28ba:	2300      	movs	r3, #0
    28bc:	2100      	movs	r1, #0
    28be:	4c0d      	ldr	r4, [pc, #52]	; (28f4 <_sercom_get_async_baud_val+0x8c>)
    28c0:	47a0      	blx	r4
    28c2:	0002      	movs	r2, r0
    28c4:	000b      	movs	r3, r1
    28c6:	9200      	str	r2, [sp, #0]
    28c8:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    28ca:	0038      	movs	r0, r7
    28cc:	2100      	movs	r1, #0
    28ce:	4c0a      	ldr	r4, [pc, #40]	; (28f8 <_sercom_get_async_baud_val+0x90>)
    28d0:	47a0      	blx	r4
    28d2:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    28d4:	2380      	movs	r3, #128	; 0x80
    28d6:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    28d8:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    28da:	4298      	cmp	r0, r3
    28dc:	d8cf      	bhi.n	287e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    28de:	0f79      	lsrs	r1, r7, #29
    28e0:	00f8      	lsls	r0, r7, #3
    28e2:	9a00      	ldr	r2, [sp, #0]
    28e4:	9b01      	ldr	r3, [sp, #4]
    28e6:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    28e8:	00ea      	lsls	r2, r5, #3
    28ea:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    28ec:	b2d2      	uxtb	r2, r2
    28ee:	0352      	lsls	r2, r2, #13
    28f0:	432a      	orrs	r2, r5
    28f2:	e7db      	b.n	28ac <_sercom_get_async_baud_val+0x44>
    28f4:	000041cd 	.word	0x000041cd
    28f8:	00002785 	.word	0x00002785

000028fc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    28fc:	b510      	push	{r4, lr}
    28fe:	b082      	sub	sp, #8
    2900:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2902:	4b0e      	ldr	r3, [pc, #56]	; (293c <sercom_set_gclk_generator+0x40>)
    2904:	781b      	ldrb	r3, [r3, #0]
    2906:	2b00      	cmp	r3, #0
    2908:	d007      	beq.n	291a <sercom_set_gclk_generator+0x1e>
    290a:	2900      	cmp	r1, #0
    290c:	d105      	bne.n	291a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    290e:	4b0b      	ldr	r3, [pc, #44]	; (293c <sercom_set_gclk_generator+0x40>)
    2910:	785b      	ldrb	r3, [r3, #1]
    2912:	4283      	cmp	r3, r0
    2914:	d010      	beq.n	2938 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    2916:	201d      	movs	r0, #29
    2918:	e00c      	b.n	2934 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    291a:	a901      	add	r1, sp, #4
    291c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    291e:	2013      	movs	r0, #19
    2920:	4b07      	ldr	r3, [pc, #28]	; (2940 <sercom_set_gclk_generator+0x44>)
    2922:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2924:	2013      	movs	r0, #19
    2926:	4b07      	ldr	r3, [pc, #28]	; (2944 <sercom_set_gclk_generator+0x48>)
    2928:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    292a:	4b04      	ldr	r3, [pc, #16]	; (293c <sercom_set_gclk_generator+0x40>)
    292c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    292e:	2201      	movs	r2, #1
    2930:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    2932:	2000      	movs	r0, #0
}
    2934:	b002      	add	sp, #8
    2936:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    2938:	2000      	movs	r0, #0
    293a:	e7fb      	b.n	2934 <sercom_set_gclk_generator+0x38>
    293c:	200002e4 	.word	0x200002e4
    2940:	00003bdd 	.word	0x00003bdd
    2944:	00003b51 	.word	0x00003b51

00002948 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    2948:	4b40      	ldr	r3, [pc, #256]	; (2a4c <_sercom_get_default_pad+0x104>)
    294a:	4298      	cmp	r0, r3
    294c:	d031      	beq.n	29b2 <_sercom_get_default_pad+0x6a>
    294e:	d90a      	bls.n	2966 <_sercom_get_default_pad+0x1e>
    2950:	4b3f      	ldr	r3, [pc, #252]	; (2a50 <_sercom_get_default_pad+0x108>)
    2952:	4298      	cmp	r0, r3
    2954:	d04d      	beq.n	29f2 <_sercom_get_default_pad+0xaa>
    2956:	4b3f      	ldr	r3, [pc, #252]	; (2a54 <_sercom_get_default_pad+0x10c>)
    2958:	4298      	cmp	r0, r3
    295a:	d05a      	beq.n	2a12 <_sercom_get_default_pad+0xca>
    295c:	4b3e      	ldr	r3, [pc, #248]	; (2a58 <_sercom_get_default_pad+0x110>)
    295e:	4298      	cmp	r0, r3
    2960:	d037      	beq.n	29d2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    2962:	2000      	movs	r0, #0
}
    2964:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    2966:	4b3d      	ldr	r3, [pc, #244]	; (2a5c <_sercom_get_default_pad+0x114>)
    2968:	4298      	cmp	r0, r3
    296a:	d00c      	beq.n	2986 <_sercom_get_default_pad+0x3e>
    296c:	4b3c      	ldr	r3, [pc, #240]	; (2a60 <_sercom_get_default_pad+0x118>)
    296e:	4298      	cmp	r0, r3
    2970:	d1f7      	bne.n	2962 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2972:	2901      	cmp	r1, #1
    2974:	d017      	beq.n	29a6 <_sercom_get_default_pad+0x5e>
    2976:	2900      	cmp	r1, #0
    2978:	d05d      	beq.n	2a36 <_sercom_get_default_pad+0xee>
    297a:	2902      	cmp	r1, #2
    297c:	d015      	beq.n	29aa <_sercom_get_default_pad+0x62>
    297e:	2903      	cmp	r1, #3
    2980:	d015      	beq.n	29ae <_sercom_get_default_pad+0x66>
	return 0;
    2982:	2000      	movs	r0, #0
    2984:	e7ee      	b.n	2964 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2986:	2901      	cmp	r1, #1
    2988:	d007      	beq.n	299a <_sercom_get_default_pad+0x52>
    298a:	2900      	cmp	r1, #0
    298c:	d051      	beq.n	2a32 <_sercom_get_default_pad+0xea>
    298e:	2902      	cmp	r1, #2
    2990:	d005      	beq.n	299e <_sercom_get_default_pad+0x56>
    2992:	2903      	cmp	r1, #3
    2994:	d005      	beq.n	29a2 <_sercom_get_default_pad+0x5a>
	return 0;
    2996:	2000      	movs	r0, #0
    2998:	e7e4      	b.n	2964 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    299a:	4832      	ldr	r0, [pc, #200]	; (2a64 <_sercom_get_default_pad+0x11c>)
    299c:	e7e2      	b.n	2964 <_sercom_get_default_pad+0x1c>
    299e:	4832      	ldr	r0, [pc, #200]	; (2a68 <_sercom_get_default_pad+0x120>)
    29a0:	e7e0      	b.n	2964 <_sercom_get_default_pad+0x1c>
    29a2:	4832      	ldr	r0, [pc, #200]	; (2a6c <_sercom_get_default_pad+0x124>)
    29a4:	e7de      	b.n	2964 <_sercom_get_default_pad+0x1c>
    29a6:	4832      	ldr	r0, [pc, #200]	; (2a70 <_sercom_get_default_pad+0x128>)
    29a8:	e7dc      	b.n	2964 <_sercom_get_default_pad+0x1c>
    29aa:	4832      	ldr	r0, [pc, #200]	; (2a74 <_sercom_get_default_pad+0x12c>)
    29ac:	e7da      	b.n	2964 <_sercom_get_default_pad+0x1c>
    29ae:	4832      	ldr	r0, [pc, #200]	; (2a78 <_sercom_get_default_pad+0x130>)
    29b0:	e7d8      	b.n	2964 <_sercom_get_default_pad+0x1c>
    29b2:	2901      	cmp	r1, #1
    29b4:	d007      	beq.n	29c6 <_sercom_get_default_pad+0x7e>
    29b6:	2900      	cmp	r1, #0
    29b8:	d03f      	beq.n	2a3a <_sercom_get_default_pad+0xf2>
    29ba:	2902      	cmp	r1, #2
    29bc:	d005      	beq.n	29ca <_sercom_get_default_pad+0x82>
    29be:	2903      	cmp	r1, #3
    29c0:	d005      	beq.n	29ce <_sercom_get_default_pad+0x86>
	return 0;
    29c2:	2000      	movs	r0, #0
    29c4:	e7ce      	b.n	2964 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    29c6:	482d      	ldr	r0, [pc, #180]	; (2a7c <_sercom_get_default_pad+0x134>)
    29c8:	e7cc      	b.n	2964 <_sercom_get_default_pad+0x1c>
    29ca:	482d      	ldr	r0, [pc, #180]	; (2a80 <_sercom_get_default_pad+0x138>)
    29cc:	e7ca      	b.n	2964 <_sercom_get_default_pad+0x1c>
    29ce:	482d      	ldr	r0, [pc, #180]	; (2a84 <_sercom_get_default_pad+0x13c>)
    29d0:	e7c8      	b.n	2964 <_sercom_get_default_pad+0x1c>
    29d2:	2901      	cmp	r1, #1
    29d4:	d007      	beq.n	29e6 <_sercom_get_default_pad+0x9e>
    29d6:	2900      	cmp	r1, #0
    29d8:	d031      	beq.n	2a3e <_sercom_get_default_pad+0xf6>
    29da:	2902      	cmp	r1, #2
    29dc:	d005      	beq.n	29ea <_sercom_get_default_pad+0xa2>
    29de:	2903      	cmp	r1, #3
    29e0:	d005      	beq.n	29ee <_sercom_get_default_pad+0xa6>
	return 0;
    29e2:	2000      	movs	r0, #0
    29e4:	e7be      	b.n	2964 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    29e6:	4828      	ldr	r0, [pc, #160]	; (2a88 <_sercom_get_default_pad+0x140>)
    29e8:	e7bc      	b.n	2964 <_sercom_get_default_pad+0x1c>
    29ea:	4828      	ldr	r0, [pc, #160]	; (2a8c <_sercom_get_default_pad+0x144>)
    29ec:	e7ba      	b.n	2964 <_sercom_get_default_pad+0x1c>
    29ee:	4828      	ldr	r0, [pc, #160]	; (2a90 <_sercom_get_default_pad+0x148>)
    29f0:	e7b8      	b.n	2964 <_sercom_get_default_pad+0x1c>
    29f2:	2901      	cmp	r1, #1
    29f4:	d007      	beq.n	2a06 <_sercom_get_default_pad+0xbe>
    29f6:	2900      	cmp	r1, #0
    29f8:	d023      	beq.n	2a42 <_sercom_get_default_pad+0xfa>
    29fa:	2902      	cmp	r1, #2
    29fc:	d005      	beq.n	2a0a <_sercom_get_default_pad+0xc2>
    29fe:	2903      	cmp	r1, #3
    2a00:	d005      	beq.n	2a0e <_sercom_get_default_pad+0xc6>
	return 0;
    2a02:	2000      	movs	r0, #0
    2a04:	e7ae      	b.n	2964 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2a06:	4823      	ldr	r0, [pc, #140]	; (2a94 <_sercom_get_default_pad+0x14c>)
    2a08:	e7ac      	b.n	2964 <_sercom_get_default_pad+0x1c>
    2a0a:	4823      	ldr	r0, [pc, #140]	; (2a98 <_sercom_get_default_pad+0x150>)
    2a0c:	e7aa      	b.n	2964 <_sercom_get_default_pad+0x1c>
    2a0e:	4823      	ldr	r0, [pc, #140]	; (2a9c <_sercom_get_default_pad+0x154>)
    2a10:	e7a8      	b.n	2964 <_sercom_get_default_pad+0x1c>
    2a12:	2901      	cmp	r1, #1
    2a14:	d007      	beq.n	2a26 <_sercom_get_default_pad+0xde>
    2a16:	2900      	cmp	r1, #0
    2a18:	d015      	beq.n	2a46 <_sercom_get_default_pad+0xfe>
    2a1a:	2902      	cmp	r1, #2
    2a1c:	d005      	beq.n	2a2a <_sercom_get_default_pad+0xe2>
    2a1e:	2903      	cmp	r1, #3
    2a20:	d005      	beq.n	2a2e <_sercom_get_default_pad+0xe6>
	return 0;
    2a22:	2000      	movs	r0, #0
    2a24:	e79e      	b.n	2964 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2a26:	481e      	ldr	r0, [pc, #120]	; (2aa0 <_sercom_get_default_pad+0x158>)
    2a28:	e79c      	b.n	2964 <_sercom_get_default_pad+0x1c>
    2a2a:	481e      	ldr	r0, [pc, #120]	; (2aa4 <_sercom_get_default_pad+0x15c>)
    2a2c:	e79a      	b.n	2964 <_sercom_get_default_pad+0x1c>
    2a2e:	481e      	ldr	r0, [pc, #120]	; (2aa8 <_sercom_get_default_pad+0x160>)
    2a30:	e798      	b.n	2964 <_sercom_get_default_pad+0x1c>
    2a32:	481e      	ldr	r0, [pc, #120]	; (2aac <_sercom_get_default_pad+0x164>)
    2a34:	e796      	b.n	2964 <_sercom_get_default_pad+0x1c>
    2a36:	2003      	movs	r0, #3
    2a38:	e794      	b.n	2964 <_sercom_get_default_pad+0x1c>
    2a3a:	481d      	ldr	r0, [pc, #116]	; (2ab0 <_sercom_get_default_pad+0x168>)
    2a3c:	e792      	b.n	2964 <_sercom_get_default_pad+0x1c>
    2a3e:	481d      	ldr	r0, [pc, #116]	; (2ab4 <_sercom_get_default_pad+0x16c>)
    2a40:	e790      	b.n	2964 <_sercom_get_default_pad+0x1c>
    2a42:	481d      	ldr	r0, [pc, #116]	; (2ab8 <_sercom_get_default_pad+0x170>)
    2a44:	e78e      	b.n	2964 <_sercom_get_default_pad+0x1c>
    2a46:	481d      	ldr	r0, [pc, #116]	; (2abc <_sercom_get_default_pad+0x174>)
    2a48:	e78c      	b.n	2964 <_sercom_get_default_pad+0x1c>
    2a4a:	46c0      	nop			; (mov r8, r8)
    2a4c:	42001000 	.word	0x42001000
    2a50:	42001800 	.word	0x42001800
    2a54:	42001c00 	.word	0x42001c00
    2a58:	42001400 	.word	0x42001400
    2a5c:	42000800 	.word	0x42000800
    2a60:	42000c00 	.word	0x42000c00
    2a64:	00050003 	.word	0x00050003
    2a68:	00060003 	.word	0x00060003
    2a6c:	00070003 	.word	0x00070003
    2a70:	00010003 	.word	0x00010003
    2a74:	001e0003 	.word	0x001e0003
    2a78:	001f0003 	.word	0x001f0003
    2a7c:	00090003 	.word	0x00090003
    2a80:	000a0003 	.word	0x000a0003
    2a84:	000b0003 	.word	0x000b0003
    2a88:	00110003 	.word	0x00110003
    2a8c:	00120003 	.word	0x00120003
    2a90:	00130003 	.word	0x00130003
    2a94:	000d0003 	.word	0x000d0003
    2a98:	000e0003 	.word	0x000e0003
    2a9c:	000f0003 	.word	0x000f0003
    2aa0:	00170003 	.word	0x00170003
    2aa4:	00180003 	.word	0x00180003
    2aa8:	00190003 	.word	0x00190003
    2aac:	00040003 	.word	0x00040003
    2ab0:	00080003 	.word	0x00080003
    2ab4:	00100003 	.word	0x00100003
    2ab8:	000c0003 	.word	0x000c0003
    2abc:	00160003 	.word	0x00160003

00002ac0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2ac0:	b530      	push	{r4, r5, lr}
    2ac2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2ac4:	4b0b      	ldr	r3, [pc, #44]	; (2af4 <_sercom_get_sercom_inst_index+0x34>)
    2ac6:	466a      	mov	r2, sp
    2ac8:	cb32      	ldmia	r3!, {r1, r4, r5}
    2aca:	c232      	stmia	r2!, {r1, r4, r5}
    2acc:	cb32      	ldmia	r3!, {r1, r4, r5}
    2ace:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2ad0:	9b00      	ldr	r3, [sp, #0]
    2ad2:	4283      	cmp	r3, r0
    2ad4:	d00b      	beq.n	2aee <_sercom_get_sercom_inst_index+0x2e>
    2ad6:	2301      	movs	r3, #1
    2ad8:	009a      	lsls	r2, r3, #2
    2ada:	4669      	mov	r1, sp
    2adc:	5852      	ldr	r2, [r2, r1]
    2ade:	4282      	cmp	r2, r0
    2ae0:	d006      	beq.n	2af0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2ae2:	3301      	adds	r3, #1
    2ae4:	2b06      	cmp	r3, #6
    2ae6:	d1f7      	bne.n	2ad8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2ae8:	2000      	movs	r0, #0
}
    2aea:	b007      	add	sp, #28
    2aec:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2aee:	2300      	movs	r3, #0
			return i;
    2af0:	b2d8      	uxtb	r0, r3
    2af2:	e7fa      	b.n	2aea <_sercom_get_sercom_inst_index+0x2a>
    2af4:	00005364 	.word	0x00005364

00002af8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2af8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2afa:	46de      	mov	lr, fp
    2afc:	4657      	mov	r7, sl
    2afe:	464e      	mov	r6, r9
    2b00:	4645      	mov	r5, r8
    2b02:	b5e0      	push	{r5, r6, r7, lr}
    2b04:	b091      	sub	sp, #68	; 0x44
    2b06:	0005      	movs	r5, r0
    2b08:	000c      	movs	r4, r1
    2b0a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2b0c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2b0e:	0008      	movs	r0, r1
    2b10:	4bba      	ldr	r3, [pc, #744]	; (2dfc <usart_init+0x304>)
    2b12:	4798      	blx	r3
    2b14:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2b16:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2b18:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2b1a:	07db      	lsls	r3, r3, #31
    2b1c:	d506      	bpl.n	2b2c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2b1e:	b011      	add	sp, #68	; 0x44
    2b20:	bc3c      	pop	{r2, r3, r4, r5}
    2b22:	4690      	mov	r8, r2
    2b24:	4699      	mov	r9, r3
    2b26:	46a2      	mov	sl, r4
    2b28:	46ab      	mov	fp, r5
    2b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2b2c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    2b2e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2b30:	079b      	lsls	r3, r3, #30
    2b32:	d4f4      	bmi.n	2b1e <usart_init+0x26>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2b34:	49b2      	ldr	r1, [pc, #712]	; (2e00 <usart_init+0x308>)
    2b36:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2b38:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2b3a:	2301      	movs	r3, #1
    2b3c:	40bb      	lsls	r3, r7
    2b3e:	4303      	orrs	r3, r0
    2b40:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2b42:	a90f      	add	r1, sp, #60	; 0x3c
    2b44:	272d      	movs	r7, #45	; 0x2d
    2b46:	5df3      	ldrb	r3, [r6, r7]
    2b48:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2b4a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2b4c:	b2d3      	uxtb	r3, r2
    2b4e:	9302      	str	r3, [sp, #8]
    2b50:	0018      	movs	r0, r3
    2b52:	4bac      	ldr	r3, [pc, #688]	; (2e04 <usart_init+0x30c>)
    2b54:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2b56:	9802      	ldr	r0, [sp, #8]
    2b58:	4bab      	ldr	r3, [pc, #684]	; (2e08 <usart_init+0x310>)
    2b5a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2b5c:	5df0      	ldrb	r0, [r6, r7]
    2b5e:	2100      	movs	r1, #0
    2b60:	4baa      	ldr	r3, [pc, #680]	; (2e0c <usart_init+0x314>)
    2b62:	4798      	blx	r3
	module->character_size = config->character_size;
    2b64:	7af3      	ldrb	r3, [r6, #11]
    2b66:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2b68:	2324      	movs	r3, #36	; 0x24
    2b6a:	5cf3      	ldrb	r3, [r6, r3]
    2b6c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2b6e:	2325      	movs	r3, #37	; 0x25
    2b70:	5cf3      	ldrb	r3, [r6, r3]
    2b72:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2b74:	7ef3      	ldrb	r3, [r6, #27]
    2b76:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2b78:	7f33      	ldrb	r3, [r6, #28]
    2b7a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2b7c:	682b      	ldr	r3, [r5, #0]
    2b7e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2b80:	0018      	movs	r0, r3
    2b82:	4b9e      	ldr	r3, [pc, #632]	; (2dfc <usart_init+0x304>)
    2b84:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2b86:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2b88:	2200      	movs	r2, #0
    2b8a:	230e      	movs	r3, #14
    2b8c:	a906      	add	r1, sp, #24
    2b8e:	468c      	mov	ip, r1
    2b90:	4463      	add	r3, ip
    2b92:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2b94:	8a32      	ldrh	r2, [r6, #16]
    2b96:	9202      	str	r2, [sp, #8]
    2b98:	2380      	movs	r3, #128	; 0x80
    2b9a:	01db      	lsls	r3, r3, #7
    2b9c:	429a      	cmp	r2, r3
    2b9e:	d100      	bne.n	2ba2 <usart_init+0xaa>
    2ba0:	e09a      	b.n	2cd8 <usart_init+0x1e0>
    2ba2:	d90f      	bls.n	2bc4 <usart_init+0xcc>
    2ba4:	23c0      	movs	r3, #192	; 0xc0
    2ba6:	01db      	lsls	r3, r3, #7
    2ba8:	9a02      	ldr	r2, [sp, #8]
    2baa:	429a      	cmp	r2, r3
    2bac:	d100      	bne.n	2bb0 <usart_init+0xb8>
    2bae:	e08e      	b.n	2cce <usart_init+0x1d6>
    2bb0:	2380      	movs	r3, #128	; 0x80
    2bb2:	021b      	lsls	r3, r3, #8
    2bb4:	429a      	cmp	r2, r3
    2bb6:	d000      	beq.n	2bba <usart_init+0xc2>
    2bb8:	e11b      	b.n	2df2 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2bba:	2303      	movs	r3, #3
    2bbc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2bbe:	2300      	movs	r3, #0
    2bc0:	9307      	str	r3, [sp, #28]
    2bc2:	e008      	b.n	2bd6 <usart_init+0xde>
	switch (config->sample_rate) {
    2bc4:	2380      	movs	r3, #128	; 0x80
    2bc6:	019b      	lsls	r3, r3, #6
    2bc8:	429a      	cmp	r2, r3
    2bca:	d000      	beq.n	2bce <usart_init+0xd6>
    2bcc:	e111      	b.n	2df2 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2bce:	2310      	movs	r3, #16
    2bd0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2bd2:	3b0f      	subs	r3, #15
    2bd4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2bd6:	6833      	ldr	r3, [r6, #0]
    2bd8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2bda:	68f3      	ldr	r3, [r6, #12]
    2bdc:	469b      	mov	fp, r3
		config->sample_adjustment |
    2bde:	6973      	ldr	r3, [r6, #20]
    2be0:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2be2:	7e33      	ldrb	r3, [r6, #24]
    2be4:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2be6:	2326      	movs	r3, #38	; 0x26
    2be8:	5cf3      	ldrb	r3, [r6, r3]
    2bea:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2bec:	6873      	ldr	r3, [r6, #4]
    2bee:	4699      	mov	r9, r3
	switch (transfer_mode)
    2bf0:	2b00      	cmp	r3, #0
    2bf2:	d100      	bne.n	2bf6 <usart_init+0xfe>
    2bf4:	e09c      	b.n	2d30 <usart_init+0x238>
    2bf6:	2380      	movs	r3, #128	; 0x80
    2bf8:	055b      	lsls	r3, r3, #21
    2bfa:	4599      	cmp	r9, r3
    2bfc:	d100      	bne.n	2c00 <usart_init+0x108>
    2bfe:	e080      	b.n	2d02 <usart_init+0x20a>
	if(config->encoding_format_enable) {
    2c00:	7e73      	ldrb	r3, [r6, #25]
    2c02:	2b00      	cmp	r3, #0
    2c04:	d002      	beq.n	2c0c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2c06:	7eb3      	ldrb	r3, [r6, #26]
    2c08:	4642      	mov	r2, r8
    2c0a:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    2c0c:	230e      	movs	r3, #14
    2c0e:	aa06      	add	r2, sp, #24
    2c10:	4694      	mov	ip, r2
    2c12:	4463      	add	r3, ip
    2c14:	881b      	ldrh	r3, [r3, #0]
    2c16:	4642      	mov	r2, r8
    2c18:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2c1a:	9b05      	ldr	r3, [sp, #20]
    2c1c:	465a      	mov	r2, fp
    2c1e:	4313      	orrs	r3, r2
    2c20:	9a03      	ldr	r2, [sp, #12]
    2c22:	4313      	orrs	r3, r2
    2c24:	464a      	mov	r2, r9
    2c26:	4313      	orrs	r3, r2
    2c28:	9f02      	ldr	r7, [sp, #8]
    2c2a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2c2c:	9b04      	ldr	r3, [sp, #16]
    2c2e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2c30:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2c32:	4653      	mov	r3, sl
    2c34:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    2c36:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2c38:	2327      	movs	r3, #39	; 0x27
    2c3a:	5cf3      	ldrb	r3, [r6, r3]
    2c3c:	2b00      	cmp	r3, #0
    2c3e:	d101      	bne.n	2c44 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2c40:	3304      	adds	r3, #4
    2c42:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2c44:	7e73      	ldrb	r3, [r6, #25]
    2c46:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2c48:	7f32      	ldrb	r2, [r6, #28]
    2c4a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2c4c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2c4e:	7f72      	ldrb	r2, [r6, #29]
    2c50:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2c52:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2c54:	2224      	movs	r2, #36	; 0x24
    2c56:	5cb2      	ldrb	r2, [r6, r2]
    2c58:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2c5a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2c5c:	2225      	movs	r2, #37	; 0x25
    2c5e:	5cb2      	ldrb	r2, [r6, r2]
    2c60:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2c62:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2c64:	7ab1      	ldrb	r1, [r6, #10]
    2c66:	7af2      	ldrb	r2, [r6, #11]
    2c68:	4311      	orrs	r1, r2
    2c6a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2c6c:	8933      	ldrh	r3, [r6, #8]
    2c6e:	2bff      	cmp	r3, #255	; 0xff
    2c70:	d100      	bne.n	2c74 <usart_init+0x17c>
    2c72:	e081      	b.n	2d78 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2c74:	2280      	movs	r2, #128	; 0x80
    2c76:	0452      	lsls	r2, r2, #17
    2c78:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2c7a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2c7c:	232c      	movs	r3, #44	; 0x2c
    2c7e:	5cf3      	ldrb	r3, [r6, r3]
    2c80:	2b00      	cmp	r3, #0
    2c82:	d103      	bne.n	2c8c <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2c84:	4b62      	ldr	r3, [pc, #392]	; (2e10 <usart_init+0x318>)
    2c86:	789b      	ldrb	r3, [r3, #2]
    2c88:	079b      	lsls	r3, r3, #30
    2c8a:	d501      	bpl.n	2c90 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2c8c:	2380      	movs	r3, #128	; 0x80
    2c8e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2c90:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2c92:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2c94:	2b00      	cmp	r3, #0
    2c96:	d1fc      	bne.n	2c92 <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    2c98:	4643      	mov	r3, r8
    2c9a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2c9c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2c9e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2ca0:	2b00      	cmp	r3, #0
    2ca2:	d1fc      	bne.n	2c9e <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    2ca4:	4643      	mov	r3, r8
    2ca6:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2ca8:	ab0e      	add	r3, sp, #56	; 0x38
    2caa:	2280      	movs	r2, #128	; 0x80
    2cac:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2cae:	2200      	movs	r2, #0
    2cb0:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2cb2:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2cb4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2cb6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2cb8:	930a      	str	r3, [sp, #40]	; 0x28
    2cba:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2cbc:	930b      	str	r3, [sp, #44]	; 0x2c
    2cbe:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2cc0:	930c      	str	r3, [sp, #48]	; 0x30
    2cc2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2cc4:	9302      	str	r3, [sp, #8]
    2cc6:	930d      	str	r3, [sp, #52]	; 0x34
    2cc8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2cca:	ae0a      	add	r6, sp, #40	; 0x28
    2ccc:	e063      	b.n	2d96 <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2cce:	2308      	movs	r3, #8
    2cd0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2cd2:	3b07      	subs	r3, #7
    2cd4:	9307      	str	r3, [sp, #28]
    2cd6:	e77e      	b.n	2bd6 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2cd8:	6833      	ldr	r3, [r6, #0]
    2cda:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2cdc:	68f3      	ldr	r3, [r6, #12]
    2cde:	469b      	mov	fp, r3
		config->sample_adjustment |
    2ce0:	6973      	ldr	r3, [r6, #20]
    2ce2:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2ce4:	7e33      	ldrb	r3, [r6, #24]
    2ce6:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2ce8:	2326      	movs	r3, #38	; 0x26
    2cea:	5cf3      	ldrb	r3, [r6, r3]
    2cec:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2cee:	6873      	ldr	r3, [r6, #4]
    2cf0:	4699      	mov	r9, r3
	switch (transfer_mode)
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	d018      	beq.n	2d28 <usart_init+0x230>
    2cf6:	2380      	movs	r3, #128	; 0x80
    2cf8:	055b      	lsls	r3, r3, #21
    2cfa:	4599      	cmp	r9, r3
    2cfc:	d001      	beq.n	2d02 <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    2cfe:	2000      	movs	r0, #0
    2d00:	e025      	b.n	2d4e <usart_init+0x256>
			if (!config->use_external_clock) {
    2d02:	2327      	movs	r3, #39	; 0x27
    2d04:	5cf3      	ldrb	r3, [r6, r3]
    2d06:	2b00      	cmp	r3, #0
    2d08:	d000      	beq.n	2d0c <usart_init+0x214>
    2d0a:	e779      	b.n	2c00 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2d0c:	6a33      	ldr	r3, [r6, #32]
    2d0e:	001f      	movs	r7, r3
    2d10:	b2c0      	uxtb	r0, r0
    2d12:	4b40      	ldr	r3, [pc, #256]	; (2e14 <usart_init+0x31c>)
    2d14:	4798      	blx	r3
    2d16:	0001      	movs	r1, r0
    2d18:	220e      	movs	r2, #14
    2d1a:	ab06      	add	r3, sp, #24
    2d1c:	469c      	mov	ip, r3
    2d1e:	4462      	add	r2, ip
    2d20:	0038      	movs	r0, r7
    2d22:	4b3d      	ldr	r3, [pc, #244]	; (2e18 <usart_init+0x320>)
    2d24:	4798      	blx	r3
    2d26:	e012      	b.n	2d4e <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2d28:	2308      	movs	r3, #8
    2d2a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2d2c:	2300      	movs	r3, #0
    2d2e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2d30:	2327      	movs	r3, #39	; 0x27
    2d32:	5cf3      	ldrb	r3, [r6, r3]
    2d34:	2b00      	cmp	r3, #0
    2d36:	d00e      	beq.n	2d56 <usart_init+0x25e>
				status_code =
    2d38:	9b06      	ldr	r3, [sp, #24]
    2d3a:	9300      	str	r3, [sp, #0]
    2d3c:	9b07      	ldr	r3, [sp, #28]
    2d3e:	220e      	movs	r2, #14
    2d40:	a906      	add	r1, sp, #24
    2d42:	468c      	mov	ip, r1
    2d44:	4462      	add	r2, ip
    2d46:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2d48:	6a30      	ldr	r0, [r6, #32]
    2d4a:	4f34      	ldr	r7, [pc, #208]	; (2e1c <usart_init+0x324>)
    2d4c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2d4e:	2800      	cmp	r0, #0
    2d50:	d000      	beq.n	2d54 <usart_init+0x25c>
    2d52:	e6e4      	b.n	2b1e <usart_init+0x26>
    2d54:	e754      	b.n	2c00 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    2d56:	6a33      	ldr	r3, [r6, #32]
    2d58:	001f      	movs	r7, r3
    2d5a:	b2c0      	uxtb	r0, r0
    2d5c:	4b2d      	ldr	r3, [pc, #180]	; (2e14 <usart_init+0x31c>)
    2d5e:	4798      	blx	r3
    2d60:	0001      	movs	r1, r0
				status_code =
    2d62:	9b06      	ldr	r3, [sp, #24]
    2d64:	9300      	str	r3, [sp, #0]
    2d66:	9b07      	ldr	r3, [sp, #28]
    2d68:	220e      	movs	r2, #14
    2d6a:	a806      	add	r0, sp, #24
    2d6c:	4684      	mov	ip, r0
    2d6e:	4462      	add	r2, ip
    2d70:	0038      	movs	r0, r7
    2d72:	4f2a      	ldr	r7, [pc, #168]	; (2e1c <usart_init+0x324>)
    2d74:	47b8      	blx	r7
    2d76:	e7ea      	b.n	2d4e <usart_init+0x256>
		if(config->lin_slave_enable) {
    2d78:	7ef3      	ldrb	r3, [r6, #27]
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d100      	bne.n	2d80 <usart_init+0x288>
    2d7e:	e77d      	b.n	2c7c <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2d80:	2380      	movs	r3, #128	; 0x80
    2d82:	04db      	lsls	r3, r3, #19
    2d84:	431f      	orrs	r7, r3
    2d86:	e779      	b.n	2c7c <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2d88:	0020      	movs	r0, r4
    2d8a:	4b25      	ldr	r3, [pc, #148]	; (2e20 <usart_init+0x328>)
    2d8c:	4798      	blx	r3
    2d8e:	e007      	b.n	2da0 <usart_init+0x2a8>
    2d90:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2d92:	2f04      	cmp	r7, #4
    2d94:	d00d      	beq.n	2db2 <usart_init+0x2ba>
    2d96:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2d98:	00bb      	lsls	r3, r7, #2
    2d9a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2d9c:	2800      	cmp	r0, #0
    2d9e:	d0f3      	beq.n	2d88 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    2da0:	1c43      	adds	r3, r0, #1
    2da2:	d0f5      	beq.n	2d90 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2da4:	a90e      	add	r1, sp, #56	; 0x38
    2da6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2da8:	0c00      	lsrs	r0, r0, #16
    2daa:	b2c0      	uxtb	r0, r0
    2dac:	4b1d      	ldr	r3, [pc, #116]	; (2e24 <usart_init+0x32c>)
    2dae:	4798      	blx	r3
    2db0:	e7ee      	b.n	2d90 <usart_init+0x298>
		module->callback[i]            = NULL;
    2db2:	2300      	movs	r3, #0
    2db4:	60eb      	str	r3, [r5, #12]
    2db6:	612b      	str	r3, [r5, #16]
    2db8:	616b      	str	r3, [r5, #20]
    2dba:	61ab      	str	r3, [r5, #24]
    2dbc:	61eb      	str	r3, [r5, #28]
    2dbe:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2dc0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2dc2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2dc4:	2200      	movs	r2, #0
    2dc6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2dc8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2dca:	3330      	adds	r3, #48	; 0x30
    2dcc:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2dce:	3301      	adds	r3, #1
    2dd0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2dd2:	3301      	adds	r3, #1
    2dd4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2dd6:	3301      	adds	r3, #1
    2dd8:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2dda:	6828      	ldr	r0, [r5, #0]
    2ddc:	4b07      	ldr	r3, [pc, #28]	; (2dfc <usart_init+0x304>)
    2dde:	4798      	blx	r3
    2de0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2de2:	4911      	ldr	r1, [pc, #68]	; (2e28 <usart_init+0x330>)
    2de4:	4b11      	ldr	r3, [pc, #68]	; (2e2c <usart_init+0x334>)
    2de6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2de8:	00a4      	lsls	r4, r4, #2
    2dea:	4b11      	ldr	r3, [pc, #68]	; (2e30 <usart_init+0x338>)
    2dec:	50e5      	str	r5, [r4, r3]
	return status_code;
    2dee:	2000      	movs	r0, #0
    2df0:	e695      	b.n	2b1e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2df2:	2310      	movs	r3, #16
    2df4:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2df6:	2300      	movs	r3, #0
    2df8:	9307      	str	r3, [sp, #28]
    2dfa:	e6ec      	b.n	2bd6 <usart_init+0xde>
    2dfc:	00002ac1 	.word	0x00002ac1
    2e00:	40000400 	.word	0x40000400
    2e04:	00003bdd 	.word	0x00003bdd
    2e08:	00003b51 	.word	0x00003b51
    2e0c:	000028fd 	.word	0x000028fd
    2e10:	41002000 	.word	0x41002000
    2e14:	00003bf9 	.word	0x00003bf9
    2e18:	0000283f 	.word	0x0000283f
    2e1c:	00002869 	.word	0x00002869
    2e20:	00002949 	.word	0x00002949
    2e24:	00003cd5 	.word	0x00003cd5
    2e28:	00002ec5 	.word	0x00002ec5
    2e2c:	00003559 	.word	0x00003559
    2e30:	200007d0 	.word	0x200007d0

00002e34 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2e34:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2e36:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2e38:	2a00      	cmp	r2, #0
    2e3a:	d101      	bne.n	2e40 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2e3c:	0018      	movs	r0, r3
    2e3e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2e40:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2e42:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2e44:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    2e46:	2a00      	cmp	r2, #0
    2e48:	d1f8      	bne.n	2e3c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2e4a:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    2e4c:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2e4e:	2102      	movs	r1, #2
    2e50:	7e13      	ldrb	r3, [r2, #24]
    2e52:	420b      	tst	r3, r1
    2e54:	d0fc      	beq.n	2e50 <usart_write_wait+0x1c>
	return STATUS_OK;
    2e56:	2300      	movs	r3, #0
    2e58:	e7f0      	b.n	2e3c <usart_write_wait+0x8>

00002e5a <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2e5a:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2e5c:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2e5e:	2a00      	cmp	r2, #0
    2e60:	d101      	bne.n	2e66 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2e62:	0018      	movs	r0, r3
    2e64:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2e66:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2e68:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2e6a:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2e6c:	2a00      	cmp	r2, #0
    2e6e:	d1f8      	bne.n	2e62 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2e70:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2e72:	7e10      	ldrb	r0, [r2, #24]
    2e74:	0740      	lsls	r0, r0, #29
    2e76:	d5f4      	bpl.n	2e62 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2e78:	8b53      	ldrh	r3, [r2, #26]
    2e7a:	b2db      	uxtb	r3, r3
	if (error_code) {
    2e7c:	0698      	lsls	r0, r3, #26
    2e7e:	d01d      	beq.n	2ebc <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2e80:	0798      	lsls	r0, r3, #30
    2e82:	d503      	bpl.n	2e8c <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2e84:	2302      	movs	r3, #2
    2e86:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2e88:	3318      	adds	r3, #24
    2e8a:	e7ea      	b.n	2e62 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2e8c:	0758      	lsls	r0, r3, #29
    2e8e:	d503      	bpl.n	2e98 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2e90:	2304      	movs	r3, #4
    2e92:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2e94:	331a      	adds	r3, #26
    2e96:	e7e4      	b.n	2e62 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2e98:	07d8      	lsls	r0, r3, #31
    2e9a:	d503      	bpl.n	2ea4 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2e9c:	2301      	movs	r3, #1
    2e9e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2ea0:	3312      	adds	r3, #18
    2ea2:	e7de      	b.n	2e62 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2ea4:	06d8      	lsls	r0, r3, #27
    2ea6:	d503      	bpl.n	2eb0 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2ea8:	2310      	movs	r3, #16
    2eaa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2eac:	3332      	adds	r3, #50	; 0x32
    2eae:	e7d8      	b.n	2e62 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2eb0:	069b      	lsls	r3, r3, #26
    2eb2:	d503      	bpl.n	2ebc <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2eb4:	2320      	movs	r3, #32
    2eb6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2eb8:	3321      	adds	r3, #33	; 0x21
    2eba:	e7d2      	b.n	2e62 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2ebc:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2ebe:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2ec0:	2300      	movs	r3, #0
    2ec2:	e7ce      	b.n	2e62 <usart_read_wait+0x8>

00002ec4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2ec6:	0080      	lsls	r0, r0, #2
    2ec8:	4b62      	ldr	r3, [pc, #392]	; (3054 <_usart_interrupt_handler+0x190>)
    2eca:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2ecc:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2ece:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	d1fc      	bne.n	2ece <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2ed4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2ed6:	7da6      	ldrb	r6, [r4, #22]
    2ed8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2eda:	2330      	movs	r3, #48	; 0x30
    2edc:	5ceb      	ldrb	r3, [r5, r3]
    2ede:	2231      	movs	r2, #49	; 0x31
    2ee0:	5caf      	ldrb	r7, [r5, r2]
    2ee2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2ee4:	07f3      	lsls	r3, r6, #31
    2ee6:	d522      	bpl.n	2f2e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2ee8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2eea:	b29b      	uxth	r3, r3
    2eec:	2b00      	cmp	r3, #0
    2eee:	d01c      	beq.n	2f2a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2ef0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2ef2:	7813      	ldrb	r3, [r2, #0]
    2ef4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2ef6:	1c51      	adds	r1, r2, #1
    2ef8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2efa:	7969      	ldrb	r1, [r5, #5]
    2efc:	2901      	cmp	r1, #1
    2efe:	d00e      	beq.n	2f1e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2f00:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2f02:	05db      	lsls	r3, r3, #23
    2f04:	0ddb      	lsrs	r3, r3, #23
    2f06:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2f08:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2f0a:	3b01      	subs	r3, #1
    2f0c:	b29b      	uxth	r3, r3
    2f0e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2f10:	2b00      	cmp	r3, #0
    2f12:	d10c      	bne.n	2f2e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2f14:	3301      	adds	r3, #1
    2f16:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2f18:	3301      	adds	r3, #1
    2f1a:	75a3      	strb	r3, [r4, #22]
    2f1c:	e007      	b.n	2f2e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2f1e:	7851      	ldrb	r1, [r2, #1]
    2f20:	0209      	lsls	r1, r1, #8
    2f22:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2f24:	3202      	adds	r2, #2
    2f26:	62aa      	str	r2, [r5, #40]	; 0x28
    2f28:	e7eb      	b.n	2f02 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2f2a:	2301      	movs	r3, #1
    2f2c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2f2e:	07b3      	lsls	r3, r6, #30
    2f30:	d506      	bpl.n	2f40 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2f32:	2302      	movs	r3, #2
    2f34:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2f36:	2200      	movs	r2, #0
    2f38:	3331      	adds	r3, #49	; 0x31
    2f3a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2f3c:	07fb      	lsls	r3, r7, #31
    2f3e:	d41a      	bmi.n	2f76 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2f40:	0773      	lsls	r3, r6, #29
    2f42:	d565      	bpl.n	3010 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2f44:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2f46:	b29b      	uxth	r3, r3
    2f48:	2b00      	cmp	r3, #0
    2f4a:	d05f      	beq.n	300c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2f4c:	8b63      	ldrh	r3, [r4, #26]
    2f4e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2f50:	071a      	lsls	r2, r3, #28
    2f52:	d414      	bmi.n	2f7e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2f54:	223f      	movs	r2, #63	; 0x3f
    2f56:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2f58:	2b00      	cmp	r3, #0
    2f5a:	d034      	beq.n	2fc6 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2f5c:	079a      	lsls	r2, r3, #30
    2f5e:	d511      	bpl.n	2f84 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2f60:	221a      	movs	r2, #26
    2f62:	2332      	movs	r3, #50	; 0x32
    2f64:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2f66:	3b30      	subs	r3, #48	; 0x30
    2f68:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2f6a:	077b      	lsls	r3, r7, #29
    2f6c:	d550      	bpl.n	3010 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2f6e:	0028      	movs	r0, r5
    2f70:	696b      	ldr	r3, [r5, #20]
    2f72:	4798      	blx	r3
    2f74:	e04c      	b.n	3010 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2f76:	0028      	movs	r0, r5
    2f78:	68eb      	ldr	r3, [r5, #12]
    2f7a:	4798      	blx	r3
    2f7c:	e7e0      	b.n	2f40 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2f7e:	2237      	movs	r2, #55	; 0x37
    2f80:	4013      	ands	r3, r2
    2f82:	e7e9      	b.n	2f58 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2f84:	075a      	lsls	r2, r3, #29
    2f86:	d505      	bpl.n	2f94 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2f88:	221e      	movs	r2, #30
    2f8a:	2332      	movs	r3, #50	; 0x32
    2f8c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2f8e:	3b2e      	subs	r3, #46	; 0x2e
    2f90:	8363      	strh	r3, [r4, #26]
    2f92:	e7ea      	b.n	2f6a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2f94:	07da      	lsls	r2, r3, #31
    2f96:	d505      	bpl.n	2fa4 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2f98:	2213      	movs	r2, #19
    2f9a:	2332      	movs	r3, #50	; 0x32
    2f9c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2f9e:	3b31      	subs	r3, #49	; 0x31
    2fa0:	8363      	strh	r3, [r4, #26]
    2fa2:	e7e2      	b.n	2f6a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2fa4:	06da      	lsls	r2, r3, #27
    2fa6:	d505      	bpl.n	2fb4 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2fa8:	2242      	movs	r2, #66	; 0x42
    2faa:	2332      	movs	r3, #50	; 0x32
    2fac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2fae:	3b22      	subs	r3, #34	; 0x22
    2fb0:	8363      	strh	r3, [r4, #26]
    2fb2:	e7da      	b.n	2f6a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2fb4:	2220      	movs	r2, #32
    2fb6:	421a      	tst	r2, r3
    2fb8:	d0d7      	beq.n	2f6a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2fba:	3221      	adds	r2, #33	; 0x21
    2fbc:	2332      	movs	r3, #50	; 0x32
    2fbe:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2fc0:	3b12      	subs	r3, #18
    2fc2:	8363      	strh	r3, [r4, #26]
    2fc4:	e7d1      	b.n	2f6a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2fc6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2fc8:	05db      	lsls	r3, r3, #23
    2fca:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2fcc:	b2da      	uxtb	r2, r3
    2fce:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2fd0:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2fd2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2fd4:	1c51      	adds	r1, r2, #1
    2fd6:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2fd8:	7969      	ldrb	r1, [r5, #5]
    2fda:	2901      	cmp	r1, #1
    2fdc:	d010      	beq.n	3000 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2fde:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2fe0:	3b01      	subs	r3, #1
    2fe2:	b29b      	uxth	r3, r3
    2fe4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2fe6:	2b00      	cmp	r3, #0
    2fe8:	d112      	bne.n	3010 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2fea:	3304      	adds	r3, #4
    2fec:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2fee:	2200      	movs	r2, #0
    2ff0:	332e      	adds	r3, #46	; 0x2e
    2ff2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2ff4:	07bb      	lsls	r3, r7, #30
    2ff6:	d50b      	bpl.n	3010 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2ff8:	0028      	movs	r0, r5
    2ffa:	692b      	ldr	r3, [r5, #16]
    2ffc:	4798      	blx	r3
    2ffe:	e007      	b.n	3010 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    3000:	0a1b      	lsrs	r3, r3, #8
    3002:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    3004:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3006:	3301      	adds	r3, #1
    3008:	626b      	str	r3, [r5, #36]	; 0x24
    300a:	e7e8      	b.n	2fde <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    300c:	2304      	movs	r3, #4
    300e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    3010:	06f3      	lsls	r3, r6, #27
    3012:	d504      	bpl.n	301e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    3014:	2310      	movs	r3, #16
    3016:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    3018:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    301a:	06fb      	lsls	r3, r7, #27
    301c:	d40e      	bmi.n	303c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    301e:	06b3      	lsls	r3, r6, #26
    3020:	d504      	bpl.n	302c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    3022:	2320      	movs	r3, #32
    3024:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    3026:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    3028:	073b      	lsls	r3, r7, #28
    302a:	d40b      	bmi.n	3044 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    302c:	0733      	lsls	r3, r6, #28
    302e:	d504      	bpl.n	303a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    3030:	2308      	movs	r3, #8
    3032:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    3034:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    3036:	06bb      	lsls	r3, r7, #26
    3038:	d408      	bmi.n	304c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    303a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    303c:	0028      	movs	r0, r5
    303e:	69eb      	ldr	r3, [r5, #28]
    3040:	4798      	blx	r3
    3042:	e7ec      	b.n	301e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    3044:	0028      	movs	r0, r5
    3046:	69ab      	ldr	r3, [r5, #24]
    3048:	4798      	blx	r3
    304a:	e7ef      	b.n	302c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    304c:	6a2b      	ldr	r3, [r5, #32]
    304e:	0028      	movs	r0, r5
    3050:	4798      	blx	r3
}
    3052:	e7f2      	b.n	303a <_usart_interrupt_handler+0x176>
    3054:	200007d0 	.word	0x200007d0

00003058 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    3058:	b5f0      	push	{r4, r5, r6, r7, lr}
    305a:	b08b      	sub	sp, #44	; 0x2c
    305c:	0005      	movs	r5, r0
    305e:	000c      	movs	r4, r1
    3060:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3062:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3064:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    3066:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3068:	079b      	lsls	r3, r3, #30
    306a:	d501      	bpl.n	3070 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    306c:	b00b      	add	sp, #44	; 0x2c
    306e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3070:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    3072:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3074:	07db      	lsls	r3, r3, #31
    3076:	d4f9      	bmi.n	306c <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3078:	0008      	movs	r0, r1
    307a:	4b6f      	ldr	r3, [pc, #444]	; (3238 <spi_init+0x1e0>)
    307c:	4798      	blx	r3
    307e:	4a6f      	ldr	r2, [pc, #444]	; (323c <spi_init+0x1e4>)
    3080:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3082:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3084:	2301      	movs	r3, #1
    3086:	40bb      	lsls	r3, r7
    3088:	430b      	orrs	r3, r1
    308a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    308c:	a909      	add	r1, sp, #36	; 0x24
    308e:	2724      	movs	r7, #36	; 0x24
    3090:	5df3      	ldrb	r3, [r6, r7]
    3092:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3094:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3096:	b2c3      	uxtb	r3, r0
    3098:	9301      	str	r3, [sp, #4]
    309a:	0018      	movs	r0, r3
    309c:	4b68      	ldr	r3, [pc, #416]	; (3240 <spi_init+0x1e8>)
    309e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    30a0:	9801      	ldr	r0, [sp, #4]
    30a2:	4b68      	ldr	r3, [pc, #416]	; (3244 <spi_init+0x1ec>)
    30a4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    30a6:	5df0      	ldrb	r0, [r6, r7]
    30a8:	2100      	movs	r1, #0
    30aa:	4b67      	ldr	r3, [pc, #412]	; (3248 <spi_init+0x1f0>)
    30ac:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    30ae:	7833      	ldrb	r3, [r6, #0]
    30b0:	2b01      	cmp	r3, #1
    30b2:	d03f      	beq.n	3134 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    30b4:	7833      	ldrb	r3, [r6, #0]
    30b6:	2b00      	cmp	r3, #0
    30b8:	d103      	bne.n	30c2 <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    30ba:	6823      	ldr	r3, [r4, #0]
    30bc:	2208      	movs	r2, #8
    30be:	4313      	orrs	r3, r2
    30c0:	6023      	str	r3, [r4, #0]
    30c2:	002b      	movs	r3, r5
    30c4:	330c      	adds	r3, #12
    30c6:	0029      	movs	r1, r5
    30c8:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    30ca:	2200      	movs	r2, #0
    30cc:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    30ce:	428b      	cmp	r3, r1
    30d0:	d1fc      	bne.n	30cc <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    30d2:	2300      	movs	r3, #0
    30d4:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    30d6:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    30d8:	2400      	movs	r4, #0
    30da:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    30dc:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    30de:	3336      	adds	r3, #54	; 0x36
    30e0:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    30e2:	3301      	adds	r3, #1
    30e4:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    30e6:	3301      	adds	r3, #1
    30e8:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    30ea:	3b35      	subs	r3, #53	; 0x35
    30ec:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    30ee:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    30f0:	6828      	ldr	r0, [r5, #0]
    30f2:	4b51      	ldr	r3, [pc, #324]	; (3238 <spi_init+0x1e0>)
    30f4:	4798      	blx	r3
    30f6:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    30f8:	4954      	ldr	r1, [pc, #336]	; (324c <spi_init+0x1f4>)
    30fa:	4b55      	ldr	r3, [pc, #340]	; (3250 <spi_init+0x1f8>)
    30fc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    30fe:	00bf      	lsls	r7, r7, #2
    3100:	4b54      	ldr	r3, [pc, #336]	; (3254 <spi_init+0x1fc>)
    3102:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3104:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3106:	ab04      	add	r3, sp, #16
    3108:	2280      	movs	r2, #128	; 0x80
    310a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    310c:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    310e:	3a7f      	subs	r2, #127	; 0x7f
    3110:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3112:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    3114:	7833      	ldrb	r3, [r6, #0]
    3116:	2b00      	cmp	r3, #0
    3118:	d102      	bne.n	3120 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    311a:	2200      	movs	r2, #0
    311c:	ab04      	add	r3, sp, #16
    311e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    3120:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3122:	9305      	str	r3, [sp, #20]
    3124:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3126:	9306      	str	r3, [sp, #24]
    3128:	6b33      	ldr	r3, [r6, #48]	; 0x30
    312a:	9307      	str	r3, [sp, #28]
    312c:	6b73      	ldr	r3, [r6, #52]	; 0x34
    312e:	9308      	str	r3, [sp, #32]
    3130:	2400      	movs	r4, #0
    3132:	e00b      	b.n	314c <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    3134:	6823      	ldr	r3, [r4, #0]
    3136:	220c      	movs	r2, #12
    3138:	4313      	orrs	r3, r2
    313a:	6023      	str	r3, [r4, #0]
    313c:	e7ba      	b.n	30b4 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    313e:	0038      	movs	r0, r7
    3140:	4b45      	ldr	r3, [pc, #276]	; (3258 <spi_init+0x200>)
    3142:	4798      	blx	r3
    3144:	e00a      	b.n	315c <spi_init+0x104>
    3146:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    3148:	2c04      	cmp	r4, #4
    314a:	d010      	beq.n	316e <spi_init+0x116>
    314c:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    314e:	00a3      	lsls	r3, r4, #2
    3150:	aa02      	add	r2, sp, #8
    3152:	200c      	movs	r0, #12
    3154:	1812      	adds	r2, r2, r0
    3156:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    3158:	2800      	cmp	r0, #0
    315a:	d0f0      	beq.n	313e <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    315c:	1c43      	adds	r3, r0, #1
    315e:	d0f2      	beq.n	3146 <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3160:	a904      	add	r1, sp, #16
    3162:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3164:	0c00      	lsrs	r0, r0, #16
    3166:	b2c0      	uxtb	r0, r0
    3168:	4b3c      	ldr	r3, [pc, #240]	; (325c <spi_init+0x204>)
    316a:	4798      	blx	r3
    316c:	e7eb      	b.n	3146 <spi_init+0xee>
	module->mode             = config->mode;
    316e:	7833      	ldrb	r3, [r6, #0]
    3170:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    3172:	7c33      	ldrb	r3, [r6, #16]
    3174:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    3176:	7cb3      	ldrb	r3, [r6, #18]
    3178:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    317a:	7d33      	ldrb	r3, [r6, #20]
    317c:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    317e:	2200      	movs	r2, #0
    3180:	ab02      	add	r3, sp, #8
    3182:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    3184:	7833      	ldrb	r3, [r6, #0]
    3186:	2b01      	cmp	r3, #1
    3188:	d012      	beq.n	31b0 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    318a:	7833      	ldrb	r3, [r6, #0]
    318c:	2b00      	cmp	r3, #0
    318e:	d126      	bne.n	31de <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    3190:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    3192:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    3194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    3196:	7ff1      	ldrb	r1, [r6, #31]
    3198:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    319a:	7fb4      	ldrb	r4, [r6, #30]
    319c:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    319e:	4319      	orrs	r1, r3
    31a0:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    31a2:	2320      	movs	r3, #32
    31a4:	5cf3      	ldrb	r3, [r6, r3]
    31a6:	2b00      	cmp	r3, #0
    31a8:	d01b      	beq.n	31e2 <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    31aa:	2340      	movs	r3, #64	; 0x40
    31ac:	431a      	orrs	r2, r3
    31ae:	e018      	b.n	31e2 <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    31b0:	6828      	ldr	r0, [r5, #0]
    31b2:	4b21      	ldr	r3, [pc, #132]	; (3238 <spi_init+0x1e0>)
    31b4:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    31b6:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    31b8:	b2c0      	uxtb	r0, r0
    31ba:	4b29      	ldr	r3, [pc, #164]	; (3260 <spi_init+0x208>)
    31bc:	4798      	blx	r3
    31be:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    31c0:	ab02      	add	r3, sp, #8
    31c2:	1d9a      	adds	r2, r3, #6
    31c4:	69b0      	ldr	r0, [r6, #24]
    31c6:	4b27      	ldr	r3, [pc, #156]	; (3264 <spi_init+0x20c>)
    31c8:	4798      	blx	r3
    31ca:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    31cc:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    31ce:	2b00      	cmp	r3, #0
    31d0:	d000      	beq.n	31d4 <spi_init+0x17c>
    31d2:	e74b      	b.n	306c <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    31d4:	ab02      	add	r3, sp, #8
    31d6:	3306      	adds	r3, #6
    31d8:	781b      	ldrb	r3, [r3, #0]
    31da:	733b      	strb	r3, [r7, #12]
    31dc:	e7d5      	b.n	318a <spi_init+0x132>
	uint32_t ctrlb = 0;
    31de:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    31e0:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    31e2:	6873      	ldr	r3, [r6, #4]
    31e4:	68b1      	ldr	r1, [r6, #8]
    31e6:	430b      	orrs	r3, r1
    31e8:	68f1      	ldr	r1, [r6, #12]
    31ea:	430b      	orrs	r3, r1
    31ec:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    31ee:	7c31      	ldrb	r1, [r6, #16]
    31f0:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    31f2:	7c71      	ldrb	r1, [r6, #17]
    31f4:	2900      	cmp	r1, #0
    31f6:	d103      	bne.n	3200 <spi_init+0x1a8>
    31f8:	491b      	ldr	r1, [pc, #108]	; (3268 <spi_init+0x210>)
    31fa:	7889      	ldrb	r1, [r1, #2]
    31fc:	0789      	lsls	r1, r1, #30
    31fe:	d501      	bpl.n	3204 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3200:	2180      	movs	r1, #128	; 0x80
    3202:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    3204:	7cb1      	ldrb	r1, [r6, #18]
    3206:	2900      	cmp	r1, #0
    3208:	d002      	beq.n	3210 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    320a:	2180      	movs	r1, #128	; 0x80
    320c:	0289      	lsls	r1, r1, #10
    320e:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    3210:	7cf1      	ldrb	r1, [r6, #19]
    3212:	2900      	cmp	r1, #0
    3214:	d002      	beq.n	321c <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3216:	2180      	movs	r1, #128	; 0x80
    3218:	0089      	lsls	r1, r1, #2
    321a:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    321c:	7d31      	ldrb	r1, [r6, #20]
    321e:	2900      	cmp	r1, #0
    3220:	d002      	beq.n	3228 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3222:	2180      	movs	r1, #128	; 0x80
    3224:	0189      	lsls	r1, r1, #6
    3226:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    3228:	6839      	ldr	r1, [r7, #0]
    322a:	430b      	orrs	r3, r1
    322c:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    322e:	687b      	ldr	r3, [r7, #4]
    3230:	431a      	orrs	r2, r3
    3232:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    3234:	2000      	movs	r0, #0
    3236:	e719      	b.n	306c <spi_init+0x14>
    3238:	00002ac1 	.word	0x00002ac1
    323c:	40000400 	.word	0x40000400
    3240:	00003bdd 	.word	0x00003bdd
    3244:	00003b51 	.word	0x00003b51
    3248:	000028fd 	.word	0x000028fd
    324c:	00003331 	.word	0x00003331
    3250:	00003559 	.word	0x00003559
    3254:	200007d0 	.word	0x200007d0
    3258:	00002949 	.word	0x00002949
    325c:	00003cd5 	.word	0x00003cd5
    3260:	00003bf9 	.word	0x00003bf9
    3264:	0000283f 	.word	0x0000283f
    3268:	41002000 	.word	0x41002000

0000326c <spi_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    326c:	1c93      	adds	r3, r2, #2
    326e:	009b      	lsls	r3, r3, #2
    3270:	18c3      	adds	r3, r0, r3
    3272:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
    3274:	2136      	movs	r1, #54	; 0x36
    3276:	2301      	movs	r3, #1
    3278:	4093      	lsls	r3, r2
    327a:	001a      	movs	r2, r3
    327c:	5c43      	ldrb	r3, [r0, r1]
    327e:	4313      	orrs	r3, r2
    3280:	5443      	strb	r3, [r0, r1]
}
    3282:	4770      	bx	lr

00003284 <spi_write_buffer_job>:
 */
enum status_code spi_write_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    3284:	b510      	push	{r4, lr}
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    3286:	2317      	movs	r3, #23
	if (length == 0) {
    3288:	2a00      	cmp	r2, #0
    328a:	d101      	bne.n	3290 <spi_write_buffer_job+0xc>

	/* Issue internal write */
	_spi_write_buffer(module, tx_data, length);

	return STATUS_OK;
}
    328c:	0018      	movs	r0, r3
    328e:	bd10      	pop	{r4, pc}
	if (module->status == STATUS_BUSY) {
    3290:	3321      	adds	r3, #33	; 0x21
    3292:	5cc4      	ldrb	r4, [r0, r3]
		return STATUS_BUSY;
    3294:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    3296:	2c05      	cmp	r4, #5
    3298:	d0f8      	beq.n	328c <spi_write_buffer_job+0x8>
	module->remaining_tx_buffer_length = length;
    329a:	8682      	strh	r2, [r0, #52]	; 0x34
	module->remaining_dummy_buffer_length = length;
    329c:	8642      	strh	r2, [r0, #50]	; 0x32
	module->tx_buffer_ptr = tx_data;
    329e:	62c1      	str	r1, [r0, #44]	; 0x2c
	module->status = STATUS_BUSY;
    32a0:	2205      	movs	r2, #5
    32a2:	3333      	adds	r3, #51	; 0x33
    32a4:	54c2      	strb	r2, [r0, r3]
	module->dir = SPI_DIRECTION_WRITE;
    32a6:	3b37      	subs	r3, #55	; 0x37
    32a8:	7243      	strb	r3, [r0, #9]
	SercomSpi *const hw = &(module->hw->SPI);
    32aa:	6803      	ldr	r3, [r0, #0]
	if (module->mode == SPI_MODE_SLAVE) {
    32ac:	7942      	ldrb	r2, [r0, #5]
    32ae:	2a00      	cmp	r2, #0
    32b0:	d102      	bne.n	32b8 <spi_write_buffer_job+0x34>
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    32b2:	3202      	adds	r2, #2
    32b4:	761a      	strb	r2, [r3, #24]
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    32b6:	759a      	strb	r2, [r3, #22]
	if (module->receiver_enabled) {
    32b8:	79c2      	ldrb	r2, [r0, #7]
    32ba:	2a00      	cmp	r2, #0
    32bc:	d103      	bne.n	32c6 <spi_write_buffer_job+0x42>
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    32be:	2201      	movs	r2, #1
    32c0:	759a      	strb	r2, [r3, #22]
	return STATUS_OK;
    32c2:	2300      	movs	r3, #0
    32c4:	e7e2      	b.n	328c <spi_write_buffer_job+0x8>
		hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
    32c6:	2205      	movs	r2, #5
    32c8:	759a      	strb	r2, [r3, #22]
	return STATUS_OK;
    32ca:	2300      	movs	r3, #0
    32cc:	e7de      	b.n	328c <spi_write_buffer_job+0x8>
	...

000032d0 <spi_read_buffer_job>:
enum status_code spi_read_buffer_job(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    32d0:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    32d2:	2417      	movs	r4, #23
	if (length == 0) {
    32d4:	2a00      	cmp	r2, #0
    32d6:	d101      	bne.n	32dc <spi_read_buffer_job+0xc>

	dummy_write = dummy;
	/* Issue internal read */
	_spi_read_buffer(module, rx_data, length);
	return STATUS_OK;
}
    32d8:	0020      	movs	r0, r4
    32da:	bd30      	pop	{r4, r5, pc}
	if (!(module->receiver_enabled)) {
    32dc:	79c5      	ldrb	r5, [r0, #7]
		return STATUS_ERR_DENIED;
    32de:	3405      	adds	r4, #5
	if (!(module->receiver_enabled)) {
    32e0:	2d00      	cmp	r5, #0
    32e2:	d0f9      	beq.n	32d8 <spi_read_buffer_job+0x8>
	if (module->status == STATUS_BUSY) {
    32e4:	341c      	adds	r4, #28
    32e6:	5d05      	ldrb	r5, [r0, r4]
		return STATUS_BUSY;
    32e8:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    32ea:	2d05      	cmp	r5, #5
    32ec:	d0f4      	beq.n	32d8 <spi_read_buffer_job+0x8>
	dummy_write = dummy;
    32ee:	4c0f      	ldr	r4, [pc, #60]	; (332c <spi_read_buffer_job+0x5c>)
    32f0:	8023      	strh	r3, [r4, #0]
	module->remaining_rx_buffer_length = length;
    32f2:	8602      	strh	r2, [r0, #48]	; 0x30
	module->remaining_dummy_buffer_length = length;
    32f4:	8642      	strh	r2, [r0, #50]	; 0x32
	module->rx_buffer_ptr = rx_data;
    32f6:	6281      	str	r1, [r0, #40]	; 0x28
	module->status = STATUS_BUSY;
    32f8:	2205      	movs	r2, #5
    32fa:	2338      	movs	r3, #56	; 0x38
    32fc:	54c2      	strb	r2, [r0, r3]
	module->dir = SPI_DIRECTION_READ;
    32fe:	2300      	movs	r3, #0
    3300:	7243      	strb	r3, [r0, #9]
	SercomSpi *const hw = &(module->hw->SPI);
    3302:	6803      	ldr	r3, [r0, #0]
	if (module->mode == SPI_MODE_MASTER && module->dir == SPI_DIRECTION_READ) {
    3304:	7942      	ldrb	r2, [r0, #5]
    3306:	2a01      	cmp	r2, #1
    3308:	d009      	beq.n	331e <spi_read_buffer_job+0x4e>
	if (module->mode == SPI_MODE_SLAVE) {
    330a:	2a00      	cmp	r2, #0
    330c:	d10c      	bne.n	3328 <spi_read_buffer_job+0x58>
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    330e:	3202      	adds	r2, #2
    3310:	761a      	strb	r2, [r3, #24]
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    3312:	3206      	adds	r2, #6
    3314:	761a      	strb	r2, [r3, #24]
		tmp_intenset |= SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    3316:	3206      	adds	r2, #6
	hw->INTENSET.reg = tmp_intenset;
    3318:	759a      	strb	r2, [r3, #22]
	return STATUS_OK;
    331a:	2400      	movs	r4, #0
    331c:	e7dc      	b.n	32d8 <spi_read_buffer_job+0x8>
	if (module->mode == SPI_MODE_MASTER && module->dir == SPI_DIRECTION_READ) {
    331e:	7a42      	ldrb	r2, [r0, #9]
		tmp_intenset |= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3320:	4251      	negs	r1, r2
    3322:	414a      	adcs	r2, r1
    3324:	3204      	adds	r2, #4
    3326:	e7f7      	b.n	3318 <spi_read_buffer_job+0x48>
	tmp_intenset = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3328:	2204      	movs	r2, #4
    332a:	e7f5      	b.n	3318 <spi_read_buffer_job+0x48>
    332c:	200007cc 	.word	0x200007cc

00003330 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    3330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    3332:	0080      	lsls	r0, r0, #2
    3334:	4b85      	ldr	r3, [pc, #532]	; (354c <_spi_interrupt_handler+0x21c>)
    3336:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3338:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    333a:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    333c:	5ce3      	ldrb	r3, [r4, r3]
    333e:	2236      	movs	r2, #54	; 0x36
    3340:	5ca7      	ldrb	r7, [r4, r2]
    3342:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    3344:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    3346:	7db5      	ldrb	r5, [r6, #22]
    3348:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    334a:	07eb      	lsls	r3, r5, #31
    334c:	d52e      	bpl.n	33ac <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    334e:	7963      	ldrb	r3, [r4, #5]
    3350:	2b01      	cmp	r3, #1
    3352:	d025      	beq.n	33a0 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    3354:	2b00      	cmp	r3, #0
    3356:	d129      	bne.n	33ac <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    3358:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    335a:	2b00      	cmp	r3, #0
    335c:	d026      	beq.n	33ac <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    335e:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3360:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3362:	7813      	ldrb	r3, [r2, #0]
    3364:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    3366:	1c50      	adds	r0, r2, #1
    3368:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    336a:	79a0      	ldrb	r0, [r4, #6]
    336c:	2801      	cmp	r0, #1
    336e:	d100      	bne.n	3372 <_spi_interrupt_handler+0x42>
    3370:	e069      	b.n	3446 <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3372:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    3374:	05db      	lsls	r3, r3, #23
    3376:	0ddb      	lsrs	r3, r3, #23
    3378:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    337a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    337c:	3b01      	subs	r3, #1
    337e:	b29b      	uxth	r3, r3
    3380:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    3382:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3384:	b29b      	uxth	r3, r3
    3386:	2b00      	cmp	r3, #0
    3388:	d110      	bne.n	33ac <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    338a:	3301      	adds	r3, #1
    338c:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    338e:	7a63      	ldrb	r3, [r4, #9]
    3390:	2b01      	cmp	r3, #1
    3392:	d10b      	bne.n	33ac <_spi_interrupt_handler+0x7c>
    3394:	79e3      	ldrb	r3, [r4, #7]
    3396:	2b00      	cmp	r3, #0
    3398:	d108      	bne.n	33ac <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    339a:	3302      	adds	r3, #2
    339c:	75b3      	strb	r3, [r6, #22]
    339e:	e005      	b.n	33ac <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    33a0:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    33a2:	2b00      	cmp	r3, #0
    33a4:	d03e      	beq.n	3424 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    33a6:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    33a8:	2b00      	cmp	r3, #0
    33aa:	d1d8      	bne.n	335e <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    33ac:	076b      	lsls	r3, r5, #29
    33ae:	d511      	bpl.n	33d4 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    33b0:	8b73      	ldrh	r3, [r6, #26]
    33b2:	075b      	lsls	r3, r3, #29
    33b4:	d551      	bpl.n	345a <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    33b6:	7a63      	ldrb	r3, [r4, #9]
    33b8:	2b01      	cmp	r3, #1
    33ba:	d008      	beq.n	33ce <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    33bc:	221e      	movs	r2, #30
    33be:	2338      	movs	r3, #56	; 0x38
    33c0:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    33c2:	3b35      	subs	r3, #53	; 0x35
    33c4:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    33c6:	3302      	adds	r3, #2
    33c8:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    33ca:	073b      	lsls	r3, r7, #28
    33cc:	d441      	bmi.n	3452 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    33ce:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    33d0:	2304      	movs	r3, #4
    33d2:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    33d4:	07ab      	lsls	r3, r5, #30
    33d6:	d515      	bpl.n	3404 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    33d8:	7963      	ldrb	r3, [r4, #5]
    33da:	2b00      	cmp	r3, #0
    33dc:	d10e      	bne.n	33fc <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    33de:	3307      	adds	r3, #7
    33e0:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    33e2:	3b05      	subs	r3, #5
    33e4:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    33e6:	3301      	adds	r3, #1
    33e8:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    33ea:	2300      	movs	r3, #0
    33ec:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    33ee:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    33f0:	3338      	adds	r3, #56	; 0x38
    33f2:	2200      	movs	r2, #0
    33f4:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    33f6:	06fb      	lsls	r3, r7, #27
    33f8:	d500      	bpl.n	33fc <_spi_interrupt_handler+0xcc>
    33fa:	e07f      	b.n	34fc <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    33fc:	7963      	ldrb	r3, [r4, #5]
    33fe:	2b01      	cmp	r3, #1
    3400:	d100      	bne.n	3404 <_spi_interrupt_handler+0xd4>
    3402:	e07f      	b.n	3504 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    3404:	072b      	lsls	r3, r5, #28
    3406:	d508      	bpl.n	341a <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    3408:	7963      	ldrb	r3, [r4, #5]
    340a:	2b00      	cmp	r3, #0
    340c:	d105      	bne.n	341a <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    340e:	3308      	adds	r3, #8
    3410:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    3412:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    3414:	06bb      	lsls	r3, r7, #26
    3416:	d500      	bpl.n	341a <_spi_interrupt_handler+0xea>
    3418:	e08a      	b.n	3530 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    341a:	b26d      	sxtb	r5, r5
    341c:	2d00      	cmp	r5, #0
    341e:	da00      	bge.n	3422 <_spi_interrupt_handler+0xf2>
    3420:	e08a      	b.n	3538 <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    3422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    3424:	4b4a      	ldr	r3, [pc, #296]	; (3550 <_spi_interrupt_handler+0x220>)
    3426:	881b      	ldrh	r3, [r3, #0]
    3428:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    342a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    342c:	3b01      	subs	r3, #1
    342e:	b29b      	uxth	r3, r3
    3430:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    3432:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3434:	b29b      	uxth	r3, r3
    3436:	2b00      	cmp	r3, #0
    3438:	d101      	bne.n	343e <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    343a:	3301      	adds	r3, #1
    343c:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    343e:	7963      	ldrb	r3, [r4, #5]
		if (0
    3440:	2b01      	cmp	r3, #1
    3442:	d0b0      	beq.n	33a6 <_spi_interrupt_handler+0x76>
    3444:	e786      	b.n	3354 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    3446:	7850      	ldrb	r0, [r2, #1]
    3448:	0200      	lsls	r0, r0, #8
    344a:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    344c:	3202      	adds	r2, #2
    344e:	62e2      	str	r2, [r4, #44]	; 0x2c
    3450:	e790      	b.n	3374 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    3452:	0020      	movs	r0, r4
    3454:	69a3      	ldr	r3, [r4, #24]
    3456:	4798      	blx	r3
    3458:	e7b9      	b.n	33ce <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    345a:	7a63      	ldrb	r3, [r4, #9]
    345c:	2b01      	cmp	r3, #1
    345e:	d027      	beq.n	34b0 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3460:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    3462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3464:	05db      	lsls	r3, r3, #23
    3466:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    3468:	b2da      	uxtb	r2, r3
    346a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    346c:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    346e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3470:	1c51      	adds	r1, r2, #1
    3472:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3474:	79a1      	ldrb	r1, [r4, #6]
    3476:	2901      	cmp	r1, #1
    3478:	d033      	beq.n	34e2 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    347a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    347c:	3b01      	subs	r3, #1
    347e:	b29b      	uxth	r3, r3
    3480:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    3482:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3484:	b29b      	uxth	r3, r3
    3486:	2b00      	cmp	r3, #0
    3488:	d1a4      	bne.n	33d4 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    348a:	2200      	movs	r2, #0
    348c:	3338      	adds	r3, #56	; 0x38
    348e:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3490:	3b34      	subs	r3, #52	; 0x34
    3492:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    3494:	7a63      	ldrb	r3, [r4, #9]
    3496:	2b02      	cmp	r3, #2
    3498:	d029      	beq.n	34ee <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    349a:	7a63      	ldrb	r3, [r4, #9]
    349c:	2b00      	cmp	r3, #0
    349e:	d000      	beq.n	34a2 <_spi_interrupt_handler+0x172>
    34a0:	e798      	b.n	33d4 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    34a2:	07bb      	lsls	r3, r7, #30
    34a4:	d400      	bmi.n	34a8 <_spi_interrupt_handler+0x178>
    34a6:	e795      	b.n	33d4 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    34a8:	0020      	movs	r0, r4
    34aa:	6923      	ldr	r3, [r4, #16]
    34ac:	4798      	blx	r3
    34ae:	e791      	b.n	33d4 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    34b0:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    34b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    34b4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    34b6:	3b01      	subs	r3, #1
    34b8:	b29b      	uxth	r3, r3
    34ba:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    34bc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    34be:	b29b      	uxth	r3, r3
    34c0:	2b00      	cmp	r3, #0
    34c2:	d000      	beq.n	34c6 <_spi_interrupt_handler+0x196>
    34c4:	e786      	b.n	33d4 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    34c6:	3304      	adds	r3, #4
    34c8:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    34ca:	2200      	movs	r2, #0
    34cc:	3334      	adds	r3, #52	; 0x34
    34ce:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    34d0:	3b35      	subs	r3, #53	; 0x35
    34d2:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    34d4:	07fb      	lsls	r3, r7, #31
    34d6:	d400      	bmi.n	34da <_spi_interrupt_handler+0x1aa>
    34d8:	e77c      	b.n	33d4 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    34da:	0020      	movs	r0, r4
    34dc:	68e3      	ldr	r3, [r4, #12]
    34de:	4798      	blx	r3
    34e0:	e778      	b.n	33d4 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    34e2:	0a1b      	lsrs	r3, r3, #8
    34e4:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    34e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    34e8:	3301      	adds	r3, #1
    34ea:	62a3      	str	r3, [r4, #40]	; 0x28
    34ec:	e7c5      	b.n	347a <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    34ee:	077b      	lsls	r3, r7, #29
    34f0:	d400      	bmi.n	34f4 <_spi_interrupt_handler+0x1c4>
    34f2:	e76f      	b.n	33d4 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    34f4:	0020      	movs	r0, r4
    34f6:	6963      	ldr	r3, [r4, #20]
    34f8:	4798      	blx	r3
    34fa:	e76b      	b.n	33d4 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    34fc:	0020      	movs	r0, r4
    34fe:	69e3      	ldr	r3, [r4, #28]
    3500:	4798      	blx	r3
    3502:	e77b      	b.n	33fc <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3504:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    3506:	2b01      	cmp	r3, #1
    3508:	d000      	beq.n	350c <_spi_interrupt_handler+0x1dc>
    350a:	e786      	b.n	341a <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    350c:	79e3      	ldrb	r3, [r4, #7]
    350e:	2b00      	cmp	r3, #0
    3510:	d000      	beq.n	3514 <_spi_interrupt_handler+0x1e4>
    3512:	e782      	b.n	341a <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3514:	3302      	adds	r3, #2
    3516:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    3518:	3301      	adds	r3, #1
    351a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    351c:	2200      	movs	r2, #0
    351e:	3335      	adds	r3, #53	; 0x35
    3520:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    3522:	07fb      	lsls	r3, r7, #31
    3524:	d400      	bmi.n	3528 <_spi_interrupt_handler+0x1f8>
    3526:	e76d      	b.n	3404 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    3528:	0020      	movs	r0, r4
    352a:	68e3      	ldr	r3, [r4, #12]
    352c:	4798      	blx	r3
    352e:	e769      	b.n	3404 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    3530:	0020      	movs	r0, r4
    3532:	6a23      	ldr	r3, [r4, #32]
    3534:	4798      	blx	r3
    3536:	e770      	b.n	341a <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3538:	2380      	movs	r3, #128	; 0x80
    353a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    353c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    353e:	067b      	lsls	r3, r7, #25
    3540:	d400      	bmi.n	3544 <_spi_interrupt_handler+0x214>
    3542:	e76e      	b.n	3422 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    3544:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3546:	0020      	movs	r0, r4
    3548:	4798      	blx	r3
}
    354a:	e76a      	b.n	3422 <_spi_interrupt_handler+0xf2>
    354c:	200007d0 	.word	0x200007d0
    3550:	200007cc 	.word	0x200007cc

00003554 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    3554:	4770      	bx	lr
	...

00003558 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3558:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    355a:	4b0a      	ldr	r3, [pc, #40]	; (3584 <_sercom_set_handler+0x2c>)
    355c:	781b      	ldrb	r3, [r3, #0]
    355e:	2b00      	cmp	r3, #0
    3560:	d10c      	bne.n	357c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3562:	4f09      	ldr	r7, [pc, #36]	; (3588 <_sercom_set_handler+0x30>)
    3564:	4e09      	ldr	r6, [pc, #36]	; (358c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    3566:	4d0a      	ldr	r5, [pc, #40]	; (3590 <_sercom_set_handler+0x38>)
    3568:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    356a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    356c:	195a      	adds	r2, r3, r5
    356e:	6014      	str	r4, [r2, #0]
    3570:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3572:	2b18      	cmp	r3, #24
    3574:	d1f9      	bne.n	356a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    3576:	2201      	movs	r2, #1
    3578:	4b02      	ldr	r3, [pc, #8]	; (3584 <_sercom_set_handler+0x2c>)
    357a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    357c:	0080      	lsls	r0, r0, #2
    357e:	4b02      	ldr	r3, [pc, #8]	; (3588 <_sercom_set_handler+0x30>)
    3580:	50c1      	str	r1, [r0, r3]
}
    3582:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3584:	200002e6 	.word	0x200002e6
    3588:	200002e8 	.word	0x200002e8
    358c:	00003555 	.word	0x00003555
    3590:	200007d0 	.word	0x200007d0

00003594 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3594:	b500      	push	{lr}
    3596:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3598:	2309      	movs	r3, #9
    359a:	466a      	mov	r2, sp
    359c:	7013      	strb	r3, [r2, #0]
    359e:	3301      	adds	r3, #1
    35a0:	7053      	strb	r3, [r2, #1]
    35a2:	3301      	adds	r3, #1
    35a4:	7093      	strb	r3, [r2, #2]
    35a6:	3301      	adds	r3, #1
    35a8:	70d3      	strb	r3, [r2, #3]
    35aa:	3301      	adds	r3, #1
    35ac:	7113      	strb	r3, [r2, #4]
    35ae:	3301      	adds	r3, #1
    35b0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    35b2:	4b03      	ldr	r3, [pc, #12]	; (35c0 <_sercom_get_interrupt_vector+0x2c>)
    35b4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    35b6:	466b      	mov	r3, sp
    35b8:	5618      	ldrsb	r0, [r3, r0]
}
    35ba:	b003      	add	sp, #12
    35bc:	bd00      	pop	{pc}
    35be:	46c0      	nop			; (mov r8, r8)
    35c0:	00002ac1 	.word	0x00002ac1

000035c4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    35c4:	b510      	push	{r4, lr}
    35c6:	4b02      	ldr	r3, [pc, #8]	; (35d0 <SERCOM0_Handler+0xc>)
    35c8:	681b      	ldr	r3, [r3, #0]
    35ca:	2000      	movs	r0, #0
    35cc:	4798      	blx	r3
    35ce:	bd10      	pop	{r4, pc}
    35d0:	200002e8 	.word	0x200002e8

000035d4 <SERCOM1_Handler>:
    35d4:	b510      	push	{r4, lr}
    35d6:	4b02      	ldr	r3, [pc, #8]	; (35e0 <SERCOM1_Handler+0xc>)
    35d8:	685b      	ldr	r3, [r3, #4]
    35da:	2001      	movs	r0, #1
    35dc:	4798      	blx	r3
    35de:	bd10      	pop	{r4, pc}
    35e0:	200002e8 	.word	0x200002e8

000035e4 <SERCOM2_Handler>:
    35e4:	b510      	push	{r4, lr}
    35e6:	4b02      	ldr	r3, [pc, #8]	; (35f0 <SERCOM2_Handler+0xc>)
    35e8:	689b      	ldr	r3, [r3, #8]
    35ea:	2002      	movs	r0, #2
    35ec:	4798      	blx	r3
    35ee:	bd10      	pop	{r4, pc}
    35f0:	200002e8 	.word	0x200002e8

000035f4 <SERCOM3_Handler>:
    35f4:	b510      	push	{r4, lr}
    35f6:	4b02      	ldr	r3, [pc, #8]	; (3600 <SERCOM3_Handler+0xc>)
    35f8:	68db      	ldr	r3, [r3, #12]
    35fa:	2003      	movs	r0, #3
    35fc:	4798      	blx	r3
    35fe:	bd10      	pop	{r4, pc}
    3600:	200002e8 	.word	0x200002e8

00003604 <SERCOM4_Handler>:
    3604:	b510      	push	{r4, lr}
    3606:	4b02      	ldr	r3, [pc, #8]	; (3610 <SERCOM4_Handler+0xc>)
    3608:	691b      	ldr	r3, [r3, #16]
    360a:	2004      	movs	r0, #4
    360c:	4798      	blx	r3
    360e:	bd10      	pop	{r4, pc}
    3610:	200002e8 	.word	0x200002e8

00003614 <SERCOM5_Handler>:
    3614:	b510      	push	{r4, lr}
    3616:	4b02      	ldr	r3, [pc, #8]	; (3620 <SERCOM5_Handler+0xc>)
    3618:	695b      	ldr	r3, [r3, #20]
    361a:	2005      	movs	r0, #5
    361c:	4798      	blx	r3
    361e:	bd10      	pop	{r4, pc}
    3620:	200002e8 	.word	0x200002e8

00003624 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    3624:	4770      	bx	lr
	...

00003628 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3628:	4b0c      	ldr	r3, [pc, #48]	; (365c <cpu_irq_enter_critical+0x34>)
    362a:	681b      	ldr	r3, [r3, #0]
    362c:	2b00      	cmp	r3, #0
    362e:	d106      	bne.n	363e <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3630:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3634:	2b00      	cmp	r3, #0
    3636:	d007      	beq.n	3648 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3638:	2200      	movs	r2, #0
    363a:	4b09      	ldr	r3, [pc, #36]	; (3660 <cpu_irq_enter_critical+0x38>)
    363c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    363e:	4a07      	ldr	r2, [pc, #28]	; (365c <cpu_irq_enter_critical+0x34>)
    3640:	6813      	ldr	r3, [r2, #0]
    3642:	3301      	adds	r3, #1
    3644:	6013      	str	r3, [r2, #0]
}
    3646:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    3648:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    364a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    364e:	2200      	movs	r2, #0
    3650:	4b04      	ldr	r3, [pc, #16]	; (3664 <cpu_irq_enter_critical+0x3c>)
    3652:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3654:	3201      	adds	r2, #1
    3656:	4b02      	ldr	r3, [pc, #8]	; (3660 <cpu_irq_enter_critical+0x38>)
    3658:	701a      	strb	r2, [r3, #0]
    365a:	e7f0      	b.n	363e <cpu_irq_enter_critical+0x16>
    365c:	20000300 	.word	0x20000300
    3660:	20000304 	.word	0x20000304
    3664:	20000090 	.word	0x20000090

00003668 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3668:	4b08      	ldr	r3, [pc, #32]	; (368c <cpu_irq_leave_critical+0x24>)
    366a:	681a      	ldr	r2, [r3, #0]
    366c:	3a01      	subs	r2, #1
    366e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3670:	681b      	ldr	r3, [r3, #0]
    3672:	2b00      	cmp	r3, #0
    3674:	d109      	bne.n	368a <cpu_irq_leave_critical+0x22>
    3676:	4b06      	ldr	r3, [pc, #24]	; (3690 <cpu_irq_leave_critical+0x28>)
    3678:	781b      	ldrb	r3, [r3, #0]
    367a:	2b00      	cmp	r3, #0
    367c:	d005      	beq.n	368a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    367e:	2201      	movs	r2, #1
    3680:	4b04      	ldr	r3, [pc, #16]	; (3694 <cpu_irq_leave_critical+0x2c>)
    3682:	701a      	strb	r2, [r3, #0]
    3684:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3688:	b662      	cpsie	i
	}
}
    368a:	4770      	bx	lr
    368c:	20000300 	.word	0x20000300
    3690:	20000304 	.word	0x20000304
    3694:	20000090 	.word	0x20000090

00003698 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3698:	b510      	push	{r4, lr}
	switch (clock_source) {
    369a:	2808      	cmp	r0, #8
    369c:	d803      	bhi.n	36a6 <system_clock_source_get_hz+0xe>
    369e:	0080      	lsls	r0, r0, #2
    36a0:	4b1c      	ldr	r3, [pc, #112]	; (3714 <system_clock_source_get_hz+0x7c>)
    36a2:	581b      	ldr	r3, [r3, r0]
    36a4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    36a6:	2000      	movs	r0, #0
    36a8:	e032      	b.n	3710 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    36aa:	4b1b      	ldr	r3, [pc, #108]	; (3718 <system_clock_source_get_hz+0x80>)
    36ac:	6918      	ldr	r0, [r3, #16]
    36ae:	e02f      	b.n	3710 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    36b0:	4b1a      	ldr	r3, [pc, #104]	; (371c <system_clock_source_get_hz+0x84>)
    36b2:	6a1b      	ldr	r3, [r3, #32]
    36b4:	059b      	lsls	r3, r3, #22
    36b6:	0f9b      	lsrs	r3, r3, #30
    36b8:	4819      	ldr	r0, [pc, #100]	; (3720 <system_clock_source_get_hz+0x88>)
    36ba:	40d8      	lsrs	r0, r3
    36bc:	e028      	b.n	3710 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    36be:	4b16      	ldr	r3, [pc, #88]	; (3718 <system_clock_source_get_hz+0x80>)
    36c0:	6958      	ldr	r0, [r3, #20]
    36c2:	e025      	b.n	3710 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    36c4:	4b14      	ldr	r3, [pc, #80]	; (3718 <system_clock_source_get_hz+0x80>)
    36c6:	681b      	ldr	r3, [r3, #0]
			return 0;
    36c8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    36ca:	079b      	lsls	r3, r3, #30
    36cc:	d520      	bpl.n	3710 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    36ce:	4913      	ldr	r1, [pc, #76]	; (371c <system_clock_source_get_hz+0x84>)
    36d0:	2210      	movs	r2, #16
    36d2:	68cb      	ldr	r3, [r1, #12]
    36d4:	421a      	tst	r2, r3
    36d6:	d0fc      	beq.n	36d2 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    36d8:	4b0f      	ldr	r3, [pc, #60]	; (3718 <system_clock_source_get_hz+0x80>)
    36da:	681a      	ldr	r2, [r3, #0]
    36dc:	2324      	movs	r3, #36	; 0x24
    36de:	4013      	ands	r3, r2
    36e0:	2b04      	cmp	r3, #4
    36e2:	d001      	beq.n	36e8 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    36e4:	480f      	ldr	r0, [pc, #60]	; (3724 <system_clock_source_get_hz+0x8c>)
    36e6:	e013      	b.n	3710 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    36e8:	2000      	movs	r0, #0
    36ea:	4b0f      	ldr	r3, [pc, #60]	; (3728 <system_clock_source_get_hz+0x90>)
    36ec:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    36ee:	4b0a      	ldr	r3, [pc, #40]	; (3718 <system_clock_source_get_hz+0x80>)
    36f0:	689b      	ldr	r3, [r3, #8]
    36f2:	041b      	lsls	r3, r3, #16
    36f4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    36f6:	4358      	muls	r0, r3
    36f8:	e00a      	b.n	3710 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    36fa:	2350      	movs	r3, #80	; 0x50
    36fc:	4a07      	ldr	r2, [pc, #28]	; (371c <system_clock_source_get_hz+0x84>)
    36fe:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    3700:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3702:	075b      	lsls	r3, r3, #29
    3704:	d504      	bpl.n	3710 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    3706:	4b04      	ldr	r3, [pc, #16]	; (3718 <system_clock_source_get_hz+0x80>)
    3708:	68d8      	ldr	r0, [r3, #12]
    370a:	e001      	b.n	3710 <system_clock_source_get_hz+0x78>
		return 32768UL;
    370c:	2080      	movs	r0, #128	; 0x80
    370e:	0200      	lsls	r0, r0, #8
	}
}
    3710:	bd10      	pop	{r4, pc}
    3712:	46c0      	nop			; (mov r8, r8)
    3714:	0000537c 	.word	0x0000537c
    3718:	20000308 	.word	0x20000308
    371c:	40000800 	.word	0x40000800
    3720:	007a1200 	.word	0x007a1200
    3724:	02dc6c00 	.word	0x02dc6c00
    3728:	00003bf9 	.word	0x00003bf9

0000372c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    372c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    372e:	490c      	ldr	r1, [pc, #48]	; (3760 <system_clock_source_osc8m_set_config+0x34>)
    3730:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    3732:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3734:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    3736:	7840      	ldrb	r0, [r0, #1]
    3738:	2201      	movs	r2, #1
    373a:	4010      	ands	r0, r2
    373c:	0180      	lsls	r0, r0, #6
    373e:	2640      	movs	r6, #64	; 0x40
    3740:	43b3      	bics	r3, r6
    3742:	4303      	orrs	r3, r0
    3744:	402a      	ands	r2, r5
    3746:	01d2      	lsls	r2, r2, #7
    3748:	2080      	movs	r0, #128	; 0x80
    374a:	4383      	bics	r3, r0
    374c:	4313      	orrs	r3, r2
    374e:	2203      	movs	r2, #3
    3750:	4022      	ands	r2, r4
    3752:	0212      	lsls	r2, r2, #8
    3754:	4803      	ldr	r0, [pc, #12]	; (3764 <system_clock_source_osc8m_set_config+0x38>)
    3756:	4003      	ands	r3, r0
    3758:	4313      	orrs	r3, r2
    375a:	620b      	str	r3, [r1, #32]
}
    375c:	bd70      	pop	{r4, r5, r6, pc}
    375e:	46c0      	nop			; (mov r8, r8)
    3760:	40000800 	.word	0x40000800
    3764:	fffffcff 	.word	0xfffffcff

00003768 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    3768:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    376a:	7a03      	ldrb	r3, [r0, #8]
    376c:	069b      	lsls	r3, r3, #26
    376e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    3770:	8942      	ldrh	r2, [r0, #10]
    3772:	0592      	lsls	r2, r2, #22
    3774:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3776:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    3778:	4918      	ldr	r1, [pc, #96]	; (37dc <system_clock_source_dfll_set_config+0x74>)
    377a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    377c:	7983      	ldrb	r3, [r0, #6]
    377e:	79c2      	ldrb	r2, [r0, #7]
    3780:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    3782:	8842      	ldrh	r2, [r0, #2]
    3784:	8884      	ldrh	r4, [r0, #4]
    3786:	4322      	orrs	r2, r4
    3788:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    378a:	7842      	ldrb	r2, [r0, #1]
    378c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    378e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    3790:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    3792:	7803      	ldrb	r3, [r0, #0]
    3794:	2b04      	cmp	r3, #4
    3796:	d011      	beq.n	37bc <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    3798:	2b20      	cmp	r3, #32
    379a:	d10e      	bne.n	37ba <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    379c:	7b03      	ldrb	r3, [r0, #12]
    379e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    37a0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    37a2:	4313      	orrs	r3, r2
    37a4:	89c2      	ldrh	r2, [r0, #14]
    37a6:	0412      	lsls	r2, r2, #16
    37a8:	490d      	ldr	r1, [pc, #52]	; (37e0 <system_clock_source_dfll_set_config+0x78>)
    37aa:	400a      	ands	r2, r1
    37ac:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    37ae:	4a0b      	ldr	r2, [pc, #44]	; (37dc <system_clock_source_dfll_set_config+0x74>)
    37b0:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    37b2:	6811      	ldr	r1, [r2, #0]
    37b4:	4b0b      	ldr	r3, [pc, #44]	; (37e4 <system_clock_source_dfll_set_config+0x7c>)
    37b6:	430b      	orrs	r3, r1
    37b8:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    37ba:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    37bc:	7b03      	ldrb	r3, [r0, #12]
    37be:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    37c0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    37c2:	4313      	orrs	r3, r2
    37c4:	89c2      	ldrh	r2, [r0, #14]
    37c6:	0412      	lsls	r2, r2, #16
    37c8:	4905      	ldr	r1, [pc, #20]	; (37e0 <system_clock_source_dfll_set_config+0x78>)
    37ca:	400a      	ands	r2, r1
    37cc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    37ce:	4a03      	ldr	r2, [pc, #12]	; (37dc <system_clock_source_dfll_set_config+0x74>)
    37d0:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    37d2:	6813      	ldr	r3, [r2, #0]
    37d4:	2104      	movs	r1, #4
    37d6:	430b      	orrs	r3, r1
    37d8:	6013      	str	r3, [r2, #0]
    37da:	e7ee      	b.n	37ba <system_clock_source_dfll_set_config+0x52>
    37dc:	20000308 	.word	0x20000308
    37e0:	03ff0000 	.word	0x03ff0000
    37e4:	00000424 	.word	0x00000424

000037e8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    37e8:	2808      	cmp	r0, #8
    37ea:	d803      	bhi.n	37f4 <system_clock_source_enable+0xc>
    37ec:	0080      	lsls	r0, r0, #2
    37ee:	4b25      	ldr	r3, [pc, #148]	; (3884 <system_clock_source_enable+0x9c>)
    37f0:	581b      	ldr	r3, [r3, r0]
    37f2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    37f4:	2017      	movs	r0, #23
    37f6:	e044      	b.n	3882 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    37f8:	4a23      	ldr	r2, [pc, #140]	; (3888 <system_clock_source_enable+0xa0>)
    37fa:	6a13      	ldr	r3, [r2, #32]
    37fc:	2102      	movs	r1, #2
    37fe:	430b      	orrs	r3, r1
    3800:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    3802:	2000      	movs	r0, #0
    3804:	e03d      	b.n	3882 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3806:	4a20      	ldr	r2, [pc, #128]	; (3888 <system_clock_source_enable+0xa0>)
    3808:	6993      	ldr	r3, [r2, #24]
    380a:	2102      	movs	r1, #2
    380c:	430b      	orrs	r3, r1
    380e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    3810:	2000      	movs	r0, #0
		break;
    3812:	e036      	b.n	3882 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    3814:	4a1c      	ldr	r2, [pc, #112]	; (3888 <system_clock_source_enable+0xa0>)
    3816:	8a13      	ldrh	r3, [r2, #16]
    3818:	2102      	movs	r1, #2
    381a:	430b      	orrs	r3, r1
    381c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    381e:	2000      	movs	r0, #0
		break;
    3820:	e02f      	b.n	3882 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3822:	4a19      	ldr	r2, [pc, #100]	; (3888 <system_clock_source_enable+0xa0>)
    3824:	8a93      	ldrh	r3, [r2, #20]
    3826:	2102      	movs	r1, #2
    3828:	430b      	orrs	r3, r1
    382a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    382c:	2000      	movs	r0, #0
		break;
    382e:	e028      	b.n	3882 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3830:	4916      	ldr	r1, [pc, #88]	; (388c <system_clock_source_enable+0xa4>)
    3832:	680b      	ldr	r3, [r1, #0]
    3834:	2202      	movs	r2, #2
    3836:	4313      	orrs	r3, r2
    3838:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    383a:	4b13      	ldr	r3, [pc, #76]	; (3888 <system_clock_source_enable+0xa0>)
    383c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    383e:	0019      	movs	r1, r3
    3840:	320e      	adds	r2, #14
    3842:	68cb      	ldr	r3, [r1, #12]
    3844:	421a      	tst	r2, r3
    3846:	d0fc      	beq.n	3842 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3848:	4a10      	ldr	r2, [pc, #64]	; (388c <system_clock_source_enable+0xa4>)
    384a:	6891      	ldr	r1, [r2, #8]
    384c:	4b0e      	ldr	r3, [pc, #56]	; (3888 <system_clock_source_enable+0xa0>)
    384e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3850:	6852      	ldr	r2, [r2, #4]
    3852:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    3854:	2200      	movs	r2, #0
    3856:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3858:	0019      	movs	r1, r3
    385a:	3210      	adds	r2, #16
    385c:	68cb      	ldr	r3, [r1, #12]
    385e:	421a      	tst	r2, r3
    3860:	d0fc      	beq.n	385c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3862:	4b0a      	ldr	r3, [pc, #40]	; (388c <system_clock_source_enable+0xa4>)
    3864:	681b      	ldr	r3, [r3, #0]
    3866:	b29b      	uxth	r3, r3
    3868:	4a07      	ldr	r2, [pc, #28]	; (3888 <system_clock_source_enable+0xa0>)
    386a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    386c:	2000      	movs	r0, #0
    386e:	e008      	b.n	3882 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3870:	4905      	ldr	r1, [pc, #20]	; (3888 <system_clock_source_enable+0xa0>)
    3872:	2244      	movs	r2, #68	; 0x44
    3874:	5c8b      	ldrb	r3, [r1, r2]
    3876:	2002      	movs	r0, #2
    3878:	4303      	orrs	r3, r0
    387a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    387c:	2000      	movs	r0, #0
		break;
    387e:	e000      	b.n	3882 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    3880:	2000      	movs	r0, #0
}
    3882:	4770      	bx	lr
    3884:	000053a0 	.word	0x000053a0
    3888:	40000800 	.word	0x40000800
    388c:	20000308 	.word	0x20000308

00003890 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3890:	b5f0      	push	{r4, r5, r6, r7, lr}
    3892:	b08b      	sub	sp, #44	; 0x2c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3894:	22c2      	movs	r2, #194	; 0xc2
    3896:	00d2      	lsls	r2, r2, #3
    3898:	4b35      	ldr	r3, [pc, #212]	; (3970 <system_clock_init+0xe0>)
    389a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    389c:	4a35      	ldr	r2, [pc, #212]	; (3974 <system_clock_init+0xe4>)
    389e:	6853      	ldr	r3, [r2, #4]
    38a0:	211e      	movs	r1, #30
    38a2:	438b      	bics	r3, r1
    38a4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    38a6:	2202      	movs	r2, #2
    38a8:	ab01      	add	r3, sp, #4
    38aa:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    38ac:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    38ae:	4d32      	ldr	r5, [pc, #200]	; (3978 <system_clock_init+0xe8>)
    38b0:	b2e0      	uxtb	r0, r4
    38b2:	a901      	add	r1, sp, #4
    38b4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    38b6:	3401      	adds	r4, #1
    38b8:	2c25      	cmp	r4, #37	; 0x25
    38ba:	d1f9      	bne.n	38b0 <system_clock_init+0x20>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    38bc:	ab05      	add	r3, sp, #20
    38be:	2200      	movs	r2, #0
    38c0:	2100      	movs	r1, #0
    38c2:	8059      	strh	r1, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    38c4:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    38c6:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    38c8:	3120      	adds	r1, #32
    38ca:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    38cc:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    38ce:	4b2b      	ldr	r3, [pc, #172]	; (397c <system_clock_init+0xec>)
    38d0:	681b      	ldr	r3, [r3, #0]
    38d2:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    38d4:	2b3f      	cmp	r3, #63	; 0x3f
    38d6:	d048      	beq.n	396a <system_clock_init+0xda>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    38d8:	a805      	add	r0, sp, #20
    38da:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    38dc:	2707      	movs	r7, #7
    38de:	7307      	strb	r7, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10;
    38e0:	230a      	movs	r3, #10
    38e2:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    38e4:	4b26      	ldr	r3, [pc, #152]	; (3980 <system_clock_init+0xf0>)
    38e6:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    38e8:	3bff      	subs	r3, #255	; 0xff
    38ea:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    38ec:	4b25      	ldr	r3, [pc, #148]	; (3984 <system_clock_init+0xf4>)
    38ee:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    38f0:	4b25      	ldr	r3, [pc, #148]	; (3988 <system_clock_init+0xf8>)
    38f2:	4798      	blx	r3
	config->run_in_standby  = false;
    38f4:	a804      	add	r0, sp, #16
    38f6:	2400      	movs	r4, #0
    38f8:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    38fa:	2501      	movs	r5, #1
    38fc:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    38fe:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3900:	4b22      	ldr	r3, [pc, #136]	; (398c <system_clock_init+0xfc>)
    3902:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3904:	2006      	movs	r0, #6
    3906:	4e22      	ldr	r6, [pc, #136]	; (3990 <system_clock_init+0x100>)
    3908:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    390a:	4b22      	ldr	r3, [pc, #136]	; (3994 <system_clock_init+0x104>)
    390c:	4798      	blx	r3
	config->division_factor    = 1;
    390e:	a901      	add	r1, sp, #4
    3910:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    3912:	704c      	strb	r4, [r1, #1]
	config->run_in_standby     = false;
    3914:	720c      	strb	r4, [r1, #8]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    3916:	700f      	strb	r7, [r1, #0]
    3918:	724d      	strb	r5, [r1, #9]
    391a:	2001      	movs	r0, #1
    391c:	4b1e      	ldr	r3, [pc, #120]	; (3998 <system_clock_init+0x108>)
    391e:	4798      	blx	r3
    3920:	2001      	movs	r0, #1
    3922:	4b1e      	ldr	r3, [pc, #120]	; (399c <system_clock_init+0x10c>)
    3924:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    3926:	2007      	movs	r0, #7
    3928:	47b0      	blx	r6
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    392a:	4911      	ldr	r1, [pc, #68]	; (3970 <system_clock_init+0xe0>)
    392c:	2210      	movs	r2, #16
    392e:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    3930:	421a      	tst	r2, r3
    3932:	d0fc      	beq.n	392e <system_clock_init+0x9e>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    3934:	4a0e      	ldr	r2, [pc, #56]	; (3970 <system_clock_init+0xe0>)
    3936:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    3938:	2180      	movs	r1, #128	; 0x80
    393a:	430b      	orrs	r3, r1
    393c:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    393e:	4a18      	ldr	r2, [pc, #96]	; (39a0 <system_clock_init+0x110>)
    3940:	2300      	movs	r3, #0
    3942:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    3944:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    3946:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    3948:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    394a:	a901      	add	r1, sp, #4
    394c:	2201      	movs	r2, #1
    394e:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    3950:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    3952:	3205      	adds	r2, #5
    3954:	700a      	strb	r2, [r1, #0]
	config->run_in_standby     = false;
    3956:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    3958:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    395a:	2000      	movs	r0, #0
    395c:	4b0e      	ldr	r3, [pc, #56]	; (3998 <system_clock_init+0x108>)
    395e:	4798      	blx	r3
    3960:	2000      	movs	r0, #0
    3962:	4b0e      	ldr	r3, [pc, #56]	; (399c <system_clock_init+0x10c>)
    3964:	4798      	blx	r3
#endif
}
    3966:	b00b      	add	sp, #44	; 0x2c
    3968:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    396a:	3b20      	subs	r3, #32
    396c:	e7b4      	b.n	38d8 <system_clock_init+0x48>
    396e:	46c0      	nop			; (mov r8, r8)
    3970:	40000800 	.word	0x40000800
    3974:	41004000 	.word	0x41004000
    3978:	00003bdd 	.word	0x00003bdd
    397c:	00806024 	.word	0x00806024
    3980:	000001ff 	.word	0x000001ff
    3984:	ffffbb80 	.word	0xffffbb80
    3988:	00003769 	.word	0x00003769
    398c:	0000372d 	.word	0x0000372d
    3990:	000037e9 	.word	0x000037e9
    3994:	000039a5 	.word	0x000039a5
    3998:	000039c9 	.word	0x000039c9
    399c:	00003a81 	.word	0x00003a81
    39a0:	40000400 	.word	0x40000400

000039a4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    39a4:	4a06      	ldr	r2, [pc, #24]	; (39c0 <system_gclk_init+0x1c>)
    39a6:	6993      	ldr	r3, [r2, #24]
    39a8:	2108      	movs	r1, #8
    39aa:	430b      	orrs	r3, r1
    39ac:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    39ae:	2201      	movs	r2, #1
    39b0:	4b04      	ldr	r3, [pc, #16]	; (39c4 <system_gclk_init+0x20>)
    39b2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    39b4:	0019      	movs	r1, r3
    39b6:	780b      	ldrb	r3, [r1, #0]
    39b8:	4213      	tst	r3, r2
    39ba:	d1fc      	bne.n	39b6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    39bc:	4770      	bx	lr
    39be:	46c0      	nop			; (mov r8, r8)
    39c0:	40000400 	.word	0x40000400
    39c4:	40000c00 	.word	0x40000c00

000039c8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    39c8:	b570      	push	{r4, r5, r6, lr}
    39ca:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    39cc:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    39ce:	780d      	ldrb	r5, [r1, #0]
    39d0:	022d      	lsls	r5, r5, #8
    39d2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    39d4:	784b      	ldrb	r3, [r1, #1]
    39d6:	2b00      	cmp	r3, #0
    39d8:	d002      	beq.n	39e0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    39da:	2380      	movs	r3, #128	; 0x80
    39dc:	02db      	lsls	r3, r3, #11
    39de:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    39e0:	7a4b      	ldrb	r3, [r1, #9]
    39e2:	2b00      	cmp	r3, #0
    39e4:	d002      	beq.n	39ec <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    39e6:	2380      	movs	r3, #128	; 0x80
    39e8:	031b      	lsls	r3, r3, #12
    39ea:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    39ec:	6848      	ldr	r0, [r1, #4]
    39ee:	2801      	cmp	r0, #1
    39f0:	d910      	bls.n	3a14 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    39f2:	1e43      	subs	r3, r0, #1
    39f4:	4218      	tst	r0, r3
    39f6:	d134      	bne.n	3a62 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    39f8:	2802      	cmp	r0, #2
    39fa:	d930      	bls.n	3a5e <system_gclk_gen_set_config+0x96>
    39fc:	2302      	movs	r3, #2
    39fe:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3a00:	3201      	adds	r2, #1
						mask <<= 1) {
    3a02:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    3a04:	4298      	cmp	r0, r3
    3a06:	d8fb      	bhi.n	3a00 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3a08:	0212      	lsls	r2, r2, #8
    3a0a:	4332      	orrs	r2, r6
    3a0c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3a0e:	2380      	movs	r3, #128	; 0x80
    3a10:	035b      	lsls	r3, r3, #13
    3a12:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3a14:	7a0b      	ldrb	r3, [r1, #8]
    3a16:	2b00      	cmp	r3, #0
    3a18:	d002      	beq.n	3a20 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3a1a:	2380      	movs	r3, #128	; 0x80
    3a1c:	039b      	lsls	r3, r3, #14
    3a1e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3a20:	4a13      	ldr	r2, [pc, #76]	; (3a70 <system_gclk_gen_set_config+0xa8>)
    3a22:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    3a24:	b25b      	sxtb	r3, r3
    3a26:	2b00      	cmp	r3, #0
    3a28:	dbfb      	blt.n	3a22 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    3a2a:	4b12      	ldr	r3, [pc, #72]	; (3a74 <system_gclk_gen_set_config+0xac>)
    3a2c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3a2e:	4b12      	ldr	r3, [pc, #72]	; (3a78 <system_gclk_gen_set_config+0xb0>)
    3a30:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3a32:	4a0f      	ldr	r2, [pc, #60]	; (3a70 <system_gclk_gen_set_config+0xa8>)
    3a34:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    3a36:	b25b      	sxtb	r3, r3
    3a38:	2b00      	cmp	r3, #0
    3a3a:	dbfb      	blt.n	3a34 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3a3c:	4b0c      	ldr	r3, [pc, #48]	; (3a70 <system_gclk_gen_set_config+0xa8>)
    3a3e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3a40:	001a      	movs	r2, r3
    3a42:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    3a44:	b25b      	sxtb	r3, r3
    3a46:	2b00      	cmp	r3, #0
    3a48:	dbfb      	blt.n	3a42 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    3a4a:	4a09      	ldr	r2, [pc, #36]	; (3a70 <system_gclk_gen_set_config+0xa8>)
    3a4c:	6853      	ldr	r3, [r2, #4]
    3a4e:	2180      	movs	r1, #128	; 0x80
    3a50:	0249      	lsls	r1, r1, #9
    3a52:	400b      	ands	r3, r1
    3a54:	431d      	orrs	r5, r3
    3a56:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    3a58:	4b08      	ldr	r3, [pc, #32]	; (3a7c <system_gclk_gen_set_config+0xb4>)
    3a5a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3a5c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    3a5e:	2200      	movs	r2, #0
    3a60:	e7d2      	b.n	3a08 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3a62:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    3a64:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3a66:	2380      	movs	r3, #128	; 0x80
    3a68:	029b      	lsls	r3, r3, #10
    3a6a:	431d      	orrs	r5, r3
    3a6c:	e7d2      	b.n	3a14 <system_gclk_gen_set_config+0x4c>
    3a6e:	46c0      	nop			; (mov r8, r8)
    3a70:	40000c00 	.word	0x40000c00
    3a74:	00003629 	.word	0x00003629
    3a78:	40000c08 	.word	0x40000c08
    3a7c:	00003669 	.word	0x00003669

00003a80 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3a80:	b510      	push	{r4, lr}
    3a82:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3a84:	4a0b      	ldr	r2, [pc, #44]	; (3ab4 <system_gclk_gen_enable+0x34>)
    3a86:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3a88:	b25b      	sxtb	r3, r3
    3a8a:	2b00      	cmp	r3, #0
    3a8c:	dbfb      	blt.n	3a86 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    3a8e:	4b0a      	ldr	r3, [pc, #40]	; (3ab8 <system_gclk_gen_enable+0x38>)
    3a90:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3a92:	4b0a      	ldr	r3, [pc, #40]	; (3abc <system_gclk_gen_enable+0x3c>)
    3a94:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3a96:	4a07      	ldr	r2, [pc, #28]	; (3ab4 <system_gclk_gen_enable+0x34>)
    3a98:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3a9a:	b25b      	sxtb	r3, r3
    3a9c:	2b00      	cmp	r3, #0
    3a9e:	dbfb      	blt.n	3a98 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3aa0:	4a04      	ldr	r2, [pc, #16]	; (3ab4 <system_gclk_gen_enable+0x34>)
    3aa2:	6851      	ldr	r1, [r2, #4]
    3aa4:	2380      	movs	r3, #128	; 0x80
    3aa6:	025b      	lsls	r3, r3, #9
    3aa8:	430b      	orrs	r3, r1
    3aaa:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    3aac:	4b04      	ldr	r3, [pc, #16]	; (3ac0 <system_gclk_gen_enable+0x40>)
    3aae:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3ab0:	bd10      	pop	{r4, pc}
    3ab2:	46c0      	nop			; (mov r8, r8)
    3ab4:	40000c00 	.word	0x40000c00
    3ab8:	00003629 	.word	0x00003629
    3abc:	40000c04 	.word	0x40000c04
    3ac0:	00003669 	.word	0x00003669

00003ac4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3ac4:	b570      	push	{r4, r5, r6, lr}
    3ac6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3ac8:	4a1a      	ldr	r2, [pc, #104]	; (3b34 <system_gclk_gen_get_hz+0x70>)
    3aca:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3acc:	b25b      	sxtb	r3, r3
    3ace:	2b00      	cmp	r3, #0
    3ad0:	dbfb      	blt.n	3aca <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    3ad2:	4b19      	ldr	r3, [pc, #100]	; (3b38 <system_gclk_gen_get_hz+0x74>)
    3ad4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3ad6:	4b19      	ldr	r3, [pc, #100]	; (3b3c <system_gclk_gen_get_hz+0x78>)
    3ad8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3ada:	4a16      	ldr	r2, [pc, #88]	; (3b34 <system_gclk_gen_get_hz+0x70>)
    3adc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3ade:	b25b      	sxtb	r3, r3
    3ae0:	2b00      	cmp	r3, #0
    3ae2:	dbfb      	blt.n	3adc <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3ae4:	4e13      	ldr	r6, [pc, #76]	; (3b34 <system_gclk_gen_get_hz+0x70>)
    3ae6:	6870      	ldr	r0, [r6, #4]
    3ae8:	04c0      	lsls	r0, r0, #19
    3aea:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3aec:	4b14      	ldr	r3, [pc, #80]	; (3b40 <system_gclk_gen_get_hz+0x7c>)
    3aee:	4798      	blx	r3
    3af0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3af2:	4b12      	ldr	r3, [pc, #72]	; (3b3c <system_gclk_gen_get_hz+0x78>)
    3af4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3af6:	6876      	ldr	r6, [r6, #4]
    3af8:	02f6      	lsls	r6, r6, #11
    3afa:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3afc:	4b11      	ldr	r3, [pc, #68]	; (3b44 <system_gclk_gen_get_hz+0x80>)
    3afe:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3b00:	4a0c      	ldr	r2, [pc, #48]	; (3b34 <system_gclk_gen_get_hz+0x70>)
    3b02:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3b04:	b25b      	sxtb	r3, r3
    3b06:	2b00      	cmp	r3, #0
    3b08:	dbfb      	blt.n	3b02 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3b0a:	4b0a      	ldr	r3, [pc, #40]	; (3b34 <system_gclk_gen_get_hz+0x70>)
    3b0c:	689c      	ldr	r4, [r3, #8]
    3b0e:	0224      	lsls	r4, r4, #8
    3b10:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    3b12:	4b0d      	ldr	r3, [pc, #52]	; (3b48 <system_gclk_gen_get_hz+0x84>)
    3b14:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3b16:	2e00      	cmp	r6, #0
    3b18:	d107      	bne.n	3b2a <system_gclk_gen_get_hz+0x66>
    3b1a:	2c01      	cmp	r4, #1
    3b1c:	d907      	bls.n	3b2e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    3b1e:	0021      	movs	r1, r4
    3b20:	0028      	movs	r0, r5
    3b22:	4b0a      	ldr	r3, [pc, #40]	; (3b4c <system_gclk_gen_get_hz+0x88>)
    3b24:	4798      	blx	r3
    3b26:	0005      	movs	r5, r0
    3b28:	e001      	b.n	3b2e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    3b2a:	3401      	adds	r4, #1
    3b2c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    3b2e:	0028      	movs	r0, r5
    3b30:	bd70      	pop	{r4, r5, r6, pc}
    3b32:	46c0      	nop			; (mov r8, r8)
    3b34:	40000c00 	.word	0x40000c00
    3b38:	00003629 	.word	0x00003629
    3b3c:	40000c04 	.word	0x40000c04
    3b40:	00003699 	.word	0x00003699
    3b44:	40000c08 	.word	0x40000c08
    3b48:	00003669 	.word	0x00003669
    3b4c:	00003ea1 	.word	0x00003ea1

00003b50 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3b50:	b510      	push	{r4, lr}
    3b52:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3b54:	4b06      	ldr	r3, [pc, #24]	; (3b70 <system_gclk_chan_enable+0x20>)
    3b56:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3b58:	4b06      	ldr	r3, [pc, #24]	; (3b74 <system_gclk_chan_enable+0x24>)
    3b5a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3b5c:	4a06      	ldr	r2, [pc, #24]	; (3b78 <system_gclk_chan_enable+0x28>)
    3b5e:	8853      	ldrh	r3, [r2, #2]
    3b60:	2180      	movs	r1, #128	; 0x80
    3b62:	01c9      	lsls	r1, r1, #7
    3b64:	430b      	orrs	r3, r1
    3b66:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    3b68:	4b04      	ldr	r3, [pc, #16]	; (3b7c <system_gclk_chan_enable+0x2c>)
    3b6a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3b6c:	bd10      	pop	{r4, pc}
    3b6e:	46c0      	nop			; (mov r8, r8)
    3b70:	00003629 	.word	0x00003629
    3b74:	40000c02 	.word	0x40000c02
    3b78:	40000c00 	.word	0x40000c00
    3b7c:	00003669 	.word	0x00003669

00003b80 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3b80:	b510      	push	{r4, lr}
    3b82:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3b84:	4b0f      	ldr	r3, [pc, #60]	; (3bc4 <system_gclk_chan_disable+0x44>)
    3b86:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3b88:	4b0f      	ldr	r3, [pc, #60]	; (3bc8 <system_gclk_chan_disable+0x48>)
    3b8a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3b8c:	4a0f      	ldr	r2, [pc, #60]	; (3bcc <system_gclk_chan_disable+0x4c>)
    3b8e:	8853      	ldrh	r3, [r2, #2]
    3b90:	051b      	lsls	r3, r3, #20
    3b92:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    3b94:	8853      	ldrh	r3, [r2, #2]
    3b96:	490e      	ldr	r1, [pc, #56]	; (3bd0 <system_gclk_chan_disable+0x50>)
    3b98:	400b      	ands	r3, r1
    3b9a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3b9c:	8853      	ldrh	r3, [r2, #2]
    3b9e:	490d      	ldr	r1, [pc, #52]	; (3bd4 <system_gclk_chan_disable+0x54>)
    3ba0:	400b      	ands	r3, r1
    3ba2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3ba4:	0011      	movs	r1, r2
    3ba6:	2280      	movs	r2, #128	; 0x80
    3ba8:	01d2      	lsls	r2, r2, #7
    3baa:	884b      	ldrh	r3, [r1, #2]
    3bac:	4213      	tst	r3, r2
    3bae:	d1fc      	bne.n	3baa <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3bb0:	4906      	ldr	r1, [pc, #24]	; (3bcc <system_gclk_chan_disable+0x4c>)
    3bb2:	884a      	ldrh	r2, [r1, #2]
    3bb4:	0203      	lsls	r3, r0, #8
    3bb6:	4806      	ldr	r0, [pc, #24]	; (3bd0 <system_gclk_chan_disable+0x50>)
    3bb8:	4002      	ands	r2, r0
    3bba:	4313      	orrs	r3, r2
    3bbc:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    3bbe:	4b06      	ldr	r3, [pc, #24]	; (3bd8 <system_gclk_chan_disable+0x58>)
    3bc0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3bc2:	bd10      	pop	{r4, pc}
    3bc4:	00003629 	.word	0x00003629
    3bc8:	40000c02 	.word	0x40000c02
    3bcc:	40000c00 	.word	0x40000c00
    3bd0:	fffff0ff 	.word	0xfffff0ff
    3bd4:	ffffbfff 	.word	0xffffbfff
    3bd8:	00003669 	.word	0x00003669

00003bdc <system_gclk_chan_set_config>:
{
    3bdc:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3bde:	780c      	ldrb	r4, [r1, #0]
    3be0:	0224      	lsls	r4, r4, #8
    3be2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    3be4:	4b02      	ldr	r3, [pc, #8]	; (3bf0 <system_gclk_chan_set_config+0x14>)
    3be6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3be8:	b2a4      	uxth	r4, r4
    3bea:	4b02      	ldr	r3, [pc, #8]	; (3bf4 <system_gclk_chan_set_config+0x18>)
    3bec:	805c      	strh	r4, [r3, #2]
}
    3bee:	bd10      	pop	{r4, pc}
    3bf0:	00003b81 	.word	0x00003b81
    3bf4:	40000c00 	.word	0x40000c00

00003bf8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3bf8:	b510      	push	{r4, lr}
    3bfa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3bfc:	4b06      	ldr	r3, [pc, #24]	; (3c18 <system_gclk_chan_get_hz+0x20>)
    3bfe:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3c00:	4b06      	ldr	r3, [pc, #24]	; (3c1c <system_gclk_chan_get_hz+0x24>)
    3c02:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3c04:	4b06      	ldr	r3, [pc, #24]	; (3c20 <system_gclk_chan_get_hz+0x28>)
    3c06:	885c      	ldrh	r4, [r3, #2]
    3c08:	0524      	lsls	r4, r4, #20
    3c0a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    3c0c:	4b05      	ldr	r3, [pc, #20]	; (3c24 <system_gclk_chan_get_hz+0x2c>)
    3c0e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3c10:	0020      	movs	r0, r4
    3c12:	4b05      	ldr	r3, [pc, #20]	; (3c28 <system_gclk_chan_get_hz+0x30>)
    3c14:	4798      	blx	r3
}
    3c16:	bd10      	pop	{r4, pc}
    3c18:	00003629 	.word	0x00003629
    3c1c:	40000c02 	.word	0x40000c02
    3c20:	40000c00 	.word	0x40000c00
    3c24:	00003669 	.word	0x00003669
    3c28:	00003ac5 	.word	0x00003ac5

00003c2c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3c2c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3c2e:	78d3      	ldrb	r3, [r2, #3]
    3c30:	2b00      	cmp	r3, #0
    3c32:	d135      	bne.n	3ca0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3c34:	7813      	ldrb	r3, [r2, #0]
    3c36:	2b80      	cmp	r3, #128	; 0x80
    3c38:	d029      	beq.n	3c8e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3c3a:	061b      	lsls	r3, r3, #24
    3c3c:	2480      	movs	r4, #128	; 0x80
    3c3e:	0264      	lsls	r4, r4, #9
    3c40:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3c42:	7854      	ldrb	r4, [r2, #1]
    3c44:	2502      	movs	r5, #2
    3c46:	43ac      	bics	r4, r5
    3c48:	d106      	bne.n	3c58 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3c4a:	7894      	ldrb	r4, [r2, #2]
    3c4c:	2c00      	cmp	r4, #0
    3c4e:	d120      	bne.n	3c92 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    3c50:	2480      	movs	r4, #128	; 0x80
    3c52:	02a4      	lsls	r4, r4, #10
    3c54:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3c56:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3c58:	7854      	ldrb	r4, [r2, #1]
    3c5a:	3c01      	subs	r4, #1
    3c5c:	2c01      	cmp	r4, #1
    3c5e:	d91c      	bls.n	3c9a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3c60:	040d      	lsls	r5, r1, #16
    3c62:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3c64:	24a0      	movs	r4, #160	; 0xa0
    3c66:	05e4      	lsls	r4, r4, #23
    3c68:	432c      	orrs	r4, r5
    3c6a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3c6c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3c6e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3c70:	24d0      	movs	r4, #208	; 0xd0
    3c72:	0624      	lsls	r4, r4, #24
    3c74:	432c      	orrs	r4, r5
    3c76:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3c78:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3c7a:	78d4      	ldrb	r4, [r2, #3]
    3c7c:	2c00      	cmp	r4, #0
    3c7e:	d122      	bne.n	3cc6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3c80:	035b      	lsls	r3, r3, #13
    3c82:	d51c      	bpl.n	3cbe <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3c84:	7893      	ldrb	r3, [r2, #2]
    3c86:	2b01      	cmp	r3, #1
    3c88:	d01e      	beq.n	3cc8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    3c8a:	6141      	str	r1, [r0, #20]
    3c8c:	e017      	b.n	3cbe <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    3c8e:	2300      	movs	r3, #0
    3c90:	e7d7      	b.n	3c42 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3c92:	24c0      	movs	r4, #192	; 0xc0
    3c94:	02e4      	lsls	r4, r4, #11
    3c96:	4323      	orrs	r3, r4
    3c98:	e7dd      	b.n	3c56 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3c9a:	4c0d      	ldr	r4, [pc, #52]	; (3cd0 <_system_pinmux_config+0xa4>)
    3c9c:	4023      	ands	r3, r4
    3c9e:	e7df      	b.n	3c60 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    3ca0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3ca2:	040c      	lsls	r4, r1, #16
    3ca4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3ca6:	23a0      	movs	r3, #160	; 0xa0
    3ca8:	05db      	lsls	r3, r3, #23
    3caa:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3cac:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3cae:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3cb0:	23d0      	movs	r3, #208	; 0xd0
    3cb2:	061b      	lsls	r3, r3, #24
    3cb4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3cb6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    3cb8:	78d3      	ldrb	r3, [r2, #3]
    3cba:	2b00      	cmp	r3, #0
    3cbc:	d103      	bne.n	3cc6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3cbe:	7853      	ldrb	r3, [r2, #1]
    3cc0:	3b01      	subs	r3, #1
    3cc2:	2b01      	cmp	r3, #1
    3cc4:	d902      	bls.n	3ccc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    3cc6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3cc8:	6181      	str	r1, [r0, #24]
    3cca:	e7f8      	b.n	3cbe <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3ccc:	6081      	str	r1, [r0, #8]
}
    3cce:	e7fa      	b.n	3cc6 <_system_pinmux_config+0x9a>
    3cd0:	fffbffff 	.word	0xfffbffff

00003cd4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3cd4:	b510      	push	{r4, lr}
    3cd6:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3cd8:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3cda:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3cdc:	2900      	cmp	r1, #0
    3cde:	d104      	bne.n	3cea <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3ce0:	0943      	lsrs	r3, r0, #5
    3ce2:	01db      	lsls	r3, r3, #7
    3ce4:	4905      	ldr	r1, [pc, #20]	; (3cfc <system_pinmux_pin_set_config+0x28>)
    3ce6:	468c      	mov	ip, r1
    3ce8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3cea:	241f      	movs	r4, #31
    3cec:	4020      	ands	r0, r4
    3cee:	2101      	movs	r1, #1
    3cf0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    3cf2:	0018      	movs	r0, r3
    3cf4:	4b02      	ldr	r3, [pc, #8]	; (3d00 <system_pinmux_pin_set_config+0x2c>)
    3cf6:	4798      	blx	r3
}
    3cf8:	bd10      	pop	{r4, pc}
    3cfa:	46c0      	nop			; (mov r8, r8)
    3cfc:	41004400 	.word	0x41004400
    3d00:	00003c2d 	.word	0x00003c2d

00003d04 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3d04:	4770      	bx	lr
	...

00003d08 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3d08:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3d0a:	4b05      	ldr	r3, [pc, #20]	; (3d20 <system_init+0x18>)
    3d0c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3d0e:	4b05      	ldr	r3, [pc, #20]	; (3d24 <system_init+0x1c>)
    3d10:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3d12:	4b05      	ldr	r3, [pc, #20]	; (3d28 <system_init+0x20>)
    3d14:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3d16:	4b05      	ldr	r3, [pc, #20]	; (3d2c <system_init+0x24>)
    3d18:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3d1a:	4b05      	ldr	r3, [pc, #20]	; (3d30 <system_init+0x28>)
    3d1c:	4798      	blx	r3
}
    3d1e:	bd10      	pop	{r4, pc}
    3d20:	00003891 	.word	0x00003891
    3d24:	00003625 	.word	0x00003625
    3d28:	00003d05 	.word	0x00003d05
    3d2c:	000008d5 	.word	0x000008d5
    3d30:	00003d05 	.word	0x00003d05

00003d34 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3d34:	e7fe      	b.n	3d34 <Dummy_Handler>
	...

00003d38 <Reset_Handler>:
{
    3d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    3d3a:	4a2a      	ldr	r2, [pc, #168]	; (3de4 <Reset_Handler+0xac>)
    3d3c:	4b2a      	ldr	r3, [pc, #168]	; (3de8 <Reset_Handler+0xb0>)
    3d3e:	429a      	cmp	r2, r3
    3d40:	d011      	beq.n	3d66 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    3d42:	001a      	movs	r2, r3
    3d44:	4b29      	ldr	r3, [pc, #164]	; (3dec <Reset_Handler+0xb4>)
    3d46:	429a      	cmp	r2, r3
    3d48:	d20d      	bcs.n	3d66 <Reset_Handler+0x2e>
    3d4a:	4a29      	ldr	r2, [pc, #164]	; (3df0 <Reset_Handler+0xb8>)
    3d4c:	3303      	adds	r3, #3
    3d4e:	1a9b      	subs	r3, r3, r2
    3d50:	089b      	lsrs	r3, r3, #2
    3d52:	3301      	adds	r3, #1
    3d54:	009b      	lsls	r3, r3, #2
    3d56:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3d58:	4823      	ldr	r0, [pc, #140]	; (3de8 <Reset_Handler+0xb0>)
    3d5a:	4922      	ldr	r1, [pc, #136]	; (3de4 <Reset_Handler+0xac>)
    3d5c:	588c      	ldr	r4, [r1, r2]
    3d5e:	5084      	str	r4, [r0, r2]
    3d60:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    3d62:	429a      	cmp	r2, r3
    3d64:	d1fa      	bne.n	3d5c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    3d66:	4a23      	ldr	r2, [pc, #140]	; (3df4 <Reset_Handler+0xbc>)
    3d68:	4b23      	ldr	r3, [pc, #140]	; (3df8 <Reset_Handler+0xc0>)
    3d6a:	429a      	cmp	r2, r3
    3d6c:	d20a      	bcs.n	3d84 <Reset_Handler+0x4c>
    3d6e:	43d3      	mvns	r3, r2
    3d70:	4921      	ldr	r1, [pc, #132]	; (3df8 <Reset_Handler+0xc0>)
    3d72:	185b      	adds	r3, r3, r1
    3d74:	2103      	movs	r1, #3
    3d76:	438b      	bics	r3, r1
    3d78:	3304      	adds	r3, #4
    3d7a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    3d7c:	2100      	movs	r1, #0
    3d7e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3d80:	4293      	cmp	r3, r2
    3d82:	d1fc      	bne.n	3d7e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3d84:	4a1d      	ldr	r2, [pc, #116]	; (3dfc <Reset_Handler+0xc4>)
    3d86:	21ff      	movs	r1, #255	; 0xff
    3d88:	4b1d      	ldr	r3, [pc, #116]	; (3e00 <Reset_Handler+0xc8>)
    3d8a:	438b      	bics	r3, r1
    3d8c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3d8e:	39fd      	subs	r1, #253	; 0xfd
    3d90:	2390      	movs	r3, #144	; 0x90
    3d92:	005b      	lsls	r3, r3, #1
    3d94:	4a1b      	ldr	r2, [pc, #108]	; (3e04 <Reset_Handler+0xcc>)
    3d96:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3d98:	4a1b      	ldr	r2, [pc, #108]	; (3e08 <Reset_Handler+0xd0>)
    3d9a:	78d3      	ldrb	r3, [r2, #3]
    3d9c:	2503      	movs	r5, #3
    3d9e:	43ab      	bics	r3, r5
    3da0:	2402      	movs	r4, #2
    3da2:	4323      	orrs	r3, r4
    3da4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3da6:	78d3      	ldrb	r3, [r2, #3]
    3da8:	270c      	movs	r7, #12
    3daa:	43bb      	bics	r3, r7
    3dac:	2608      	movs	r6, #8
    3dae:	4333      	orrs	r3, r6
    3db0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    3db2:	4b16      	ldr	r3, [pc, #88]	; (3e0c <Reset_Handler+0xd4>)
    3db4:	7b98      	ldrb	r0, [r3, #14]
    3db6:	2230      	movs	r2, #48	; 0x30
    3db8:	4390      	bics	r0, r2
    3dba:	2220      	movs	r2, #32
    3dbc:	4310      	orrs	r0, r2
    3dbe:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3dc0:	7b99      	ldrb	r1, [r3, #14]
    3dc2:	43b9      	bics	r1, r7
    3dc4:	4331      	orrs	r1, r6
    3dc6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3dc8:	7b9a      	ldrb	r2, [r3, #14]
    3dca:	43aa      	bics	r2, r5
    3dcc:	4322      	orrs	r2, r4
    3dce:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3dd0:	4a0f      	ldr	r2, [pc, #60]	; (3e10 <Reset_Handler+0xd8>)
    3dd2:	6853      	ldr	r3, [r2, #4]
    3dd4:	2180      	movs	r1, #128	; 0x80
    3dd6:	430b      	orrs	r3, r1
    3dd8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3dda:	4b0e      	ldr	r3, [pc, #56]	; (3e14 <Reset_Handler+0xdc>)
    3ddc:	4798      	blx	r3
        main();
    3dde:	4b0e      	ldr	r3, [pc, #56]	; (3e18 <Reset_Handler+0xe0>)
    3de0:	4798      	blx	r3
    3de2:	e7fe      	b.n	3de2 <Reset_Handler+0xaa>
    3de4:	0000547c 	.word	0x0000547c
    3de8:	20000000 	.word	0x20000000
    3dec:	20000108 	.word	0x20000108
    3df0:	20000004 	.word	0x20000004
    3df4:	20000108 	.word	0x20000108
    3df8:	200007ec 	.word	0x200007ec
    3dfc:	e000ed00 	.word	0xe000ed00
    3e00:	00000000 	.word	0x00000000
    3e04:	41007000 	.word	0x41007000
    3e08:	41005000 	.word	0x41005000
    3e0c:	41004800 	.word	0x41004800
    3e10:	41004000 	.word	0x41004000
    3e14:	00004221 	.word	0x00004221
    3e18:	00003e59 	.word	0x00003e59

00003e1c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3e1c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3e1e:	4a06      	ldr	r2, [pc, #24]	; (3e38 <_sbrk+0x1c>)
    3e20:	6812      	ldr	r2, [r2, #0]
    3e22:	2a00      	cmp	r2, #0
    3e24:	d004      	beq.n	3e30 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3e26:	4a04      	ldr	r2, [pc, #16]	; (3e38 <_sbrk+0x1c>)
    3e28:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3e2a:	18c3      	adds	r3, r0, r3
    3e2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3e2e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3e30:	4902      	ldr	r1, [pc, #8]	; (3e3c <_sbrk+0x20>)
    3e32:	4a01      	ldr	r2, [pc, #4]	; (3e38 <_sbrk+0x1c>)
    3e34:	6011      	str	r1, [r2, #0]
    3e36:	e7f6      	b.n	3e26 <_sbrk+0xa>
    3e38:	20000320 	.word	0x20000320
    3e3c:	200027f0 	.word	0x200027f0

00003e40 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3e40:	2001      	movs	r0, #1
    3e42:	4240      	negs	r0, r0
    3e44:	4770      	bx	lr

00003e46 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    3e46:	2380      	movs	r3, #128	; 0x80
    3e48:	019b      	lsls	r3, r3, #6
    3e4a:	604b      	str	r3, [r1, #4]

	return 0;
}
    3e4c:	2000      	movs	r0, #0
    3e4e:	4770      	bx	lr

00003e50 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    3e50:	2001      	movs	r0, #1
    3e52:	4770      	bx	lr

00003e54 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3e54:	2000      	movs	r0, #0
    3e56:	4770      	bx	lr

00003e58 <main>:
#include "spi.h"

uint8_t msg[] = "Hello World !\n\r";

int main (void)
{
    3e58:	b510      	push	{r4, lr}
	system_init();
    3e5a:	4b0a      	ldr	r3, [pc, #40]	; (3e84 <main+0x2c>)
    3e5c:	4798      	blx	r3
	irq_initialize_vectors();
	cpu_irq_enable();
    3e5e:	2201      	movs	r2, #1
    3e60:	4b09      	ldr	r3, [pc, #36]	; (3e88 <main+0x30>)
    3e62:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    3e64:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3e68:	b662      	cpsie	i

	console_init();
    3e6a:	4b08      	ldr	r3, [pc, #32]	; (3e8c <main+0x34>)
    3e6c:	4798      	blx	r3
	spi_initialize(true);
    3e6e:	2001      	movs	r0, #1
    3e70:	4b07      	ldr	r3, [pc, #28]	; (3e90 <main+0x38>)
    3e72:	4798      	blx	r3
	spi_write_bytes(msg, sizeof(msg));
    3e74:	2110      	movs	r1, #16
    3e76:	4807      	ldr	r0, [pc, #28]	; (3e94 <main+0x3c>)
    3e78:	4b07      	ldr	r3, [pc, #28]	; (3e98 <main+0x40>)
    3e7a:	4798      	blx	r3
//	pwm_controller_init();
	/* Insert application code here, after the board has been initialized. */
	init_usb_intf();
    3e7c:	4b07      	ldr	r3, [pc, #28]	; (3e9c <main+0x44>)
    3e7e:	4798      	blx	r3
    3e80:	e7fe      	b.n	3e80 <main+0x28>
    3e82:	46c0      	nop			; (mov r8, r8)
    3e84:	00003d09 	.word	0x00003d09
    3e88:	20000090 	.word	0x20000090
    3e8c:	00002475 	.word	0x00002475
    3e90:	000025c5 	.word	0x000025c5
    3e94:	20000094 	.word	0x20000094
    3e98:	00002695 	.word	0x00002695
    3e9c:	00000149 	.word	0x00000149

00003ea0 <__udivsi3>:
    3ea0:	2200      	movs	r2, #0
    3ea2:	0843      	lsrs	r3, r0, #1
    3ea4:	428b      	cmp	r3, r1
    3ea6:	d374      	bcc.n	3f92 <__udivsi3+0xf2>
    3ea8:	0903      	lsrs	r3, r0, #4
    3eaa:	428b      	cmp	r3, r1
    3eac:	d35f      	bcc.n	3f6e <__udivsi3+0xce>
    3eae:	0a03      	lsrs	r3, r0, #8
    3eb0:	428b      	cmp	r3, r1
    3eb2:	d344      	bcc.n	3f3e <__udivsi3+0x9e>
    3eb4:	0b03      	lsrs	r3, r0, #12
    3eb6:	428b      	cmp	r3, r1
    3eb8:	d328      	bcc.n	3f0c <__udivsi3+0x6c>
    3eba:	0c03      	lsrs	r3, r0, #16
    3ebc:	428b      	cmp	r3, r1
    3ebe:	d30d      	bcc.n	3edc <__udivsi3+0x3c>
    3ec0:	22ff      	movs	r2, #255	; 0xff
    3ec2:	0209      	lsls	r1, r1, #8
    3ec4:	ba12      	rev	r2, r2
    3ec6:	0c03      	lsrs	r3, r0, #16
    3ec8:	428b      	cmp	r3, r1
    3eca:	d302      	bcc.n	3ed2 <__udivsi3+0x32>
    3ecc:	1212      	asrs	r2, r2, #8
    3ece:	0209      	lsls	r1, r1, #8
    3ed0:	d065      	beq.n	3f9e <__udivsi3+0xfe>
    3ed2:	0b03      	lsrs	r3, r0, #12
    3ed4:	428b      	cmp	r3, r1
    3ed6:	d319      	bcc.n	3f0c <__udivsi3+0x6c>
    3ed8:	e000      	b.n	3edc <__udivsi3+0x3c>
    3eda:	0a09      	lsrs	r1, r1, #8
    3edc:	0bc3      	lsrs	r3, r0, #15
    3ede:	428b      	cmp	r3, r1
    3ee0:	d301      	bcc.n	3ee6 <__udivsi3+0x46>
    3ee2:	03cb      	lsls	r3, r1, #15
    3ee4:	1ac0      	subs	r0, r0, r3
    3ee6:	4152      	adcs	r2, r2
    3ee8:	0b83      	lsrs	r3, r0, #14
    3eea:	428b      	cmp	r3, r1
    3eec:	d301      	bcc.n	3ef2 <__udivsi3+0x52>
    3eee:	038b      	lsls	r3, r1, #14
    3ef0:	1ac0      	subs	r0, r0, r3
    3ef2:	4152      	adcs	r2, r2
    3ef4:	0b43      	lsrs	r3, r0, #13
    3ef6:	428b      	cmp	r3, r1
    3ef8:	d301      	bcc.n	3efe <__udivsi3+0x5e>
    3efa:	034b      	lsls	r3, r1, #13
    3efc:	1ac0      	subs	r0, r0, r3
    3efe:	4152      	adcs	r2, r2
    3f00:	0b03      	lsrs	r3, r0, #12
    3f02:	428b      	cmp	r3, r1
    3f04:	d301      	bcc.n	3f0a <__udivsi3+0x6a>
    3f06:	030b      	lsls	r3, r1, #12
    3f08:	1ac0      	subs	r0, r0, r3
    3f0a:	4152      	adcs	r2, r2
    3f0c:	0ac3      	lsrs	r3, r0, #11
    3f0e:	428b      	cmp	r3, r1
    3f10:	d301      	bcc.n	3f16 <__udivsi3+0x76>
    3f12:	02cb      	lsls	r3, r1, #11
    3f14:	1ac0      	subs	r0, r0, r3
    3f16:	4152      	adcs	r2, r2
    3f18:	0a83      	lsrs	r3, r0, #10
    3f1a:	428b      	cmp	r3, r1
    3f1c:	d301      	bcc.n	3f22 <__udivsi3+0x82>
    3f1e:	028b      	lsls	r3, r1, #10
    3f20:	1ac0      	subs	r0, r0, r3
    3f22:	4152      	adcs	r2, r2
    3f24:	0a43      	lsrs	r3, r0, #9
    3f26:	428b      	cmp	r3, r1
    3f28:	d301      	bcc.n	3f2e <__udivsi3+0x8e>
    3f2a:	024b      	lsls	r3, r1, #9
    3f2c:	1ac0      	subs	r0, r0, r3
    3f2e:	4152      	adcs	r2, r2
    3f30:	0a03      	lsrs	r3, r0, #8
    3f32:	428b      	cmp	r3, r1
    3f34:	d301      	bcc.n	3f3a <__udivsi3+0x9a>
    3f36:	020b      	lsls	r3, r1, #8
    3f38:	1ac0      	subs	r0, r0, r3
    3f3a:	4152      	adcs	r2, r2
    3f3c:	d2cd      	bcs.n	3eda <__udivsi3+0x3a>
    3f3e:	09c3      	lsrs	r3, r0, #7
    3f40:	428b      	cmp	r3, r1
    3f42:	d301      	bcc.n	3f48 <__udivsi3+0xa8>
    3f44:	01cb      	lsls	r3, r1, #7
    3f46:	1ac0      	subs	r0, r0, r3
    3f48:	4152      	adcs	r2, r2
    3f4a:	0983      	lsrs	r3, r0, #6
    3f4c:	428b      	cmp	r3, r1
    3f4e:	d301      	bcc.n	3f54 <__udivsi3+0xb4>
    3f50:	018b      	lsls	r3, r1, #6
    3f52:	1ac0      	subs	r0, r0, r3
    3f54:	4152      	adcs	r2, r2
    3f56:	0943      	lsrs	r3, r0, #5
    3f58:	428b      	cmp	r3, r1
    3f5a:	d301      	bcc.n	3f60 <__udivsi3+0xc0>
    3f5c:	014b      	lsls	r3, r1, #5
    3f5e:	1ac0      	subs	r0, r0, r3
    3f60:	4152      	adcs	r2, r2
    3f62:	0903      	lsrs	r3, r0, #4
    3f64:	428b      	cmp	r3, r1
    3f66:	d301      	bcc.n	3f6c <__udivsi3+0xcc>
    3f68:	010b      	lsls	r3, r1, #4
    3f6a:	1ac0      	subs	r0, r0, r3
    3f6c:	4152      	adcs	r2, r2
    3f6e:	08c3      	lsrs	r3, r0, #3
    3f70:	428b      	cmp	r3, r1
    3f72:	d301      	bcc.n	3f78 <__udivsi3+0xd8>
    3f74:	00cb      	lsls	r3, r1, #3
    3f76:	1ac0      	subs	r0, r0, r3
    3f78:	4152      	adcs	r2, r2
    3f7a:	0883      	lsrs	r3, r0, #2
    3f7c:	428b      	cmp	r3, r1
    3f7e:	d301      	bcc.n	3f84 <__udivsi3+0xe4>
    3f80:	008b      	lsls	r3, r1, #2
    3f82:	1ac0      	subs	r0, r0, r3
    3f84:	4152      	adcs	r2, r2
    3f86:	0843      	lsrs	r3, r0, #1
    3f88:	428b      	cmp	r3, r1
    3f8a:	d301      	bcc.n	3f90 <__udivsi3+0xf0>
    3f8c:	004b      	lsls	r3, r1, #1
    3f8e:	1ac0      	subs	r0, r0, r3
    3f90:	4152      	adcs	r2, r2
    3f92:	1a41      	subs	r1, r0, r1
    3f94:	d200      	bcs.n	3f98 <__udivsi3+0xf8>
    3f96:	4601      	mov	r1, r0
    3f98:	4152      	adcs	r2, r2
    3f9a:	4610      	mov	r0, r2
    3f9c:	4770      	bx	lr
    3f9e:	e7ff      	b.n	3fa0 <__udivsi3+0x100>
    3fa0:	b501      	push	{r0, lr}
    3fa2:	2000      	movs	r0, #0
    3fa4:	f000 f8f0 	bl	4188 <__aeabi_idiv0>
    3fa8:	bd02      	pop	{r1, pc}
    3faa:	46c0      	nop			; (mov r8, r8)

00003fac <__aeabi_uidivmod>:
    3fac:	2900      	cmp	r1, #0
    3fae:	d0f7      	beq.n	3fa0 <__udivsi3+0x100>
    3fb0:	e776      	b.n	3ea0 <__udivsi3>
    3fb2:	4770      	bx	lr

00003fb4 <__divsi3>:
    3fb4:	4603      	mov	r3, r0
    3fb6:	430b      	orrs	r3, r1
    3fb8:	d47f      	bmi.n	40ba <__divsi3+0x106>
    3fba:	2200      	movs	r2, #0
    3fbc:	0843      	lsrs	r3, r0, #1
    3fbe:	428b      	cmp	r3, r1
    3fc0:	d374      	bcc.n	40ac <__divsi3+0xf8>
    3fc2:	0903      	lsrs	r3, r0, #4
    3fc4:	428b      	cmp	r3, r1
    3fc6:	d35f      	bcc.n	4088 <__divsi3+0xd4>
    3fc8:	0a03      	lsrs	r3, r0, #8
    3fca:	428b      	cmp	r3, r1
    3fcc:	d344      	bcc.n	4058 <__divsi3+0xa4>
    3fce:	0b03      	lsrs	r3, r0, #12
    3fd0:	428b      	cmp	r3, r1
    3fd2:	d328      	bcc.n	4026 <__divsi3+0x72>
    3fd4:	0c03      	lsrs	r3, r0, #16
    3fd6:	428b      	cmp	r3, r1
    3fd8:	d30d      	bcc.n	3ff6 <__divsi3+0x42>
    3fda:	22ff      	movs	r2, #255	; 0xff
    3fdc:	0209      	lsls	r1, r1, #8
    3fde:	ba12      	rev	r2, r2
    3fe0:	0c03      	lsrs	r3, r0, #16
    3fe2:	428b      	cmp	r3, r1
    3fe4:	d302      	bcc.n	3fec <__divsi3+0x38>
    3fe6:	1212      	asrs	r2, r2, #8
    3fe8:	0209      	lsls	r1, r1, #8
    3fea:	d065      	beq.n	40b8 <__divsi3+0x104>
    3fec:	0b03      	lsrs	r3, r0, #12
    3fee:	428b      	cmp	r3, r1
    3ff0:	d319      	bcc.n	4026 <__divsi3+0x72>
    3ff2:	e000      	b.n	3ff6 <__divsi3+0x42>
    3ff4:	0a09      	lsrs	r1, r1, #8
    3ff6:	0bc3      	lsrs	r3, r0, #15
    3ff8:	428b      	cmp	r3, r1
    3ffa:	d301      	bcc.n	4000 <__divsi3+0x4c>
    3ffc:	03cb      	lsls	r3, r1, #15
    3ffe:	1ac0      	subs	r0, r0, r3
    4000:	4152      	adcs	r2, r2
    4002:	0b83      	lsrs	r3, r0, #14
    4004:	428b      	cmp	r3, r1
    4006:	d301      	bcc.n	400c <__divsi3+0x58>
    4008:	038b      	lsls	r3, r1, #14
    400a:	1ac0      	subs	r0, r0, r3
    400c:	4152      	adcs	r2, r2
    400e:	0b43      	lsrs	r3, r0, #13
    4010:	428b      	cmp	r3, r1
    4012:	d301      	bcc.n	4018 <__divsi3+0x64>
    4014:	034b      	lsls	r3, r1, #13
    4016:	1ac0      	subs	r0, r0, r3
    4018:	4152      	adcs	r2, r2
    401a:	0b03      	lsrs	r3, r0, #12
    401c:	428b      	cmp	r3, r1
    401e:	d301      	bcc.n	4024 <__divsi3+0x70>
    4020:	030b      	lsls	r3, r1, #12
    4022:	1ac0      	subs	r0, r0, r3
    4024:	4152      	adcs	r2, r2
    4026:	0ac3      	lsrs	r3, r0, #11
    4028:	428b      	cmp	r3, r1
    402a:	d301      	bcc.n	4030 <__divsi3+0x7c>
    402c:	02cb      	lsls	r3, r1, #11
    402e:	1ac0      	subs	r0, r0, r3
    4030:	4152      	adcs	r2, r2
    4032:	0a83      	lsrs	r3, r0, #10
    4034:	428b      	cmp	r3, r1
    4036:	d301      	bcc.n	403c <__divsi3+0x88>
    4038:	028b      	lsls	r3, r1, #10
    403a:	1ac0      	subs	r0, r0, r3
    403c:	4152      	adcs	r2, r2
    403e:	0a43      	lsrs	r3, r0, #9
    4040:	428b      	cmp	r3, r1
    4042:	d301      	bcc.n	4048 <__divsi3+0x94>
    4044:	024b      	lsls	r3, r1, #9
    4046:	1ac0      	subs	r0, r0, r3
    4048:	4152      	adcs	r2, r2
    404a:	0a03      	lsrs	r3, r0, #8
    404c:	428b      	cmp	r3, r1
    404e:	d301      	bcc.n	4054 <__divsi3+0xa0>
    4050:	020b      	lsls	r3, r1, #8
    4052:	1ac0      	subs	r0, r0, r3
    4054:	4152      	adcs	r2, r2
    4056:	d2cd      	bcs.n	3ff4 <__divsi3+0x40>
    4058:	09c3      	lsrs	r3, r0, #7
    405a:	428b      	cmp	r3, r1
    405c:	d301      	bcc.n	4062 <__divsi3+0xae>
    405e:	01cb      	lsls	r3, r1, #7
    4060:	1ac0      	subs	r0, r0, r3
    4062:	4152      	adcs	r2, r2
    4064:	0983      	lsrs	r3, r0, #6
    4066:	428b      	cmp	r3, r1
    4068:	d301      	bcc.n	406e <__divsi3+0xba>
    406a:	018b      	lsls	r3, r1, #6
    406c:	1ac0      	subs	r0, r0, r3
    406e:	4152      	adcs	r2, r2
    4070:	0943      	lsrs	r3, r0, #5
    4072:	428b      	cmp	r3, r1
    4074:	d301      	bcc.n	407a <__divsi3+0xc6>
    4076:	014b      	lsls	r3, r1, #5
    4078:	1ac0      	subs	r0, r0, r3
    407a:	4152      	adcs	r2, r2
    407c:	0903      	lsrs	r3, r0, #4
    407e:	428b      	cmp	r3, r1
    4080:	d301      	bcc.n	4086 <__divsi3+0xd2>
    4082:	010b      	lsls	r3, r1, #4
    4084:	1ac0      	subs	r0, r0, r3
    4086:	4152      	adcs	r2, r2
    4088:	08c3      	lsrs	r3, r0, #3
    408a:	428b      	cmp	r3, r1
    408c:	d301      	bcc.n	4092 <__divsi3+0xde>
    408e:	00cb      	lsls	r3, r1, #3
    4090:	1ac0      	subs	r0, r0, r3
    4092:	4152      	adcs	r2, r2
    4094:	0883      	lsrs	r3, r0, #2
    4096:	428b      	cmp	r3, r1
    4098:	d301      	bcc.n	409e <__divsi3+0xea>
    409a:	008b      	lsls	r3, r1, #2
    409c:	1ac0      	subs	r0, r0, r3
    409e:	4152      	adcs	r2, r2
    40a0:	0843      	lsrs	r3, r0, #1
    40a2:	428b      	cmp	r3, r1
    40a4:	d301      	bcc.n	40aa <__divsi3+0xf6>
    40a6:	004b      	lsls	r3, r1, #1
    40a8:	1ac0      	subs	r0, r0, r3
    40aa:	4152      	adcs	r2, r2
    40ac:	1a41      	subs	r1, r0, r1
    40ae:	d200      	bcs.n	40b2 <__divsi3+0xfe>
    40b0:	4601      	mov	r1, r0
    40b2:	4152      	adcs	r2, r2
    40b4:	4610      	mov	r0, r2
    40b6:	4770      	bx	lr
    40b8:	e05d      	b.n	4176 <__divsi3+0x1c2>
    40ba:	0fca      	lsrs	r2, r1, #31
    40bc:	d000      	beq.n	40c0 <__divsi3+0x10c>
    40be:	4249      	negs	r1, r1
    40c0:	1003      	asrs	r3, r0, #32
    40c2:	d300      	bcc.n	40c6 <__divsi3+0x112>
    40c4:	4240      	negs	r0, r0
    40c6:	4053      	eors	r3, r2
    40c8:	2200      	movs	r2, #0
    40ca:	469c      	mov	ip, r3
    40cc:	0903      	lsrs	r3, r0, #4
    40ce:	428b      	cmp	r3, r1
    40d0:	d32d      	bcc.n	412e <__divsi3+0x17a>
    40d2:	0a03      	lsrs	r3, r0, #8
    40d4:	428b      	cmp	r3, r1
    40d6:	d312      	bcc.n	40fe <__divsi3+0x14a>
    40d8:	22fc      	movs	r2, #252	; 0xfc
    40da:	0189      	lsls	r1, r1, #6
    40dc:	ba12      	rev	r2, r2
    40de:	0a03      	lsrs	r3, r0, #8
    40e0:	428b      	cmp	r3, r1
    40e2:	d30c      	bcc.n	40fe <__divsi3+0x14a>
    40e4:	0189      	lsls	r1, r1, #6
    40e6:	1192      	asrs	r2, r2, #6
    40e8:	428b      	cmp	r3, r1
    40ea:	d308      	bcc.n	40fe <__divsi3+0x14a>
    40ec:	0189      	lsls	r1, r1, #6
    40ee:	1192      	asrs	r2, r2, #6
    40f0:	428b      	cmp	r3, r1
    40f2:	d304      	bcc.n	40fe <__divsi3+0x14a>
    40f4:	0189      	lsls	r1, r1, #6
    40f6:	d03a      	beq.n	416e <__divsi3+0x1ba>
    40f8:	1192      	asrs	r2, r2, #6
    40fa:	e000      	b.n	40fe <__divsi3+0x14a>
    40fc:	0989      	lsrs	r1, r1, #6
    40fe:	09c3      	lsrs	r3, r0, #7
    4100:	428b      	cmp	r3, r1
    4102:	d301      	bcc.n	4108 <__divsi3+0x154>
    4104:	01cb      	lsls	r3, r1, #7
    4106:	1ac0      	subs	r0, r0, r3
    4108:	4152      	adcs	r2, r2
    410a:	0983      	lsrs	r3, r0, #6
    410c:	428b      	cmp	r3, r1
    410e:	d301      	bcc.n	4114 <__divsi3+0x160>
    4110:	018b      	lsls	r3, r1, #6
    4112:	1ac0      	subs	r0, r0, r3
    4114:	4152      	adcs	r2, r2
    4116:	0943      	lsrs	r3, r0, #5
    4118:	428b      	cmp	r3, r1
    411a:	d301      	bcc.n	4120 <__divsi3+0x16c>
    411c:	014b      	lsls	r3, r1, #5
    411e:	1ac0      	subs	r0, r0, r3
    4120:	4152      	adcs	r2, r2
    4122:	0903      	lsrs	r3, r0, #4
    4124:	428b      	cmp	r3, r1
    4126:	d301      	bcc.n	412c <__divsi3+0x178>
    4128:	010b      	lsls	r3, r1, #4
    412a:	1ac0      	subs	r0, r0, r3
    412c:	4152      	adcs	r2, r2
    412e:	08c3      	lsrs	r3, r0, #3
    4130:	428b      	cmp	r3, r1
    4132:	d301      	bcc.n	4138 <__divsi3+0x184>
    4134:	00cb      	lsls	r3, r1, #3
    4136:	1ac0      	subs	r0, r0, r3
    4138:	4152      	adcs	r2, r2
    413a:	0883      	lsrs	r3, r0, #2
    413c:	428b      	cmp	r3, r1
    413e:	d301      	bcc.n	4144 <__divsi3+0x190>
    4140:	008b      	lsls	r3, r1, #2
    4142:	1ac0      	subs	r0, r0, r3
    4144:	4152      	adcs	r2, r2
    4146:	d2d9      	bcs.n	40fc <__divsi3+0x148>
    4148:	0843      	lsrs	r3, r0, #1
    414a:	428b      	cmp	r3, r1
    414c:	d301      	bcc.n	4152 <__divsi3+0x19e>
    414e:	004b      	lsls	r3, r1, #1
    4150:	1ac0      	subs	r0, r0, r3
    4152:	4152      	adcs	r2, r2
    4154:	1a41      	subs	r1, r0, r1
    4156:	d200      	bcs.n	415a <__divsi3+0x1a6>
    4158:	4601      	mov	r1, r0
    415a:	4663      	mov	r3, ip
    415c:	4152      	adcs	r2, r2
    415e:	105b      	asrs	r3, r3, #1
    4160:	4610      	mov	r0, r2
    4162:	d301      	bcc.n	4168 <__divsi3+0x1b4>
    4164:	4240      	negs	r0, r0
    4166:	2b00      	cmp	r3, #0
    4168:	d500      	bpl.n	416c <__divsi3+0x1b8>
    416a:	4249      	negs	r1, r1
    416c:	4770      	bx	lr
    416e:	4663      	mov	r3, ip
    4170:	105b      	asrs	r3, r3, #1
    4172:	d300      	bcc.n	4176 <__divsi3+0x1c2>
    4174:	4240      	negs	r0, r0
    4176:	b501      	push	{r0, lr}
    4178:	2000      	movs	r0, #0
    417a:	f000 f805 	bl	4188 <__aeabi_idiv0>
    417e:	bd02      	pop	{r1, pc}

00004180 <__aeabi_idivmod>:
    4180:	2900      	cmp	r1, #0
    4182:	d0f8      	beq.n	4176 <__divsi3+0x1c2>
    4184:	e716      	b.n	3fb4 <__divsi3>
    4186:	4770      	bx	lr

00004188 <__aeabi_idiv0>:
    4188:	4770      	bx	lr
    418a:	46c0      	nop			; (mov r8, r8)

0000418c <__ctzsi2>:
    418c:	4241      	negs	r1, r0
    418e:	4008      	ands	r0, r1
    4190:	211c      	movs	r1, #28
    4192:	2301      	movs	r3, #1
    4194:	041b      	lsls	r3, r3, #16
    4196:	4298      	cmp	r0, r3
    4198:	d301      	bcc.n	419e <__ctzsi2+0x12>
    419a:	0c00      	lsrs	r0, r0, #16
    419c:	3910      	subs	r1, #16
    419e:	0a1b      	lsrs	r3, r3, #8
    41a0:	4298      	cmp	r0, r3
    41a2:	d301      	bcc.n	41a8 <__ctzsi2+0x1c>
    41a4:	0a00      	lsrs	r0, r0, #8
    41a6:	3908      	subs	r1, #8
    41a8:	091b      	lsrs	r3, r3, #4
    41aa:	4298      	cmp	r0, r3
    41ac:	d301      	bcc.n	41b2 <__ctzsi2+0x26>
    41ae:	0900      	lsrs	r0, r0, #4
    41b0:	3904      	subs	r1, #4
    41b2:	a202      	add	r2, pc, #8	; (adr r2, 41bc <__ctzsi2+0x30>)
    41b4:	5c10      	ldrb	r0, [r2, r0]
    41b6:	1a40      	subs	r0, r0, r1
    41b8:	4770      	bx	lr
    41ba:	46c0      	nop			; (mov r8, r8)
    41bc:	1d1d1c1b 	.word	0x1d1d1c1b
    41c0:	1e1e1e1e 	.word	0x1e1e1e1e
    41c4:	1f1f1f1f 	.word	0x1f1f1f1f
    41c8:	1f1f1f1f 	.word	0x1f1f1f1f

000041cc <__aeabi_lmul>:
    41cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    41ce:	46ce      	mov	lr, r9
    41d0:	4647      	mov	r7, r8
    41d2:	0415      	lsls	r5, r2, #16
    41d4:	0c2d      	lsrs	r5, r5, #16
    41d6:	002e      	movs	r6, r5
    41d8:	b580      	push	{r7, lr}
    41da:	0407      	lsls	r7, r0, #16
    41dc:	0c14      	lsrs	r4, r2, #16
    41de:	0c3f      	lsrs	r7, r7, #16
    41e0:	4699      	mov	r9, r3
    41e2:	0c03      	lsrs	r3, r0, #16
    41e4:	437e      	muls	r6, r7
    41e6:	435d      	muls	r5, r3
    41e8:	4367      	muls	r7, r4
    41ea:	4363      	muls	r3, r4
    41ec:	197f      	adds	r7, r7, r5
    41ee:	0c34      	lsrs	r4, r6, #16
    41f0:	19e4      	adds	r4, r4, r7
    41f2:	469c      	mov	ip, r3
    41f4:	42a5      	cmp	r5, r4
    41f6:	d903      	bls.n	4200 <__aeabi_lmul+0x34>
    41f8:	2380      	movs	r3, #128	; 0x80
    41fa:	025b      	lsls	r3, r3, #9
    41fc:	4698      	mov	r8, r3
    41fe:	44c4      	add	ip, r8
    4200:	464b      	mov	r3, r9
    4202:	4351      	muls	r1, r2
    4204:	4343      	muls	r3, r0
    4206:	0436      	lsls	r6, r6, #16
    4208:	0c36      	lsrs	r6, r6, #16
    420a:	0c25      	lsrs	r5, r4, #16
    420c:	0424      	lsls	r4, r4, #16
    420e:	4465      	add	r5, ip
    4210:	19a4      	adds	r4, r4, r6
    4212:	1859      	adds	r1, r3, r1
    4214:	1949      	adds	r1, r1, r5
    4216:	0020      	movs	r0, r4
    4218:	bc0c      	pop	{r2, r3}
    421a:	4690      	mov	r8, r2
    421c:	4699      	mov	r9, r3
    421e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004220 <__libc_init_array>:
    4220:	b570      	push	{r4, r5, r6, lr}
    4222:	2600      	movs	r6, #0
    4224:	4d0c      	ldr	r5, [pc, #48]	; (4258 <__libc_init_array+0x38>)
    4226:	4c0d      	ldr	r4, [pc, #52]	; (425c <__libc_init_array+0x3c>)
    4228:	1b64      	subs	r4, r4, r5
    422a:	10a4      	asrs	r4, r4, #2
    422c:	42a6      	cmp	r6, r4
    422e:	d109      	bne.n	4244 <__libc_init_array+0x24>
    4230:	2600      	movs	r6, #0
    4232:	f001 f913 	bl	545c <_init>
    4236:	4d0a      	ldr	r5, [pc, #40]	; (4260 <__libc_init_array+0x40>)
    4238:	4c0a      	ldr	r4, [pc, #40]	; (4264 <__libc_init_array+0x44>)
    423a:	1b64      	subs	r4, r4, r5
    423c:	10a4      	asrs	r4, r4, #2
    423e:	42a6      	cmp	r6, r4
    4240:	d105      	bne.n	424e <__libc_init_array+0x2e>
    4242:	bd70      	pop	{r4, r5, r6, pc}
    4244:	00b3      	lsls	r3, r6, #2
    4246:	58eb      	ldr	r3, [r5, r3]
    4248:	4798      	blx	r3
    424a:	3601      	adds	r6, #1
    424c:	e7ee      	b.n	422c <__libc_init_array+0xc>
    424e:	00b3      	lsls	r3, r6, #2
    4250:	58eb      	ldr	r3, [r5, r3]
    4252:	4798      	blx	r3
    4254:	3601      	adds	r6, #1
    4256:	e7f2      	b.n	423e <__libc_init_array+0x1e>
    4258:	00005468 	.word	0x00005468
    425c:	00005468 	.word	0x00005468
    4260:	00005468 	.word	0x00005468
    4264:	0000546c 	.word	0x0000546c

00004268 <memcpy>:
    4268:	2300      	movs	r3, #0
    426a:	b510      	push	{r4, lr}
    426c:	429a      	cmp	r2, r3
    426e:	d100      	bne.n	4272 <memcpy+0xa>
    4270:	bd10      	pop	{r4, pc}
    4272:	5ccc      	ldrb	r4, [r1, r3]
    4274:	54c4      	strb	r4, [r0, r3]
    4276:	3301      	adds	r3, #1
    4278:	e7f8      	b.n	426c <memcpy+0x4>

0000427a <memset>:
    427a:	0003      	movs	r3, r0
    427c:	1882      	adds	r2, r0, r2
    427e:	4293      	cmp	r3, r2
    4280:	d100      	bne.n	4284 <memset+0xa>
    4282:	4770      	bx	lr
    4284:	7019      	strb	r1, [r3, #0]
    4286:	3301      	adds	r3, #1
    4288:	e7f9      	b.n	427e <memset+0x4>
	...

0000428c <iprintf>:
    428c:	b40f      	push	{r0, r1, r2, r3}
    428e:	4b0b      	ldr	r3, [pc, #44]	; (42bc <iprintf+0x30>)
    4290:	b513      	push	{r0, r1, r4, lr}
    4292:	681c      	ldr	r4, [r3, #0]
    4294:	2c00      	cmp	r4, #0
    4296:	d005      	beq.n	42a4 <iprintf+0x18>
    4298:	69a3      	ldr	r3, [r4, #24]
    429a:	2b00      	cmp	r3, #0
    429c:	d102      	bne.n	42a4 <iprintf+0x18>
    429e:	0020      	movs	r0, r4
    42a0:	f000 f9bc 	bl	461c <__sinit>
    42a4:	ab05      	add	r3, sp, #20
    42a6:	9a04      	ldr	r2, [sp, #16]
    42a8:	68a1      	ldr	r1, [r4, #8]
    42aa:	0020      	movs	r0, r4
    42ac:	9301      	str	r3, [sp, #4]
    42ae:	f000 fb91 	bl	49d4 <_vfiprintf_r>
    42b2:	bc16      	pop	{r1, r2, r4}
    42b4:	bc08      	pop	{r3}
    42b6:	b004      	add	sp, #16
    42b8:	4718      	bx	r3
    42ba:	46c0      	nop			; (mov r8, r8)
    42bc:	200000a4 	.word	0x200000a4

000042c0 <setbuf>:
    42c0:	424a      	negs	r2, r1
    42c2:	414a      	adcs	r2, r1
    42c4:	2380      	movs	r3, #128	; 0x80
    42c6:	b510      	push	{r4, lr}
    42c8:	0052      	lsls	r2, r2, #1
    42ca:	00db      	lsls	r3, r3, #3
    42cc:	f000 f802 	bl	42d4 <setvbuf>
    42d0:	bd10      	pop	{r4, pc}
	...

000042d4 <setvbuf>:
    42d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42d6:	001d      	movs	r5, r3
    42d8:	4b4f      	ldr	r3, [pc, #316]	; (4418 <setvbuf+0x144>)
    42da:	b085      	sub	sp, #20
    42dc:	681e      	ldr	r6, [r3, #0]
    42de:	0004      	movs	r4, r0
    42e0:	000f      	movs	r7, r1
    42e2:	9200      	str	r2, [sp, #0]
    42e4:	2e00      	cmp	r6, #0
    42e6:	d005      	beq.n	42f4 <setvbuf+0x20>
    42e8:	69b3      	ldr	r3, [r6, #24]
    42ea:	2b00      	cmp	r3, #0
    42ec:	d102      	bne.n	42f4 <setvbuf+0x20>
    42ee:	0030      	movs	r0, r6
    42f0:	f000 f994 	bl	461c <__sinit>
    42f4:	4b49      	ldr	r3, [pc, #292]	; (441c <setvbuf+0x148>)
    42f6:	429c      	cmp	r4, r3
    42f8:	d150      	bne.n	439c <setvbuf+0xc8>
    42fa:	6874      	ldr	r4, [r6, #4]
    42fc:	9b00      	ldr	r3, [sp, #0]
    42fe:	2b02      	cmp	r3, #2
    4300:	d005      	beq.n	430e <setvbuf+0x3a>
    4302:	2b01      	cmp	r3, #1
    4304:	d900      	bls.n	4308 <setvbuf+0x34>
    4306:	e084      	b.n	4412 <setvbuf+0x13e>
    4308:	2d00      	cmp	r5, #0
    430a:	da00      	bge.n	430e <setvbuf+0x3a>
    430c:	e081      	b.n	4412 <setvbuf+0x13e>
    430e:	0021      	movs	r1, r4
    4310:	0030      	movs	r0, r6
    4312:	f000 f915 	bl	4540 <_fflush_r>
    4316:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4318:	2900      	cmp	r1, #0
    431a:	d008      	beq.n	432e <setvbuf+0x5a>
    431c:	0023      	movs	r3, r4
    431e:	3344      	adds	r3, #68	; 0x44
    4320:	4299      	cmp	r1, r3
    4322:	d002      	beq.n	432a <setvbuf+0x56>
    4324:	0030      	movs	r0, r6
    4326:	f000 fa85 	bl	4834 <_free_r>
    432a:	2300      	movs	r3, #0
    432c:	6363      	str	r3, [r4, #52]	; 0x34
    432e:	2300      	movs	r3, #0
    4330:	61a3      	str	r3, [r4, #24]
    4332:	6063      	str	r3, [r4, #4]
    4334:	89a3      	ldrh	r3, [r4, #12]
    4336:	061b      	lsls	r3, r3, #24
    4338:	d503      	bpl.n	4342 <setvbuf+0x6e>
    433a:	6921      	ldr	r1, [r4, #16]
    433c:	0030      	movs	r0, r6
    433e:	f000 fa79 	bl	4834 <_free_r>
    4342:	89a3      	ldrh	r3, [r4, #12]
    4344:	4a36      	ldr	r2, [pc, #216]	; (4420 <setvbuf+0x14c>)
    4346:	4013      	ands	r3, r2
    4348:	81a3      	strh	r3, [r4, #12]
    434a:	9b00      	ldr	r3, [sp, #0]
    434c:	2b02      	cmp	r3, #2
    434e:	d05a      	beq.n	4406 <setvbuf+0x132>
    4350:	ab03      	add	r3, sp, #12
    4352:	aa02      	add	r2, sp, #8
    4354:	0021      	movs	r1, r4
    4356:	0030      	movs	r0, r6
    4358:	f000 f9f6 	bl	4748 <__swhatbuf_r>
    435c:	89a3      	ldrh	r3, [r4, #12]
    435e:	4318      	orrs	r0, r3
    4360:	81a0      	strh	r0, [r4, #12]
    4362:	2d00      	cmp	r5, #0
    4364:	d124      	bne.n	43b0 <setvbuf+0xdc>
    4366:	9d02      	ldr	r5, [sp, #8]
    4368:	0028      	movs	r0, r5
    436a:	f000 fa59 	bl	4820 <malloc>
    436e:	9501      	str	r5, [sp, #4]
    4370:	1e07      	subs	r7, r0, #0
    4372:	d142      	bne.n	43fa <setvbuf+0x126>
    4374:	9b02      	ldr	r3, [sp, #8]
    4376:	9301      	str	r3, [sp, #4]
    4378:	42ab      	cmp	r3, r5
    437a:	d139      	bne.n	43f0 <setvbuf+0x11c>
    437c:	2001      	movs	r0, #1
    437e:	4240      	negs	r0, r0
    4380:	2302      	movs	r3, #2
    4382:	89a2      	ldrh	r2, [r4, #12]
    4384:	4313      	orrs	r3, r2
    4386:	81a3      	strh	r3, [r4, #12]
    4388:	2300      	movs	r3, #0
    438a:	60a3      	str	r3, [r4, #8]
    438c:	0023      	movs	r3, r4
    438e:	3347      	adds	r3, #71	; 0x47
    4390:	6023      	str	r3, [r4, #0]
    4392:	6123      	str	r3, [r4, #16]
    4394:	2301      	movs	r3, #1
    4396:	6163      	str	r3, [r4, #20]
    4398:	b005      	add	sp, #20
    439a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    439c:	4b21      	ldr	r3, [pc, #132]	; (4424 <setvbuf+0x150>)
    439e:	429c      	cmp	r4, r3
    43a0:	d101      	bne.n	43a6 <setvbuf+0xd2>
    43a2:	68b4      	ldr	r4, [r6, #8]
    43a4:	e7aa      	b.n	42fc <setvbuf+0x28>
    43a6:	4b20      	ldr	r3, [pc, #128]	; (4428 <setvbuf+0x154>)
    43a8:	429c      	cmp	r4, r3
    43aa:	d1a7      	bne.n	42fc <setvbuf+0x28>
    43ac:	68f4      	ldr	r4, [r6, #12]
    43ae:	e7a5      	b.n	42fc <setvbuf+0x28>
    43b0:	2f00      	cmp	r7, #0
    43b2:	d0d9      	beq.n	4368 <setvbuf+0x94>
    43b4:	69b3      	ldr	r3, [r6, #24]
    43b6:	2b00      	cmp	r3, #0
    43b8:	d102      	bne.n	43c0 <setvbuf+0xec>
    43ba:	0030      	movs	r0, r6
    43bc:	f000 f92e 	bl	461c <__sinit>
    43c0:	9b00      	ldr	r3, [sp, #0]
    43c2:	2b01      	cmp	r3, #1
    43c4:	d103      	bne.n	43ce <setvbuf+0xfa>
    43c6:	89a3      	ldrh	r3, [r4, #12]
    43c8:	9a00      	ldr	r2, [sp, #0]
    43ca:	431a      	orrs	r2, r3
    43cc:	81a2      	strh	r2, [r4, #12]
    43ce:	2008      	movs	r0, #8
    43d0:	89a3      	ldrh	r3, [r4, #12]
    43d2:	6027      	str	r7, [r4, #0]
    43d4:	6127      	str	r7, [r4, #16]
    43d6:	6165      	str	r5, [r4, #20]
    43d8:	4018      	ands	r0, r3
    43da:	d018      	beq.n	440e <setvbuf+0x13a>
    43dc:	2001      	movs	r0, #1
    43de:	4018      	ands	r0, r3
    43e0:	2300      	movs	r3, #0
    43e2:	4298      	cmp	r0, r3
    43e4:	d011      	beq.n	440a <setvbuf+0x136>
    43e6:	426d      	negs	r5, r5
    43e8:	60a3      	str	r3, [r4, #8]
    43ea:	61a5      	str	r5, [r4, #24]
    43ec:	0018      	movs	r0, r3
    43ee:	e7d3      	b.n	4398 <setvbuf+0xc4>
    43f0:	9801      	ldr	r0, [sp, #4]
    43f2:	f000 fa15 	bl	4820 <malloc>
    43f6:	1e07      	subs	r7, r0, #0
    43f8:	d0c0      	beq.n	437c <setvbuf+0xa8>
    43fa:	2380      	movs	r3, #128	; 0x80
    43fc:	89a2      	ldrh	r2, [r4, #12]
    43fe:	9d01      	ldr	r5, [sp, #4]
    4400:	4313      	orrs	r3, r2
    4402:	81a3      	strh	r3, [r4, #12]
    4404:	e7d6      	b.n	43b4 <setvbuf+0xe0>
    4406:	2000      	movs	r0, #0
    4408:	e7ba      	b.n	4380 <setvbuf+0xac>
    440a:	60a5      	str	r5, [r4, #8]
    440c:	e7c4      	b.n	4398 <setvbuf+0xc4>
    440e:	60a0      	str	r0, [r4, #8]
    4410:	e7c2      	b.n	4398 <setvbuf+0xc4>
    4412:	2001      	movs	r0, #1
    4414:	4240      	negs	r0, r0
    4416:	e7bf      	b.n	4398 <setvbuf+0xc4>
    4418:	200000a4 	.word	0x200000a4
    441c:	000053e8 	.word	0x000053e8
    4420:	fffff35c 	.word	0xfffff35c
    4424:	00005408 	.word	0x00005408
    4428:	000053c8 	.word	0x000053c8

0000442c <__sflush_r>:
    442c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    442e:	898a      	ldrh	r2, [r1, #12]
    4430:	0005      	movs	r5, r0
    4432:	000c      	movs	r4, r1
    4434:	0713      	lsls	r3, r2, #28
    4436:	d460      	bmi.n	44fa <__sflush_r+0xce>
    4438:	684b      	ldr	r3, [r1, #4]
    443a:	2b00      	cmp	r3, #0
    443c:	dc04      	bgt.n	4448 <__sflush_r+0x1c>
    443e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4440:	2b00      	cmp	r3, #0
    4442:	dc01      	bgt.n	4448 <__sflush_r+0x1c>
    4444:	2000      	movs	r0, #0
    4446:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4448:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    444a:	2f00      	cmp	r7, #0
    444c:	d0fa      	beq.n	4444 <__sflush_r+0x18>
    444e:	2300      	movs	r3, #0
    4450:	682e      	ldr	r6, [r5, #0]
    4452:	602b      	str	r3, [r5, #0]
    4454:	2380      	movs	r3, #128	; 0x80
    4456:	015b      	lsls	r3, r3, #5
    4458:	401a      	ands	r2, r3
    445a:	d034      	beq.n	44c6 <__sflush_r+0x9a>
    445c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    445e:	89a3      	ldrh	r3, [r4, #12]
    4460:	075b      	lsls	r3, r3, #29
    4462:	d506      	bpl.n	4472 <__sflush_r+0x46>
    4464:	6863      	ldr	r3, [r4, #4]
    4466:	1ac0      	subs	r0, r0, r3
    4468:	6b63      	ldr	r3, [r4, #52]	; 0x34
    446a:	2b00      	cmp	r3, #0
    446c:	d001      	beq.n	4472 <__sflush_r+0x46>
    446e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4470:	1ac0      	subs	r0, r0, r3
    4472:	0002      	movs	r2, r0
    4474:	6a21      	ldr	r1, [r4, #32]
    4476:	2300      	movs	r3, #0
    4478:	0028      	movs	r0, r5
    447a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    447c:	47b8      	blx	r7
    447e:	89a1      	ldrh	r1, [r4, #12]
    4480:	1c43      	adds	r3, r0, #1
    4482:	d106      	bne.n	4492 <__sflush_r+0x66>
    4484:	682b      	ldr	r3, [r5, #0]
    4486:	2b1d      	cmp	r3, #29
    4488:	d831      	bhi.n	44ee <__sflush_r+0xc2>
    448a:	4a2c      	ldr	r2, [pc, #176]	; (453c <__sflush_r+0x110>)
    448c:	40da      	lsrs	r2, r3
    448e:	07d3      	lsls	r3, r2, #31
    4490:	d52d      	bpl.n	44ee <__sflush_r+0xc2>
    4492:	2300      	movs	r3, #0
    4494:	6063      	str	r3, [r4, #4]
    4496:	6923      	ldr	r3, [r4, #16]
    4498:	6023      	str	r3, [r4, #0]
    449a:	04cb      	lsls	r3, r1, #19
    449c:	d505      	bpl.n	44aa <__sflush_r+0x7e>
    449e:	1c43      	adds	r3, r0, #1
    44a0:	d102      	bne.n	44a8 <__sflush_r+0x7c>
    44a2:	682b      	ldr	r3, [r5, #0]
    44a4:	2b00      	cmp	r3, #0
    44a6:	d100      	bne.n	44aa <__sflush_r+0x7e>
    44a8:	6560      	str	r0, [r4, #84]	; 0x54
    44aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    44ac:	602e      	str	r6, [r5, #0]
    44ae:	2900      	cmp	r1, #0
    44b0:	d0c8      	beq.n	4444 <__sflush_r+0x18>
    44b2:	0023      	movs	r3, r4
    44b4:	3344      	adds	r3, #68	; 0x44
    44b6:	4299      	cmp	r1, r3
    44b8:	d002      	beq.n	44c0 <__sflush_r+0x94>
    44ba:	0028      	movs	r0, r5
    44bc:	f000 f9ba 	bl	4834 <_free_r>
    44c0:	2000      	movs	r0, #0
    44c2:	6360      	str	r0, [r4, #52]	; 0x34
    44c4:	e7bf      	b.n	4446 <__sflush_r+0x1a>
    44c6:	2301      	movs	r3, #1
    44c8:	6a21      	ldr	r1, [r4, #32]
    44ca:	0028      	movs	r0, r5
    44cc:	47b8      	blx	r7
    44ce:	1c43      	adds	r3, r0, #1
    44d0:	d1c5      	bne.n	445e <__sflush_r+0x32>
    44d2:	682b      	ldr	r3, [r5, #0]
    44d4:	2b00      	cmp	r3, #0
    44d6:	d0c2      	beq.n	445e <__sflush_r+0x32>
    44d8:	2b1d      	cmp	r3, #29
    44da:	d001      	beq.n	44e0 <__sflush_r+0xb4>
    44dc:	2b16      	cmp	r3, #22
    44de:	d101      	bne.n	44e4 <__sflush_r+0xb8>
    44e0:	602e      	str	r6, [r5, #0]
    44e2:	e7af      	b.n	4444 <__sflush_r+0x18>
    44e4:	2340      	movs	r3, #64	; 0x40
    44e6:	89a2      	ldrh	r2, [r4, #12]
    44e8:	4313      	orrs	r3, r2
    44ea:	81a3      	strh	r3, [r4, #12]
    44ec:	e7ab      	b.n	4446 <__sflush_r+0x1a>
    44ee:	2340      	movs	r3, #64	; 0x40
    44f0:	430b      	orrs	r3, r1
    44f2:	2001      	movs	r0, #1
    44f4:	81a3      	strh	r3, [r4, #12]
    44f6:	4240      	negs	r0, r0
    44f8:	e7a5      	b.n	4446 <__sflush_r+0x1a>
    44fa:	690f      	ldr	r7, [r1, #16]
    44fc:	2f00      	cmp	r7, #0
    44fe:	d0a1      	beq.n	4444 <__sflush_r+0x18>
    4500:	680b      	ldr	r3, [r1, #0]
    4502:	600f      	str	r7, [r1, #0]
    4504:	1bdb      	subs	r3, r3, r7
    4506:	9301      	str	r3, [sp, #4]
    4508:	2300      	movs	r3, #0
    450a:	0792      	lsls	r2, r2, #30
    450c:	d100      	bne.n	4510 <__sflush_r+0xe4>
    450e:	694b      	ldr	r3, [r1, #20]
    4510:	60a3      	str	r3, [r4, #8]
    4512:	9b01      	ldr	r3, [sp, #4]
    4514:	2b00      	cmp	r3, #0
    4516:	dc00      	bgt.n	451a <__sflush_r+0xee>
    4518:	e794      	b.n	4444 <__sflush_r+0x18>
    451a:	9b01      	ldr	r3, [sp, #4]
    451c:	003a      	movs	r2, r7
    451e:	6a21      	ldr	r1, [r4, #32]
    4520:	0028      	movs	r0, r5
    4522:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4524:	47b0      	blx	r6
    4526:	2800      	cmp	r0, #0
    4528:	dc03      	bgt.n	4532 <__sflush_r+0x106>
    452a:	2340      	movs	r3, #64	; 0x40
    452c:	89a2      	ldrh	r2, [r4, #12]
    452e:	4313      	orrs	r3, r2
    4530:	e7df      	b.n	44f2 <__sflush_r+0xc6>
    4532:	9b01      	ldr	r3, [sp, #4]
    4534:	183f      	adds	r7, r7, r0
    4536:	1a1b      	subs	r3, r3, r0
    4538:	9301      	str	r3, [sp, #4]
    453a:	e7ea      	b.n	4512 <__sflush_r+0xe6>
    453c:	20400001 	.word	0x20400001

00004540 <_fflush_r>:
    4540:	690b      	ldr	r3, [r1, #16]
    4542:	b570      	push	{r4, r5, r6, lr}
    4544:	0005      	movs	r5, r0
    4546:	000c      	movs	r4, r1
    4548:	2b00      	cmp	r3, #0
    454a:	d101      	bne.n	4550 <_fflush_r+0x10>
    454c:	2000      	movs	r0, #0
    454e:	bd70      	pop	{r4, r5, r6, pc}
    4550:	2800      	cmp	r0, #0
    4552:	d004      	beq.n	455e <_fflush_r+0x1e>
    4554:	6983      	ldr	r3, [r0, #24]
    4556:	2b00      	cmp	r3, #0
    4558:	d101      	bne.n	455e <_fflush_r+0x1e>
    455a:	f000 f85f 	bl	461c <__sinit>
    455e:	4b0b      	ldr	r3, [pc, #44]	; (458c <_fflush_r+0x4c>)
    4560:	429c      	cmp	r4, r3
    4562:	d109      	bne.n	4578 <_fflush_r+0x38>
    4564:	686c      	ldr	r4, [r5, #4]
    4566:	220c      	movs	r2, #12
    4568:	5ea3      	ldrsh	r3, [r4, r2]
    456a:	2b00      	cmp	r3, #0
    456c:	d0ee      	beq.n	454c <_fflush_r+0xc>
    456e:	0021      	movs	r1, r4
    4570:	0028      	movs	r0, r5
    4572:	f7ff ff5b 	bl	442c <__sflush_r>
    4576:	e7ea      	b.n	454e <_fflush_r+0xe>
    4578:	4b05      	ldr	r3, [pc, #20]	; (4590 <_fflush_r+0x50>)
    457a:	429c      	cmp	r4, r3
    457c:	d101      	bne.n	4582 <_fflush_r+0x42>
    457e:	68ac      	ldr	r4, [r5, #8]
    4580:	e7f1      	b.n	4566 <_fflush_r+0x26>
    4582:	4b04      	ldr	r3, [pc, #16]	; (4594 <_fflush_r+0x54>)
    4584:	429c      	cmp	r4, r3
    4586:	d1ee      	bne.n	4566 <_fflush_r+0x26>
    4588:	68ec      	ldr	r4, [r5, #12]
    458a:	e7ec      	b.n	4566 <_fflush_r+0x26>
    458c:	000053e8 	.word	0x000053e8
    4590:	00005408 	.word	0x00005408
    4594:	000053c8 	.word	0x000053c8

00004598 <_cleanup_r>:
    4598:	b510      	push	{r4, lr}
    459a:	4902      	ldr	r1, [pc, #8]	; (45a4 <_cleanup_r+0xc>)
    459c:	f000 f8b2 	bl	4704 <_fwalk_reent>
    45a0:	bd10      	pop	{r4, pc}
    45a2:	46c0      	nop			; (mov r8, r8)
    45a4:	00004541 	.word	0x00004541

000045a8 <std.isra.0>:
    45a8:	2300      	movs	r3, #0
    45aa:	b510      	push	{r4, lr}
    45ac:	0004      	movs	r4, r0
    45ae:	6003      	str	r3, [r0, #0]
    45b0:	6043      	str	r3, [r0, #4]
    45b2:	6083      	str	r3, [r0, #8]
    45b4:	8181      	strh	r1, [r0, #12]
    45b6:	6643      	str	r3, [r0, #100]	; 0x64
    45b8:	81c2      	strh	r2, [r0, #14]
    45ba:	6103      	str	r3, [r0, #16]
    45bc:	6143      	str	r3, [r0, #20]
    45be:	6183      	str	r3, [r0, #24]
    45c0:	0019      	movs	r1, r3
    45c2:	2208      	movs	r2, #8
    45c4:	305c      	adds	r0, #92	; 0x5c
    45c6:	f7ff fe58 	bl	427a <memset>
    45ca:	4b05      	ldr	r3, [pc, #20]	; (45e0 <std.isra.0+0x38>)
    45cc:	6224      	str	r4, [r4, #32]
    45ce:	6263      	str	r3, [r4, #36]	; 0x24
    45d0:	4b04      	ldr	r3, [pc, #16]	; (45e4 <std.isra.0+0x3c>)
    45d2:	62a3      	str	r3, [r4, #40]	; 0x28
    45d4:	4b04      	ldr	r3, [pc, #16]	; (45e8 <std.isra.0+0x40>)
    45d6:	62e3      	str	r3, [r4, #44]	; 0x2c
    45d8:	4b04      	ldr	r3, [pc, #16]	; (45ec <std.isra.0+0x44>)
    45da:	6323      	str	r3, [r4, #48]	; 0x30
    45dc:	bd10      	pop	{r4, pc}
    45de:	46c0      	nop			; (mov r8, r8)
    45e0:	00004f41 	.word	0x00004f41
    45e4:	00004f69 	.word	0x00004f69
    45e8:	00004fa1 	.word	0x00004fa1
    45ec:	00004fcd 	.word	0x00004fcd

000045f0 <__sfmoreglue>:
    45f0:	b570      	push	{r4, r5, r6, lr}
    45f2:	2568      	movs	r5, #104	; 0x68
    45f4:	1e4a      	subs	r2, r1, #1
    45f6:	4355      	muls	r5, r2
    45f8:	000e      	movs	r6, r1
    45fa:	0029      	movs	r1, r5
    45fc:	3174      	adds	r1, #116	; 0x74
    45fe:	f000 f963 	bl	48c8 <_malloc_r>
    4602:	1e04      	subs	r4, r0, #0
    4604:	d008      	beq.n	4618 <__sfmoreglue+0x28>
    4606:	2100      	movs	r1, #0
    4608:	002a      	movs	r2, r5
    460a:	6001      	str	r1, [r0, #0]
    460c:	6046      	str	r6, [r0, #4]
    460e:	300c      	adds	r0, #12
    4610:	60a0      	str	r0, [r4, #8]
    4612:	3268      	adds	r2, #104	; 0x68
    4614:	f7ff fe31 	bl	427a <memset>
    4618:	0020      	movs	r0, r4
    461a:	bd70      	pop	{r4, r5, r6, pc}

0000461c <__sinit>:
    461c:	6983      	ldr	r3, [r0, #24]
    461e:	b513      	push	{r0, r1, r4, lr}
    4620:	0004      	movs	r4, r0
    4622:	2b00      	cmp	r3, #0
    4624:	d128      	bne.n	4678 <__sinit+0x5c>
    4626:	6483      	str	r3, [r0, #72]	; 0x48
    4628:	64c3      	str	r3, [r0, #76]	; 0x4c
    462a:	6503      	str	r3, [r0, #80]	; 0x50
    462c:	4b13      	ldr	r3, [pc, #76]	; (467c <__sinit+0x60>)
    462e:	4a14      	ldr	r2, [pc, #80]	; (4680 <__sinit+0x64>)
    4630:	681b      	ldr	r3, [r3, #0]
    4632:	6282      	str	r2, [r0, #40]	; 0x28
    4634:	9301      	str	r3, [sp, #4]
    4636:	4298      	cmp	r0, r3
    4638:	d101      	bne.n	463e <__sinit+0x22>
    463a:	2301      	movs	r3, #1
    463c:	6183      	str	r3, [r0, #24]
    463e:	0020      	movs	r0, r4
    4640:	f000 f820 	bl	4684 <__sfp>
    4644:	6060      	str	r0, [r4, #4]
    4646:	0020      	movs	r0, r4
    4648:	f000 f81c 	bl	4684 <__sfp>
    464c:	60a0      	str	r0, [r4, #8]
    464e:	0020      	movs	r0, r4
    4650:	f000 f818 	bl	4684 <__sfp>
    4654:	2200      	movs	r2, #0
    4656:	60e0      	str	r0, [r4, #12]
    4658:	2104      	movs	r1, #4
    465a:	6860      	ldr	r0, [r4, #4]
    465c:	f7ff ffa4 	bl	45a8 <std.isra.0>
    4660:	2201      	movs	r2, #1
    4662:	2109      	movs	r1, #9
    4664:	68a0      	ldr	r0, [r4, #8]
    4666:	f7ff ff9f 	bl	45a8 <std.isra.0>
    466a:	2202      	movs	r2, #2
    466c:	2112      	movs	r1, #18
    466e:	68e0      	ldr	r0, [r4, #12]
    4670:	f7ff ff9a 	bl	45a8 <std.isra.0>
    4674:	2301      	movs	r3, #1
    4676:	61a3      	str	r3, [r4, #24]
    4678:	bd13      	pop	{r0, r1, r4, pc}
    467a:	46c0      	nop			; (mov r8, r8)
    467c:	000053c4 	.word	0x000053c4
    4680:	00004599 	.word	0x00004599

00004684 <__sfp>:
    4684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4686:	4b1e      	ldr	r3, [pc, #120]	; (4700 <__sfp+0x7c>)
    4688:	0007      	movs	r7, r0
    468a:	681e      	ldr	r6, [r3, #0]
    468c:	69b3      	ldr	r3, [r6, #24]
    468e:	2b00      	cmp	r3, #0
    4690:	d102      	bne.n	4698 <__sfp+0x14>
    4692:	0030      	movs	r0, r6
    4694:	f7ff ffc2 	bl	461c <__sinit>
    4698:	3648      	adds	r6, #72	; 0x48
    469a:	68b4      	ldr	r4, [r6, #8]
    469c:	6873      	ldr	r3, [r6, #4]
    469e:	3b01      	subs	r3, #1
    46a0:	d504      	bpl.n	46ac <__sfp+0x28>
    46a2:	6833      	ldr	r3, [r6, #0]
    46a4:	2b00      	cmp	r3, #0
    46a6:	d007      	beq.n	46b8 <__sfp+0x34>
    46a8:	6836      	ldr	r6, [r6, #0]
    46aa:	e7f6      	b.n	469a <__sfp+0x16>
    46ac:	220c      	movs	r2, #12
    46ae:	5ea5      	ldrsh	r5, [r4, r2]
    46b0:	2d00      	cmp	r5, #0
    46b2:	d00d      	beq.n	46d0 <__sfp+0x4c>
    46b4:	3468      	adds	r4, #104	; 0x68
    46b6:	e7f2      	b.n	469e <__sfp+0x1a>
    46b8:	2104      	movs	r1, #4
    46ba:	0038      	movs	r0, r7
    46bc:	f7ff ff98 	bl	45f0 <__sfmoreglue>
    46c0:	6030      	str	r0, [r6, #0]
    46c2:	2800      	cmp	r0, #0
    46c4:	d1f0      	bne.n	46a8 <__sfp+0x24>
    46c6:	230c      	movs	r3, #12
    46c8:	0004      	movs	r4, r0
    46ca:	603b      	str	r3, [r7, #0]
    46cc:	0020      	movs	r0, r4
    46ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46d0:	2301      	movs	r3, #1
    46d2:	0020      	movs	r0, r4
    46d4:	425b      	negs	r3, r3
    46d6:	81e3      	strh	r3, [r4, #14]
    46d8:	3302      	adds	r3, #2
    46da:	81a3      	strh	r3, [r4, #12]
    46dc:	6665      	str	r5, [r4, #100]	; 0x64
    46de:	6025      	str	r5, [r4, #0]
    46e0:	60a5      	str	r5, [r4, #8]
    46e2:	6065      	str	r5, [r4, #4]
    46e4:	6125      	str	r5, [r4, #16]
    46e6:	6165      	str	r5, [r4, #20]
    46e8:	61a5      	str	r5, [r4, #24]
    46ea:	2208      	movs	r2, #8
    46ec:	0029      	movs	r1, r5
    46ee:	305c      	adds	r0, #92	; 0x5c
    46f0:	f7ff fdc3 	bl	427a <memset>
    46f4:	6365      	str	r5, [r4, #52]	; 0x34
    46f6:	63a5      	str	r5, [r4, #56]	; 0x38
    46f8:	64a5      	str	r5, [r4, #72]	; 0x48
    46fa:	64e5      	str	r5, [r4, #76]	; 0x4c
    46fc:	e7e6      	b.n	46cc <__sfp+0x48>
    46fe:	46c0      	nop			; (mov r8, r8)
    4700:	000053c4 	.word	0x000053c4

00004704 <_fwalk_reent>:
    4704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4706:	0004      	movs	r4, r0
    4708:	0007      	movs	r7, r0
    470a:	2600      	movs	r6, #0
    470c:	9101      	str	r1, [sp, #4]
    470e:	3448      	adds	r4, #72	; 0x48
    4710:	2c00      	cmp	r4, #0
    4712:	d101      	bne.n	4718 <_fwalk_reent+0x14>
    4714:	0030      	movs	r0, r6
    4716:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4718:	6863      	ldr	r3, [r4, #4]
    471a:	68a5      	ldr	r5, [r4, #8]
    471c:	9300      	str	r3, [sp, #0]
    471e:	9b00      	ldr	r3, [sp, #0]
    4720:	3b01      	subs	r3, #1
    4722:	9300      	str	r3, [sp, #0]
    4724:	d501      	bpl.n	472a <_fwalk_reent+0x26>
    4726:	6824      	ldr	r4, [r4, #0]
    4728:	e7f2      	b.n	4710 <_fwalk_reent+0xc>
    472a:	89ab      	ldrh	r3, [r5, #12]
    472c:	2b01      	cmp	r3, #1
    472e:	d908      	bls.n	4742 <_fwalk_reent+0x3e>
    4730:	220e      	movs	r2, #14
    4732:	5eab      	ldrsh	r3, [r5, r2]
    4734:	3301      	adds	r3, #1
    4736:	d004      	beq.n	4742 <_fwalk_reent+0x3e>
    4738:	0029      	movs	r1, r5
    473a:	0038      	movs	r0, r7
    473c:	9b01      	ldr	r3, [sp, #4]
    473e:	4798      	blx	r3
    4740:	4306      	orrs	r6, r0
    4742:	3568      	adds	r5, #104	; 0x68
    4744:	e7eb      	b.n	471e <_fwalk_reent+0x1a>
	...

00004748 <__swhatbuf_r>:
    4748:	b570      	push	{r4, r5, r6, lr}
    474a:	000e      	movs	r6, r1
    474c:	001d      	movs	r5, r3
    474e:	230e      	movs	r3, #14
    4750:	5ec9      	ldrsh	r1, [r1, r3]
    4752:	b090      	sub	sp, #64	; 0x40
    4754:	0014      	movs	r4, r2
    4756:	2900      	cmp	r1, #0
    4758:	da07      	bge.n	476a <__swhatbuf_r+0x22>
    475a:	2300      	movs	r3, #0
    475c:	602b      	str	r3, [r5, #0]
    475e:	89b3      	ldrh	r3, [r6, #12]
    4760:	061b      	lsls	r3, r3, #24
    4762:	d411      	bmi.n	4788 <__swhatbuf_r+0x40>
    4764:	2380      	movs	r3, #128	; 0x80
    4766:	00db      	lsls	r3, r3, #3
    4768:	e00f      	b.n	478a <__swhatbuf_r+0x42>
    476a:	aa01      	add	r2, sp, #4
    476c:	f000 fd26 	bl	51bc <_fstat_r>
    4770:	2800      	cmp	r0, #0
    4772:	dbf2      	blt.n	475a <__swhatbuf_r+0x12>
    4774:	22f0      	movs	r2, #240	; 0xf0
    4776:	9b02      	ldr	r3, [sp, #8]
    4778:	0212      	lsls	r2, r2, #8
    477a:	4013      	ands	r3, r2
    477c:	4a05      	ldr	r2, [pc, #20]	; (4794 <__swhatbuf_r+0x4c>)
    477e:	189b      	adds	r3, r3, r2
    4780:	425a      	negs	r2, r3
    4782:	4153      	adcs	r3, r2
    4784:	602b      	str	r3, [r5, #0]
    4786:	e7ed      	b.n	4764 <__swhatbuf_r+0x1c>
    4788:	2340      	movs	r3, #64	; 0x40
    478a:	2000      	movs	r0, #0
    478c:	6023      	str	r3, [r4, #0]
    478e:	b010      	add	sp, #64	; 0x40
    4790:	bd70      	pop	{r4, r5, r6, pc}
    4792:	46c0      	nop			; (mov r8, r8)
    4794:	ffffe000 	.word	0xffffe000

00004798 <__smakebuf_r>:
    4798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    479a:	2602      	movs	r6, #2
    479c:	898b      	ldrh	r3, [r1, #12]
    479e:	0005      	movs	r5, r0
    47a0:	000c      	movs	r4, r1
    47a2:	4233      	tst	r3, r6
    47a4:	d006      	beq.n	47b4 <__smakebuf_r+0x1c>
    47a6:	0023      	movs	r3, r4
    47a8:	3347      	adds	r3, #71	; 0x47
    47aa:	6023      	str	r3, [r4, #0]
    47ac:	6123      	str	r3, [r4, #16]
    47ae:	2301      	movs	r3, #1
    47b0:	6163      	str	r3, [r4, #20]
    47b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    47b4:	ab01      	add	r3, sp, #4
    47b6:	466a      	mov	r2, sp
    47b8:	f7ff ffc6 	bl	4748 <__swhatbuf_r>
    47bc:	9900      	ldr	r1, [sp, #0]
    47be:	0007      	movs	r7, r0
    47c0:	0028      	movs	r0, r5
    47c2:	f000 f881 	bl	48c8 <_malloc_r>
    47c6:	2800      	cmp	r0, #0
    47c8:	d108      	bne.n	47dc <__smakebuf_r+0x44>
    47ca:	220c      	movs	r2, #12
    47cc:	5ea3      	ldrsh	r3, [r4, r2]
    47ce:	059a      	lsls	r2, r3, #22
    47d0:	d4ef      	bmi.n	47b2 <__smakebuf_r+0x1a>
    47d2:	2203      	movs	r2, #3
    47d4:	4393      	bics	r3, r2
    47d6:	431e      	orrs	r6, r3
    47d8:	81a6      	strh	r6, [r4, #12]
    47da:	e7e4      	b.n	47a6 <__smakebuf_r+0xe>
    47dc:	4b0f      	ldr	r3, [pc, #60]	; (481c <__smakebuf_r+0x84>)
    47de:	62ab      	str	r3, [r5, #40]	; 0x28
    47e0:	2380      	movs	r3, #128	; 0x80
    47e2:	89a2      	ldrh	r2, [r4, #12]
    47e4:	6020      	str	r0, [r4, #0]
    47e6:	4313      	orrs	r3, r2
    47e8:	81a3      	strh	r3, [r4, #12]
    47ea:	9b00      	ldr	r3, [sp, #0]
    47ec:	6120      	str	r0, [r4, #16]
    47ee:	6163      	str	r3, [r4, #20]
    47f0:	9b01      	ldr	r3, [sp, #4]
    47f2:	2b00      	cmp	r3, #0
    47f4:	d00d      	beq.n	4812 <__smakebuf_r+0x7a>
    47f6:	230e      	movs	r3, #14
    47f8:	5ee1      	ldrsh	r1, [r4, r3]
    47fa:	0028      	movs	r0, r5
    47fc:	f000 fcf0 	bl	51e0 <_isatty_r>
    4800:	2800      	cmp	r0, #0
    4802:	d006      	beq.n	4812 <__smakebuf_r+0x7a>
    4804:	2203      	movs	r2, #3
    4806:	89a3      	ldrh	r3, [r4, #12]
    4808:	4393      	bics	r3, r2
    480a:	001a      	movs	r2, r3
    480c:	2301      	movs	r3, #1
    480e:	4313      	orrs	r3, r2
    4810:	81a3      	strh	r3, [r4, #12]
    4812:	89a0      	ldrh	r0, [r4, #12]
    4814:	4338      	orrs	r0, r7
    4816:	81a0      	strh	r0, [r4, #12]
    4818:	e7cb      	b.n	47b2 <__smakebuf_r+0x1a>
    481a:	46c0      	nop			; (mov r8, r8)
    481c:	00004599 	.word	0x00004599

00004820 <malloc>:
    4820:	b510      	push	{r4, lr}
    4822:	4b03      	ldr	r3, [pc, #12]	; (4830 <malloc+0x10>)
    4824:	0001      	movs	r1, r0
    4826:	6818      	ldr	r0, [r3, #0]
    4828:	f000 f84e 	bl	48c8 <_malloc_r>
    482c:	bd10      	pop	{r4, pc}
    482e:	46c0      	nop			; (mov r8, r8)
    4830:	200000a4 	.word	0x200000a4

00004834 <_free_r>:
    4834:	b570      	push	{r4, r5, r6, lr}
    4836:	0005      	movs	r5, r0
    4838:	2900      	cmp	r1, #0
    483a:	d010      	beq.n	485e <_free_r+0x2a>
    483c:	1f0c      	subs	r4, r1, #4
    483e:	6823      	ldr	r3, [r4, #0]
    4840:	2b00      	cmp	r3, #0
    4842:	da00      	bge.n	4846 <_free_r+0x12>
    4844:	18e4      	adds	r4, r4, r3
    4846:	0028      	movs	r0, r5
    4848:	f000 fcfb 	bl	5242 <__malloc_lock>
    484c:	4a1d      	ldr	r2, [pc, #116]	; (48c4 <_free_r+0x90>)
    484e:	6813      	ldr	r3, [r2, #0]
    4850:	2b00      	cmp	r3, #0
    4852:	d105      	bne.n	4860 <_free_r+0x2c>
    4854:	6063      	str	r3, [r4, #4]
    4856:	6014      	str	r4, [r2, #0]
    4858:	0028      	movs	r0, r5
    485a:	f000 fcf3 	bl	5244 <__malloc_unlock>
    485e:	bd70      	pop	{r4, r5, r6, pc}
    4860:	42a3      	cmp	r3, r4
    4862:	d909      	bls.n	4878 <_free_r+0x44>
    4864:	6821      	ldr	r1, [r4, #0]
    4866:	1860      	adds	r0, r4, r1
    4868:	4283      	cmp	r3, r0
    486a:	d1f3      	bne.n	4854 <_free_r+0x20>
    486c:	6818      	ldr	r0, [r3, #0]
    486e:	685b      	ldr	r3, [r3, #4]
    4870:	1841      	adds	r1, r0, r1
    4872:	6021      	str	r1, [r4, #0]
    4874:	e7ee      	b.n	4854 <_free_r+0x20>
    4876:	0013      	movs	r3, r2
    4878:	685a      	ldr	r2, [r3, #4]
    487a:	2a00      	cmp	r2, #0
    487c:	d001      	beq.n	4882 <_free_r+0x4e>
    487e:	42a2      	cmp	r2, r4
    4880:	d9f9      	bls.n	4876 <_free_r+0x42>
    4882:	6819      	ldr	r1, [r3, #0]
    4884:	1858      	adds	r0, r3, r1
    4886:	42a0      	cmp	r0, r4
    4888:	d10b      	bne.n	48a2 <_free_r+0x6e>
    488a:	6820      	ldr	r0, [r4, #0]
    488c:	1809      	adds	r1, r1, r0
    488e:	1858      	adds	r0, r3, r1
    4890:	6019      	str	r1, [r3, #0]
    4892:	4282      	cmp	r2, r0
    4894:	d1e0      	bne.n	4858 <_free_r+0x24>
    4896:	6810      	ldr	r0, [r2, #0]
    4898:	6852      	ldr	r2, [r2, #4]
    489a:	1841      	adds	r1, r0, r1
    489c:	6019      	str	r1, [r3, #0]
    489e:	605a      	str	r2, [r3, #4]
    48a0:	e7da      	b.n	4858 <_free_r+0x24>
    48a2:	42a0      	cmp	r0, r4
    48a4:	d902      	bls.n	48ac <_free_r+0x78>
    48a6:	230c      	movs	r3, #12
    48a8:	602b      	str	r3, [r5, #0]
    48aa:	e7d5      	b.n	4858 <_free_r+0x24>
    48ac:	6821      	ldr	r1, [r4, #0]
    48ae:	1860      	adds	r0, r4, r1
    48b0:	4282      	cmp	r2, r0
    48b2:	d103      	bne.n	48bc <_free_r+0x88>
    48b4:	6810      	ldr	r0, [r2, #0]
    48b6:	6852      	ldr	r2, [r2, #4]
    48b8:	1841      	adds	r1, r0, r1
    48ba:	6021      	str	r1, [r4, #0]
    48bc:	6062      	str	r2, [r4, #4]
    48be:	605c      	str	r4, [r3, #4]
    48c0:	e7ca      	b.n	4858 <_free_r+0x24>
    48c2:	46c0      	nop			; (mov r8, r8)
    48c4:	20000324 	.word	0x20000324

000048c8 <_malloc_r>:
    48c8:	2303      	movs	r3, #3
    48ca:	b570      	push	{r4, r5, r6, lr}
    48cc:	1ccd      	adds	r5, r1, #3
    48ce:	439d      	bics	r5, r3
    48d0:	3508      	adds	r5, #8
    48d2:	0006      	movs	r6, r0
    48d4:	2d0c      	cmp	r5, #12
    48d6:	d21e      	bcs.n	4916 <_malloc_r+0x4e>
    48d8:	250c      	movs	r5, #12
    48da:	42a9      	cmp	r1, r5
    48dc:	d81d      	bhi.n	491a <_malloc_r+0x52>
    48de:	0030      	movs	r0, r6
    48e0:	f000 fcaf 	bl	5242 <__malloc_lock>
    48e4:	4a25      	ldr	r2, [pc, #148]	; (497c <_malloc_r+0xb4>)
    48e6:	6814      	ldr	r4, [r2, #0]
    48e8:	0021      	movs	r1, r4
    48ea:	2900      	cmp	r1, #0
    48ec:	d119      	bne.n	4922 <_malloc_r+0x5a>
    48ee:	4c24      	ldr	r4, [pc, #144]	; (4980 <_malloc_r+0xb8>)
    48f0:	6823      	ldr	r3, [r4, #0]
    48f2:	2b00      	cmp	r3, #0
    48f4:	d103      	bne.n	48fe <_malloc_r+0x36>
    48f6:	0030      	movs	r0, r6
    48f8:	f000 fb10 	bl	4f1c <_sbrk_r>
    48fc:	6020      	str	r0, [r4, #0]
    48fe:	0029      	movs	r1, r5
    4900:	0030      	movs	r0, r6
    4902:	f000 fb0b 	bl	4f1c <_sbrk_r>
    4906:	1c43      	adds	r3, r0, #1
    4908:	d12c      	bne.n	4964 <_malloc_r+0x9c>
    490a:	230c      	movs	r3, #12
    490c:	0030      	movs	r0, r6
    490e:	6033      	str	r3, [r6, #0]
    4910:	f000 fc98 	bl	5244 <__malloc_unlock>
    4914:	e003      	b.n	491e <_malloc_r+0x56>
    4916:	2d00      	cmp	r5, #0
    4918:	dadf      	bge.n	48da <_malloc_r+0x12>
    491a:	230c      	movs	r3, #12
    491c:	6033      	str	r3, [r6, #0]
    491e:	2000      	movs	r0, #0
    4920:	bd70      	pop	{r4, r5, r6, pc}
    4922:	680b      	ldr	r3, [r1, #0]
    4924:	1b5b      	subs	r3, r3, r5
    4926:	d41a      	bmi.n	495e <_malloc_r+0x96>
    4928:	2b0b      	cmp	r3, #11
    492a:	d903      	bls.n	4934 <_malloc_r+0x6c>
    492c:	600b      	str	r3, [r1, #0]
    492e:	18cc      	adds	r4, r1, r3
    4930:	6025      	str	r5, [r4, #0]
    4932:	e003      	b.n	493c <_malloc_r+0x74>
    4934:	428c      	cmp	r4, r1
    4936:	d10e      	bne.n	4956 <_malloc_r+0x8e>
    4938:	6863      	ldr	r3, [r4, #4]
    493a:	6013      	str	r3, [r2, #0]
    493c:	0030      	movs	r0, r6
    493e:	f000 fc81 	bl	5244 <__malloc_unlock>
    4942:	0020      	movs	r0, r4
    4944:	2207      	movs	r2, #7
    4946:	300b      	adds	r0, #11
    4948:	1d23      	adds	r3, r4, #4
    494a:	4390      	bics	r0, r2
    494c:	1ac3      	subs	r3, r0, r3
    494e:	d0e7      	beq.n	4920 <_malloc_r+0x58>
    4950:	425a      	negs	r2, r3
    4952:	50e2      	str	r2, [r4, r3]
    4954:	e7e4      	b.n	4920 <_malloc_r+0x58>
    4956:	684b      	ldr	r3, [r1, #4]
    4958:	6063      	str	r3, [r4, #4]
    495a:	000c      	movs	r4, r1
    495c:	e7ee      	b.n	493c <_malloc_r+0x74>
    495e:	000c      	movs	r4, r1
    4960:	6849      	ldr	r1, [r1, #4]
    4962:	e7c2      	b.n	48ea <_malloc_r+0x22>
    4964:	2303      	movs	r3, #3
    4966:	1cc4      	adds	r4, r0, #3
    4968:	439c      	bics	r4, r3
    496a:	42a0      	cmp	r0, r4
    496c:	d0e0      	beq.n	4930 <_malloc_r+0x68>
    496e:	1a21      	subs	r1, r4, r0
    4970:	0030      	movs	r0, r6
    4972:	f000 fad3 	bl	4f1c <_sbrk_r>
    4976:	1c43      	adds	r3, r0, #1
    4978:	d1da      	bne.n	4930 <_malloc_r+0x68>
    497a:	e7c6      	b.n	490a <_malloc_r+0x42>
    497c:	20000324 	.word	0x20000324
    4980:	20000328 	.word	0x20000328

00004984 <__sfputc_r>:
    4984:	6893      	ldr	r3, [r2, #8]
    4986:	b510      	push	{r4, lr}
    4988:	3b01      	subs	r3, #1
    498a:	6093      	str	r3, [r2, #8]
    498c:	2b00      	cmp	r3, #0
    498e:	da05      	bge.n	499c <__sfputc_r+0x18>
    4990:	6994      	ldr	r4, [r2, #24]
    4992:	42a3      	cmp	r3, r4
    4994:	db08      	blt.n	49a8 <__sfputc_r+0x24>
    4996:	b2cb      	uxtb	r3, r1
    4998:	2b0a      	cmp	r3, #10
    499a:	d005      	beq.n	49a8 <__sfputc_r+0x24>
    499c:	6813      	ldr	r3, [r2, #0]
    499e:	1c58      	adds	r0, r3, #1
    49a0:	6010      	str	r0, [r2, #0]
    49a2:	7019      	strb	r1, [r3, #0]
    49a4:	b2c8      	uxtb	r0, r1
    49a6:	bd10      	pop	{r4, pc}
    49a8:	f000 fb16 	bl	4fd8 <__swbuf_r>
    49ac:	e7fb      	b.n	49a6 <__sfputc_r+0x22>

000049ae <__sfputs_r>:
    49ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49b0:	0006      	movs	r6, r0
    49b2:	000f      	movs	r7, r1
    49b4:	0014      	movs	r4, r2
    49b6:	18d5      	adds	r5, r2, r3
    49b8:	42ac      	cmp	r4, r5
    49ba:	d101      	bne.n	49c0 <__sfputs_r+0x12>
    49bc:	2000      	movs	r0, #0
    49be:	e007      	b.n	49d0 <__sfputs_r+0x22>
    49c0:	7821      	ldrb	r1, [r4, #0]
    49c2:	003a      	movs	r2, r7
    49c4:	0030      	movs	r0, r6
    49c6:	f7ff ffdd 	bl	4984 <__sfputc_r>
    49ca:	3401      	adds	r4, #1
    49cc:	1c43      	adds	r3, r0, #1
    49ce:	d1f3      	bne.n	49b8 <__sfputs_r+0xa>
    49d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000049d4 <_vfiprintf_r>:
    49d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    49d6:	b09f      	sub	sp, #124	; 0x7c
    49d8:	0006      	movs	r6, r0
    49da:	000f      	movs	r7, r1
    49dc:	0014      	movs	r4, r2
    49de:	9305      	str	r3, [sp, #20]
    49e0:	2800      	cmp	r0, #0
    49e2:	d004      	beq.n	49ee <_vfiprintf_r+0x1a>
    49e4:	6983      	ldr	r3, [r0, #24]
    49e6:	2b00      	cmp	r3, #0
    49e8:	d101      	bne.n	49ee <_vfiprintf_r+0x1a>
    49ea:	f7ff fe17 	bl	461c <__sinit>
    49ee:	4b7f      	ldr	r3, [pc, #508]	; (4bec <_vfiprintf_r+0x218>)
    49f0:	429f      	cmp	r7, r3
    49f2:	d15c      	bne.n	4aae <_vfiprintf_r+0xda>
    49f4:	6877      	ldr	r7, [r6, #4]
    49f6:	89bb      	ldrh	r3, [r7, #12]
    49f8:	071b      	lsls	r3, r3, #28
    49fa:	d562      	bpl.n	4ac2 <_vfiprintf_r+0xee>
    49fc:	693b      	ldr	r3, [r7, #16]
    49fe:	2b00      	cmp	r3, #0
    4a00:	d05f      	beq.n	4ac2 <_vfiprintf_r+0xee>
    4a02:	2300      	movs	r3, #0
    4a04:	ad06      	add	r5, sp, #24
    4a06:	616b      	str	r3, [r5, #20]
    4a08:	3320      	adds	r3, #32
    4a0a:	766b      	strb	r3, [r5, #25]
    4a0c:	3310      	adds	r3, #16
    4a0e:	76ab      	strb	r3, [r5, #26]
    4a10:	9402      	str	r4, [sp, #8]
    4a12:	9c02      	ldr	r4, [sp, #8]
    4a14:	7823      	ldrb	r3, [r4, #0]
    4a16:	2b00      	cmp	r3, #0
    4a18:	d15d      	bne.n	4ad6 <_vfiprintf_r+0x102>
    4a1a:	9b02      	ldr	r3, [sp, #8]
    4a1c:	1ae3      	subs	r3, r4, r3
    4a1e:	9304      	str	r3, [sp, #16]
    4a20:	d00d      	beq.n	4a3e <_vfiprintf_r+0x6a>
    4a22:	9b04      	ldr	r3, [sp, #16]
    4a24:	9a02      	ldr	r2, [sp, #8]
    4a26:	0039      	movs	r1, r7
    4a28:	0030      	movs	r0, r6
    4a2a:	f7ff ffc0 	bl	49ae <__sfputs_r>
    4a2e:	1c43      	adds	r3, r0, #1
    4a30:	d100      	bne.n	4a34 <_vfiprintf_r+0x60>
    4a32:	e0cc      	b.n	4bce <_vfiprintf_r+0x1fa>
    4a34:	696a      	ldr	r2, [r5, #20]
    4a36:	9b04      	ldr	r3, [sp, #16]
    4a38:	4694      	mov	ip, r2
    4a3a:	4463      	add	r3, ip
    4a3c:	616b      	str	r3, [r5, #20]
    4a3e:	7823      	ldrb	r3, [r4, #0]
    4a40:	2b00      	cmp	r3, #0
    4a42:	d100      	bne.n	4a46 <_vfiprintf_r+0x72>
    4a44:	e0c3      	b.n	4bce <_vfiprintf_r+0x1fa>
    4a46:	2201      	movs	r2, #1
    4a48:	2300      	movs	r3, #0
    4a4a:	4252      	negs	r2, r2
    4a4c:	606a      	str	r2, [r5, #4]
    4a4e:	a902      	add	r1, sp, #8
    4a50:	3254      	adds	r2, #84	; 0x54
    4a52:	1852      	adds	r2, r2, r1
    4a54:	3401      	adds	r4, #1
    4a56:	602b      	str	r3, [r5, #0]
    4a58:	60eb      	str	r3, [r5, #12]
    4a5a:	60ab      	str	r3, [r5, #8]
    4a5c:	7013      	strb	r3, [r2, #0]
    4a5e:	65ab      	str	r3, [r5, #88]	; 0x58
    4a60:	7821      	ldrb	r1, [r4, #0]
    4a62:	2205      	movs	r2, #5
    4a64:	4862      	ldr	r0, [pc, #392]	; (4bf0 <_vfiprintf_r+0x21c>)
    4a66:	f000 fbe1 	bl	522c <memchr>
    4a6a:	1c63      	adds	r3, r4, #1
    4a6c:	469c      	mov	ip, r3
    4a6e:	2800      	cmp	r0, #0
    4a70:	d135      	bne.n	4ade <_vfiprintf_r+0x10a>
    4a72:	6829      	ldr	r1, [r5, #0]
    4a74:	06cb      	lsls	r3, r1, #27
    4a76:	d504      	bpl.n	4a82 <_vfiprintf_r+0xae>
    4a78:	2353      	movs	r3, #83	; 0x53
    4a7a:	aa02      	add	r2, sp, #8
    4a7c:	3020      	adds	r0, #32
    4a7e:	189b      	adds	r3, r3, r2
    4a80:	7018      	strb	r0, [r3, #0]
    4a82:	070b      	lsls	r3, r1, #28
    4a84:	d504      	bpl.n	4a90 <_vfiprintf_r+0xbc>
    4a86:	2353      	movs	r3, #83	; 0x53
    4a88:	202b      	movs	r0, #43	; 0x2b
    4a8a:	aa02      	add	r2, sp, #8
    4a8c:	189b      	adds	r3, r3, r2
    4a8e:	7018      	strb	r0, [r3, #0]
    4a90:	7823      	ldrb	r3, [r4, #0]
    4a92:	2b2a      	cmp	r3, #42	; 0x2a
    4a94:	d02c      	beq.n	4af0 <_vfiprintf_r+0x11c>
    4a96:	2000      	movs	r0, #0
    4a98:	210a      	movs	r1, #10
    4a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4a9c:	7822      	ldrb	r2, [r4, #0]
    4a9e:	3a30      	subs	r2, #48	; 0x30
    4aa0:	2a09      	cmp	r2, #9
    4aa2:	d800      	bhi.n	4aa6 <_vfiprintf_r+0xd2>
    4aa4:	e06b      	b.n	4b7e <_vfiprintf_r+0x1aa>
    4aa6:	2800      	cmp	r0, #0
    4aa8:	d02a      	beq.n	4b00 <_vfiprintf_r+0x12c>
    4aaa:	9309      	str	r3, [sp, #36]	; 0x24
    4aac:	e028      	b.n	4b00 <_vfiprintf_r+0x12c>
    4aae:	4b51      	ldr	r3, [pc, #324]	; (4bf4 <_vfiprintf_r+0x220>)
    4ab0:	429f      	cmp	r7, r3
    4ab2:	d101      	bne.n	4ab8 <_vfiprintf_r+0xe4>
    4ab4:	68b7      	ldr	r7, [r6, #8]
    4ab6:	e79e      	b.n	49f6 <_vfiprintf_r+0x22>
    4ab8:	4b4f      	ldr	r3, [pc, #316]	; (4bf8 <_vfiprintf_r+0x224>)
    4aba:	429f      	cmp	r7, r3
    4abc:	d19b      	bne.n	49f6 <_vfiprintf_r+0x22>
    4abe:	68f7      	ldr	r7, [r6, #12]
    4ac0:	e799      	b.n	49f6 <_vfiprintf_r+0x22>
    4ac2:	0039      	movs	r1, r7
    4ac4:	0030      	movs	r0, r6
    4ac6:	f000 faf1 	bl	50ac <__swsetup_r>
    4aca:	2800      	cmp	r0, #0
    4acc:	d099      	beq.n	4a02 <_vfiprintf_r+0x2e>
    4ace:	2001      	movs	r0, #1
    4ad0:	4240      	negs	r0, r0
    4ad2:	b01f      	add	sp, #124	; 0x7c
    4ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ad6:	2b25      	cmp	r3, #37	; 0x25
    4ad8:	d09f      	beq.n	4a1a <_vfiprintf_r+0x46>
    4ada:	3401      	adds	r4, #1
    4adc:	e79a      	b.n	4a14 <_vfiprintf_r+0x40>
    4ade:	4b44      	ldr	r3, [pc, #272]	; (4bf0 <_vfiprintf_r+0x21c>)
    4ae0:	6829      	ldr	r1, [r5, #0]
    4ae2:	1ac0      	subs	r0, r0, r3
    4ae4:	2301      	movs	r3, #1
    4ae6:	4083      	lsls	r3, r0
    4ae8:	430b      	orrs	r3, r1
    4aea:	602b      	str	r3, [r5, #0]
    4aec:	4664      	mov	r4, ip
    4aee:	e7b7      	b.n	4a60 <_vfiprintf_r+0x8c>
    4af0:	9b05      	ldr	r3, [sp, #20]
    4af2:	1d18      	adds	r0, r3, #4
    4af4:	681b      	ldr	r3, [r3, #0]
    4af6:	9005      	str	r0, [sp, #20]
    4af8:	2b00      	cmp	r3, #0
    4afa:	db3a      	blt.n	4b72 <_vfiprintf_r+0x19e>
    4afc:	9309      	str	r3, [sp, #36]	; 0x24
    4afe:	4664      	mov	r4, ip
    4b00:	7823      	ldrb	r3, [r4, #0]
    4b02:	2b2e      	cmp	r3, #46	; 0x2e
    4b04:	d10b      	bne.n	4b1e <_vfiprintf_r+0x14a>
    4b06:	7863      	ldrb	r3, [r4, #1]
    4b08:	1c62      	adds	r2, r4, #1
    4b0a:	2b2a      	cmp	r3, #42	; 0x2a
    4b0c:	d13f      	bne.n	4b8e <_vfiprintf_r+0x1ba>
    4b0e:	9b05      	ldr	r3, [sp, #20]
    4b10:	3402      	adds	r4, #2
    4b12:	1d1a      	adds	r2, r3, #4
    4b14:	681b      	ldr	r3, [r3, #0]
    4b16:	9205      	str	r2, [sp, #20]
    4b18:	2b00      	cmp	r3, #0
    4b1a:	db35      	blt.n	4b88 <_vfiprintf_r+0x1b4>
    4b1c:	9307      	str	r3, [sp, #28]
    4b1e:	7821      	ldrb	r1, [r4, #0]
    4b20:	2203      	movs	r2, #3
    4b22:	4836      	ldr	r0, [pc, #216]	; (4bfc <_vfiprintf_r+0x228>)
    4b24:	f000 fb82 	bl	522c <memchr>
    4b28:	2800      	cmp	r0, #0
    4b2a:	d007      	beq.n	4b3c <_vfiprintf_r+0x168>
    4b2c:	4b33      	ldr	r3, [pc, #204]	; (4bfc <_vfiprintf_r+0x228>)
    4b2e:	682a      	ldr	r2, [r5, #0]
    4b30:	1ac0      	subs	r0, r0, r3
    4b32:	2340      	movs	r3, #64	; 0x40
    4b34:	4083      	lsls	r3, r0
    4b36:	4313      	orrs	r3, r2
    4b38:	602b      	str	r3, [r5, #0]
    4b3a:	3401      	adds	r4, #1
    4b3c:	7821      	ldrb	r1, [r4, #0]
    4b3e:	1c63      	adds	r3, r4, #1
    4b40:	2206      	movs	r2, #6
    4b42:	482f      	ldr	r0, [pc, #188]	; (4c00 <_vfiprintf_r+0x22c>)
    4b44:	9302      	str	r3, [sp, #8]
    4b46:	7629      	strb	r1, [r5, #24]
    4b48:	f000 fb70 	bl	522c <memchr>
    4b4c:	2800      	cmp	r0, #0
    4b4e:	d044      	beq.n	4bda <_vfiprintf_r+0x206>
    4b50:	4b2c      	ldr	r3, [pc, #176]	; (4c04 <_vfiprintf_r+0x230>)
    4b52:	2b00      	cmp	r3, #0
    4b54:	d12f      	bne.n	4bb6 <_vfiprintf_r+0x1e2>
    4b56:	6829      	ldr	r1, [r5, #0]
    4b58:	9b05      	ldr	r3, [sp, #20]
    4b5a:	2207      	movs	r2, #7
    4b5c:	05c9      	lsls	r1, r1, #23
    4b5e:	d528      	bpl.n	4bb2 <_vfiprintf_r+0x1de>
    4b60:	189b      	adds	r3, r3, r2
    4b62:	4393      	bics	r3, r2
    4b64:	3308      	adds	r3, #8
    4b66:	9305      	str	r3, [sp, #20]
    4b68:	696b      	ldr	r3, [r5, #20]
    4b6a:	9a03      	ldr	r2, [sp, #12]
    4b6c:	189b      	adds	r3, r3, r2
    4b6e:	616b      	str	r3, [r5, #20]
    4b70:	e74f      	b.n	4a12 <_vfiprintf_r+0x3e>
    4b72:	425b      	negs	r3, r3
    4b74:	60eb      	str	r3, [r5, #12]
    4b76:	2302      	movs	r3, #2
    4b78:	430b      	orrs	r3, r1
    4b7a:	602b      	str	r3, [r5, #0]
    4b7c:	e7bf      	b.n	4afe <_vfiprintf_r+0x12a>
    4b7e:	434b      	muls	r3, r1
    4b80:	3401      	adds	r4, #1
    4b82:	189b      	adds	r3, r3, r2
    4b84:	2001      	movs	r0, #1
    4b86:	e789      	b.n	4a9c <_vfiprintf_r+0xc8>
    4b88:	2301      	movs	r3, #1
    4b8a:	425b      	negs	r3, r3
    4b8c:	e7c6      	b.n	4b1c <_vfiprintf_r+0x148>
    4b8e:	2300      	movs	r3, #0
    4b90:	0014      	movs	r4, r2
    4b92:	200a      	movs	r0, #10
    4b94:	001a      	movs	r2, r3
    4b96:	606b      	str	r3, [r5, #4]
    4b98:	7821      	ldrb	r1, [r4, #0]
    4b9a:	3930      	subs	r1, #48	; 0x30
    4b9c:	2909      	cmp	r1, #9
    4b9e:	d903      	bls.n	4ba8 <_vfiprintf_r+0x1d4>
    4ba0:	2b00      	cmp	r3, #0
    4ba2:	d0bc      	beq.n	4b1e <_vfiprintf_r+0x14a>
    4ba4:	9207      	str	r2, [sp, #28]
    4ba6:	e7ba      	b.n	4b1e <_vfiprintf_r+0x14a>
    4ba8:	4342      	muls	r2, r0
    4baa:	3401      	adds	r4, #1
    4bac:	1852      	adds	r2, r2, r1
    4bae:	2301      	movs	r3, #1
    4bb0:	e7f2      	b.n	4b98 <_vfiprintf_r+0x1c4>
    4bb2:	3307      	adds	r3, #7
    4bb4:	e7d5      	b.n	4b62 <_vfiprintf_r+0x18e>
    4bb6:	ab05      	add	r3, sp, #20
    4bb8:	9300      	str	r3, [sp, #0]
    4bba:	003a      	movs	r2, r7
    4bbc:	4b12      	ldr	r3, [pc, #72]	; (4c08 <_vfiprintf_r+0x234>)
    4bbe:	0029      	movs	r1, r5
    4bc0:	0030      	movs	r0, r6
    4bc2:	e000      	b.n	4bc6 <_vfiprintf_r+0x1f2>
    4bc4:	bf00      	nop
    4bc6:	9003      	str	r0, [sp, #12]
    4bc8:	9b03      	ldr	r3, [sp, #12]
    4bca:	3301      	adds	r3, #1
    4bcc:	d1cc      	bne.n	4b68 <_vfiprintf_r+0x194>
    4bce:	89bb      	ldrh	r3, [r7, #12]
    4bd0:	065b      	lsls	r3, r3, #25
    4bd2:	d500      	bpl.n	4bd6 <_vfiprintf_r+0x202>
    4bd4:	e77b      	b.n	4ace <_vfiprintf_r+0xfa>
    4bd6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4bd8:	e77b      	b.n	4ad2 <_vfiprintf_r+0xfe>
    4bda:	ab05      	add	r3, sp, #20
    4bdc:	9300      	str	r3, [sp, #0]
    4bde:	003a      	movs	r2, r7
    4be0:	4b09      	ldr	r3, [pc, #36]	; (4c08 <_vfiprintf_r+0x234>)
    4be2:	0029      	movs	r1, r5
    4be4:	0030      	movs	r0, r6
    4be6:	f000 f87f 	bl	4ce8 <_printf_i>
    4bea:	e7ec      	b.n	4bc6 <_vfiprintf_r+0x1f2>
    4bec:	000053e8 	.word	0x000053e8
    4bf0:	00005428 	.word	0x00005428
    4bf4:	00005408 	.word	0x00005408
    4bf8:	000053c8 	.word	0x000053c8
    4bfc:	0000542e 	.word	0x0000542e
    4c00:	00005432 	.word	0x00005432
    4c04:	00000000 	.word	0x00000000
    4c08:	000049af 	.word	0x000049af

00004c0c <_printf_common>:
    4c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4c0e:	0015      	movs	r5, r2
    4c10:	9301      	str	r3, [sp, #4]
    4c12:	688a      	ldr	r2, [r1, #8]
    4c14:	690b      	ldr	r3, [r1, #16]
    4c16:	9000      	str	r0, [sp, #0]
    4c18:	000c      	movs	r4, r1
    4c1a:	4293      	cmp	r3, r2
    4c1c:	da00      	bge.n	4c20 <_printf_common+0x14>
    4c1e:	0013      	movs	r3, r2
    4c20:	0022      	movs	r2, r4
    4c22:	602b      	str	r3, [r5, #0]
    4c24:	3243      	adds	r2, #67	; 0x43
    4c26:	7812      	ldrb	r2, [r2, #0]
    4c28:	2a00      	cmp	r2, #0
    4c2a:	d001      	beq.n	4c30 <_printf_common+0x24>
    4c2c:	3301      	adds	r3, #1
    4c2e:	602b      	str	r3, [r5, #0]
    4c30:	6823      	ldr	r3, [r4, #0]
    4c32:	069b      	lsls	r3, r3, #26
    4c34:	d502      	bpl.n	4c3c <_printf_common+0x30>
    4c36:	682b      	ldr	r3, [r5, #0]
    4c38:	3302      	adds	r3, #2
    4c3a:	602b      	str	r3, [r5, #0]
    4c3c:	2706      	movs	r7, #6
    4c3e:	6823      	ldr	r3, [r4, #0]
    4c40:	401f      	ands	r7, r3
    4c42:	d027      	beq.n	4c94 <_printf_common+0x88>
    4c44:	0023      	movs	r3, r4
    4c46:	3343      	adds	r3, #67	; 0x43
    4c48:	781b      	ldrb	r3, [r3, #0]
    4c4a:	1e5a      	subs	r2, r3, #1
    4c4c:	4193      	sbcs	r3, r2
    4c4e:	6822      	ldr	r2, [r4, #0]
    4c50:	0692      	lsls	r2, r2, #26
    4c52:	d430      	bmi.n	4cb6 <_printf_common+0xaa>
    4c54:	0022      	movs	r2, r4
    4c56:	9901      	ldr	r1, [sp, #4]
    4c58:	3243      	adds	r2, #67	; 0x43
    4c5a:	9800      	ldr	r0, [sp, #0]
    4c5c:	9e08      	ldr	r6, [sp, #32]
    4c5e:	47b0      	blx	r6
    4c60:	1c43      	adds	r3, r0, #1
    4c62:	d025      	beq.n	4cb0 <_printf_common+0xa4>
    4c64:	2306      	movs	r3, #6
    4c66:	6820      	ldr	r0, [r4, #0]
    4c68:	682a      	ldr	r2, [r5, #0]
    4c6a:	68e1      	ldr	r1, [r4, #12]
    4c6c:	4003      	ands	r3, r0
    4c6e:	2500      	movs	r5, #0
    4c70:	2b04      	cmp	r3, #4
    4c72:	d103      	bne.n	4c7c <_printf_common+0x70>
    4c74:	1a8d      	subs	r5, r1, r2
    4c76:	43eb      	mvns	r3, r5
    4c78:	17db      	asrs	r3, r3, #31
    4c7a:	401d      	ands	r5, r3
    4c7c:	68a3      	ldr	r3, [r4, #8]
    4c7e:	6922      	ldr	r2, [r4, #16]
    4c80:	4293      	cmp	r3, r2
    4c82:	dd01      	ble.n	4c88 <_printf_common+0x7c>
    4c84:	1a9b      	subs	r3, r3, r2
    4c86:	18ed      	adds	r5, r5, r3
    4c88:	2700      	movs	r7, #0
    4c8a:	42bd      	cmp	r5, r7
    4c8c:	d120      	bne.n	4cd0 <_printf_common+0xc4>
    4c8e:	2000      	movs	r0, #0
    4c90:	e010      	b.n	4cb4 <_printf_common+0xa8>
    4c92:	3701      	adds	r7, #1
    4c94:	68e3      	ldr	r3, [r4, #12]
    4c96:	682a      	ldr	r2, [r5, #0]
    4c98:	1a9b      	subs	r3, r3, r2
    4c9a:	429f      	cmp	r7, r3
    4c9c:	dad2      	bge.n	4c44 <_printf_common+0x38>
    4c9e:	0022      	movs	r2, r4
    4ca0:	2301      	movs	r3, #1
    4ca2:	3219      	adds	r2, #25
    4ca4:	9901      	ldr	r1, [sp, #4]
    4ca6:	9800      	ldr	r0, [sp, #0]
    4ca8:	9e08      	ldr	r6, [sp, #32]
    4caa:	47b0      	blx	r6
    4cac:	1c43      	adds	r3, r0, #1
    4cae:	d1f0      	bne.n	4c92 <_printf_common+0x86>
    4cb0:	2001      	movs	r0, #1
    4cb2:	4240      	negs	r0, r0
    4cb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4cb6:	2030      	movs	r0, #48	; 0x30
    4cb8:	18e1      	adds	r1, r4, r3
    4cba:	3143      	adds	r1, #67	; 0x43
    4cbc:	7008      	strb	r0, [r1, #0]
    4cbe:	0021      	movs	r1, r4
    4cc0:	1c5a      	adds	r2, r3, #1
    4cc2:	3145      	adds	r1, #69	; 0x45
    4cc4:	7809      	ldrb	r1, [r1, #0]
    4cc6:	18a2      	adds	r2, r4, r2
    4cc8:	3243      	adds	r2, #67	; 0x43
    4cca:	3302      	adds	r3, #2
    4ccc:	7011      	strb	r1, [r2, #0]
    4cce:	e7c1      	b.n	4c54 <_printf_common+0x48>
    4cd0:	0022      	movs	r2, r4
    4cd2:	2301      	movs	r3, #1
    4cd4:	321a      	adds	r2, #26
    4cd6:	9901      	ldr	r1, [sp, #4]
    4cd8:	9800      	ldr	r0, [sp, #0]
    4cda:	9e08      	ldr	r6, [sp, #32]
    4cdc:	47b0      	blx	r6
    4cde:	1c43      	adds	r3, r0, #1
    4ce0:	d0e6      	beq.n	4cb0 <_printf_common+0xa4>
    4ce2:	3701      	adds	r7, #1
    4ce4:	e7d1      	b.n	4c8a <_printf_common+0x7e>
	...

00004ce8 <_printf_i>:
    4ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cea:	b08b      	sub	sp, #44	; 0x2c
    4cec:	9206      	str	r2, [sp, #24]
    4cee:	000a      	movs	r2, r1
    4cf0:	3243      	adds	r2, #67	; 0x43
    4cf2:	9307      	str	r3, [sp, #28]
    4cf4:	9005      	str	r0, [sp, #20]
    4cf6:	9204      	str	r2, [sp, #16]
    4cf8:	7e0a      	ldrb	r2, [r1, #24]
    4cfa:	000c      	movs	r4, r1
    4cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4cfe:	2a6e      	cmp	r2, #110	; 0x6e
    4d00:	d100      	bne.n	4d04 <_printf_i+0x1c>
    4d02:	e08f      	b.n	4e24 <_printf_i+0x13c>
    4d04:	d817      	bhi.n	4d36 <_printf_i+0x4e>
    4d06:	2a63      	cmp	r2, #99	; 0x63
    4d08:	d02c      	beq.n	4d64 <_printf_i+0x7c>
    4d0a:	d808      	bhi.n	4d1e <_printf_i+0x36>
    4d0c:	2a00      	cmp	r2, #0
    4d0e:	d100      	bne.n	4d12 <_printf_i+0x2a>
    4d10:	e099      	b.n	4e46 <_printf_i+0x15e>
    4d12:	2a58      	cmp	r2, #88	; 0x58
    4d14:	d054      	beq.n	4dc0 <_printf_i+0xd8>
    4d16:	0026      	movs	r6, r4
    4d18:	3642      	adds	r6, #66	; 0x42
    4d1a:	7032      	strb	r2, [r6, #0]
    4d1c:	e029      	b.n	4d72 <_printf_i+0x8a>
    4d1e:	2a64      	cmp	r2, #100	; 0x64
    4d20:	d001      	beq.n	4d26 <_printf_i+0x3e>
    4d22:	2a69      	cmp	r2, #105	; 0x69
    4d24:	d1f7      	bne.n	4d16 <_printf_i+0x2e>
    4d26:	6821      	ldr	r1, [r4, #0]
    4d28:	681a      	ldr	r2, [r3, #0]
    4d2a:	0608      	lsls	r0, r1, #24
    4d2c:	d523      	bpl.n	4d76 <_printf_i+0x8e>
    4d2e:	1d11      	adds	r1, r2, #4
    4d30:	6019      	str	r1, [r3, #0]
    4d32:	6815      	ldr	r5, [r2, #0]
    4d34:	e025      	b.n	4d82 <_printf_i+0x9a>
    4d36:	2a73      	cmp	r2, #115	; 0x73
    4d38:	d100      	bne.n	4d3c <_printf_i+0x54>
    4d3a:	e088      	b.n	4e4e <_printf_i+0x166>
    4d3c:	d808      	bhi.n	4d50 <_printf_i+0x68>
    4d3e:	2a6f      	cmp	r2, #111	; 0x6f
    4d40:	d029      	beq.n	4d96 <_printf_i+0xae>
    4d42:	2a70      	cmp	r2, #112	; 0x70
    4d44:	d1e7      	bne.n	4d16 <_printf_i+0x2e>
    4d46:	2220      	movs	r2, #32
    4d48:	6809      	ldr	r1, [r1, #0]
    4d4a:	430a      	orrs	r2, r1
    4d4c:	6022      	str	r2, [r4, #0]
    4d4e:	e003      	b.n	4d58 <_printf_i+0x70>
    4d50:	2a75      	cmp	r2, #117	; 0x75
    4d52:	d020      	beq.n	4d96 <_printf_i+0xae>
    4d54:	2a78      	cmp	r2, #120	; 0x78
    4d56:	d1de      	bne.n	4d16 <_printf_i+0x2e>
    4d58:	0022      	movs	r2, r4
    4d5a:	2178      	movs	r1, #120	; 0x78
    4d5c:	3245      	adds	r2, #69	; 0x45
    4d5e:	7011      	strb	r1, [r2, #0]
    4d60:	4a6c      	ldr	r2, [pc, #432]	; (4f14 <_printf_i+0x22c>)
    4d62:	e030      	b.n	4dc6 <_printf_i+0xde>
    4d64:	000e      	movs	r6, r1
    4d66:	681a      	ldr	r2, [r3, #0]
    4d68:	3642      	adds	r6, #66	; 0x42
    4d6a:	1d11      	adds	r1, r2, #4
    4d6c:	6019      	str	r1, [r3, #0]
    4d6e:	6813      	ldr	r3, [r2, #0]
    4d70:	7033      	strb	r3, [r6, #0]
    4d72:	2301      	movs	r3, #1
    4d74:	e079      	b.n	4e6a <_printf_i+0x182>
    4d76:	0649      	lsls	r1, r1, #25
    4d78:	d5d9      	bpl.n	4d2e <_printf_i+0x46>
    4d7a:	1d11      	adds	r1, r2, #4
    4d7c:	6019      	str	r1, [r3, #0]
    4d7e:	2300      	movs	r3, #0
    4d80:	5ed5      	ldrsh	r5, [r2, r3]
    4d82:	2d00      	cmp	r5, #0
    4d84:	da03      	bge.n	4d8e <_printf_i+0xa6>
    4d86:	232d      	movs	r3, #45	; 0x2d
    4d88:	9a04      	ldr	r2, [sp, #16]
    4d8a:	426d      	negs	r5, r5
    4d8c:	7013      	strb	r3, [r2, #0]
    4d8e:	4b62      	ldr	r3, [pc, #392]	; (4f18 <_printf_i+0x230>)
    4d90:	270a      	movs	r7, #10
    4d92:	9303      	str	r3, [sp, #12]
    4d94:	e02f      	b.n	4df6 <_printf_i+0x10e>
    4d96:	6820      	ldr	r0, [r4, #0]
    4d98:	6819      	ldr	r1, [r3, #0]
    4d9a:	0605      	lsls	r5, r0, #24
    4d9c:	d503      	bpl.n	4da6 <_printf_i+0xbe>
    4d9e:	1d08      	adds	r0, r1, #4
    4da0:	6018      	str	r0, [r3, #0]
    4da2:	680d      	ldr	r5, [r1, #0]
    4da4:	e005      	b.n	4db2 <_printf_i+0xca>
    4da6:	0640      	lsls	r0, r0, #25
    4da8:	d5f9      	bpl.n	4d9e <_printf_i+0xb6>
    4daa:	680d      	ldr	r5, [r1, #0]
    4dac:	1d08      	adds	r0, r1, #4
    4dae:	6018      	str	r0, [r3, #0]
    4db0:	b2ad      	uxth	r5, r5
    4db2:	4b59      	ldr	r3, [pc, #356]	; (4f18 <_printf_i+0x230>)
    4db4:	2708      	movs	r7, #8
    4db6:	9303      	str	r3, [sp, #12]
    4db8:	2a6f      	cmp	r2, #111	; 0x6f
    4dba:	d018      	beq.n	4dee <_printf_i+0x106>
    4dbc:	270a      	movs	r7, #10
    4dbe:	e016      	b.n	4dee <_printf_i+0x106>
    4dc0:	3145      	adds	r1, #69	; 0x45
    4dc2:	700a      	strb	r2, [r1, #0]
    4dc4:	4a54      	ldr	r2, [pc, #336]	; (4f18 <_printf_i+0x230>)
    4dc6:	9203      	str	r2, [sp, #12]
    4dc8:	681a      	ldr	r2, [r3, #0]
    4dca:	6821      	ldr	r1, [r4, #0]
    4dcc:	1d10      	adds	r0, r2, #4
    4dce:	6018      	str	r0, [r3, #0]
    4dd0:	6815      	ldr	r5, [r2, #0]
    4dd2:	0608      	lsls	r0, r1, #24
    4dd4:	d522      	bpl.n	4e1c <_printf_i+0x134>
    4dd6:	07cb      	lsls	r3, r1, #31
    4dd8:	d502      	bpl.n	4de0 <_printf_i+0xf8>
    4dda:	2320      	movs	r3, #32
    4ddc:	4319      	orrs	r1, r3
    4dde:	6021      	str	r1, [r4, #0]
    4de0:	2710      	movs	r7, #16
    4de2:	2d00      	cmp	r5, #0
    4de4:	d103      	bne.n	4dee <_printf_i+0x106>
    4de6:	2320      	movs	r3, #32
    4de8:	6822      	ldr	r2, [r4, #0]
    4dea:	439a      	bics	r2, r3
    4dec:	6022      	str	r2, [r4, #0]
    4dee:	0023      	movs	r3, r4
    4df0:	2200      	movs	r2, #0
    4df2:	3343      	adds	r3, #67	; 0x43
    4df4:	701a      	strb	r2, [r3, #0]
    4df6:	6863      	ldr	r3, [r4, #4]
    4df8:	60a3      	str	r3, [r4, #8]
    4dfa:	2b00      	cmp	r3, #0
    4dfc:	db5c      	blt.n	4eb8 <_printf_i+0x1d0>
    4dfe:	2204      	movs	r2, #4
    4e00:	6821      	ldr	r1, [r4, #0]
    4e02:	4391      	bics	r1, r2
    4e04:	6021      	str	r1, [r4, #0]
    4e06:	2d00      	cmp	r5, #0
    4e08:	d158      	bne.n	4ebc <_printf_i+0x1d4>
    4e0a:	9e04      	ldr	r6, [sp, #16]
    4e0c:	2b00      	cmp	r3, #0
    4e0e:	d064      	beq.n	4eda <_printf_i+0x1f2>
    4e10:	0026      	movs	r6, r4
    4e12:	9b03      	ldr	r3, [sp, #12]
    4e14:	3642      	adds	r6, #66	; 0x42
    4e16:	781b      	ldrb	r3, [r3, #0]
    4e18:	7033      	strb	r3, [r6, #0]
    4e1a:	e05e      	b.n	4eda <_printf_i+0x1f2>
    4e1c:	0648      	lsls	r0, r1, #25
    4e1e:	d5da      	bpl.n	4dd6 <_printf_i+0xee>
    4e20:	b2ad      	uxth	r5, r5
    4e22:	e7d8      	b.n	4dd6 <_printf_i+0xee>
    4e24:	6809      	ldr	r1, [r1, #0]
    4e26:	681a      	ldr	r2, [r3, #0]
    4e28:	0608      	lsls	r0, r1, #24
    4e2a:	d505      	bpl.n	4e38 <_printf_i+0x150>
    4e2c:	1d11      	adds	r1, r2, #4
    4e2e:	6019      	str	r1, [r3, #0]
    4e30:	6813      	ldr	r3, [r2, #0]
    4e32:	6962      	ldr	r2, [r4, #20]
    4e34:	601a      	str	r2, [r3, #0]
    4e36:	e006      	b.n	4e46 <_printf_i+0x15e>
    4e38:	0649      	lsls	r1, r1, #25
    4e3a:	d5f7      	bpl.n	4e2c <_printf_i+0x144>
    4e3c:	1d11      	adds	r1, r2, #4
    4e3e:	6019      	str	r1, [r3, #0]
    4e40:	6813      	ldr	r3, [r2, #0]
    4e42:	8aa2      	ldrh	r2, [r4, #20]
    4e44:	801a      	strh	r2, [r3, #0]
    4e46:	2300      	movs	r3, #0
    4e48:	9e04      	ldr	r6, [sp, #16]
    4e4a:	6123      	str	r3, [r4, #16]
    4e4c:	e054      	b.n	4ef8 <_printf_i+0x210>
    4e4e:	681a      	ldr	r2, [r3, #0]
    4e50:	1d11      	adds	r1, r2, #4
    4e52:	6019      	str	r1, [r3, #0]
    4e54:	6816      	ldr	r6, [r2, #0]
    4e56:	2100      	movs	r1, #0
    4e58:	6862      	ldr	r2, [r4, #4]
    4e5a:	0030      	movs	r0, r6
    4e5c:	f000 f9e6 	bl	522c <memchr>
    4e60:	2800      	cmp	r0, #0
    4e62:	d001      	beq.n	4e68 <_printf_i+0x180>
    4e64:	1b80      	subs	r0, r0, r6
    4e66:	6060      	str	r0, [r4, #4]
    4e68:	6863      	ldr	r3, [r4, #4]
    4e6a:	6123      	str	r3, [r4, #16]
    4e6c:	2300      	movs	r3, #0
    4e6e:	9a04      	ldr	r2, [sp, #16]
    4e70:	7013      	strb	r3, [r2, #0]
    4e72:	e041      	b.n	4ef8 <_printf_i+0x210>
    4e74:	6923      	ldr	r3, [r4, #16]
    4e76:	0032      	movs	r2, r6
    4e78:	9906      	ldr	r1, [sp, #24]
    4e7a:	9805      	ldr	r0, [sp, #20]
    4e7c:	9d07      	ldr	r5, [sp, #28]
    4e7e:	47a8      	blx	r5
    4e80:	1c43      	adds	r3, r0, #1
    4e82:	d043      	beq.n	4f0c <_printf_i+0x224>
    4e84:	6823      	ldr	r3, [r4, #0]
    4e86:	2500      	movs	r5, #0
    4e88:	079b      	lsls	r3, r3, #30
    4e8a:	d40f      	bmi.n	4eac <_printf_i+0x1c4>
    4e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4e8e:	68e0      	ldr	r0, [r4, #12]
    4e90:	4298      	cmp	r0, r3
    4e92:	da3d      	bge.n	4f10 <_printf_i+0x228>
    4e94:	0018      	movs	r0, r3
    4e96:	e03b      	b.n	4f10 <_printf_i+0x228>
    4e98:	0022      	movs	r2, r4
    4e9a:	2301      	movs	r3, #1
    4e9c:	3219      	adds	r2, #25
    4e9e:	9906      	ldr	r1, [sp, #24]
    4ea0:	9805      	ldr	r0, [sp, #20]
    4ea2:	9e07      	ldr	r6, [sp, #28]
    4ea4:	47b0      	blx	r6
    4ea6:	1c43      	adds	r3, r0, #1
    4ea8:	d030      	beq.n	4f0c <_printf_i+0x224>
    4eaa:	3501      	adds	r5, #1
    4eac:	68e3      	ldr	r3, [r4, #12]
    4eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4eb0:	1a9b      	subs	r3, r3, r2
    4eb2:	429d      	cmp	r5, r3
    4eb4:	dbf0      	blt.n	4e98 <_printf_i+0x1b0>
    4eb6:	e7e9      	b.n	4e8c <_printf_i+0x1a4>
    4eb8:	2d00      	cmp	r5, #0
    4eba:	d0a9      	beq.n	4e10 <_printf_i+0x128>
    4ebc:	9e04      	ldr	r6, [sp, #16]
    4ebe:	0028      	movs	r0, r5
    4ec0:	0039      	movs	r1, r7
    4ec2:	f7ff f873 	bl	3fac <__aeabi_uidivmod>
    4ec6:	9b03      	ldr	r3, [sp, #12]
    4ec8:	3e01      	subs	r6, #1
    4eca:	5c5b      	ldrb	r3, [r3, r1]
    4ecc:	0028      	movs	r0, r5
    4ece:	7033      	strb	r3, [r6, #0]
    4ed0:	0039      	movs	r1, r7
    4ed2:	f7fe ffe5 	bl	3ea0 <__udivsi3>
    4ed6:	1e05      	subs	r5, r0, #0
    4ed8:	d1f1      	bne.n	4ebe <_printf_i+0x1d6>
    4eda:	2f08      	cmp	r7, #8
    4edc:	d109      	bne.n	4ef2 <_printf_i+0x20a>
    4ede:	6823      	ldr	r3, [r4, #0]
    4ee0:	07db      	lsls	r3, r3, #31
    4ee2:	d506      	bpl.n	4ef2 <_printf_i+0x20a>
    4ee4:	6863      	ldr	r3, [r4, #4]
    4ee6:	6922      	ldr	r2, [r4, #16]
    4ee8:	4293      	cmp	r3, r2
    4eea:	dc02      	bgt.n	4ef2 <_printf_i+0x20a>
    4eec:	2330      	movs	r3, #48	; 0x30
    4eee:	3e01      	subs	r6, #1
    4ef0:	7033      	strb	r3, [r6, #0]
    4ef2:	9b04      	ldr	r3, [sp, #16]
    4ef4:	1b9b      	subs	r3, r3, r6
    4ef6:	6123      	str	r3, [r4, #16]
    4ef8:	9b07      	ldr	r3, [sp, #28]
    4efa:	aa09      	add	r2, sp, #36	; 0x24
    4efc:	9300      	str	r3, [sp, #0]
    4efe:	0021      	movs	r1, r4
    4f00:	9b06      	ldr	r3, [sp, #24]
    4f02:	9805      	ldr	r0, [sp, #20]
    4f04:	f7ff fe82 	bl	4c0c <_printf_common>
    4f08:	1c43      	adds	r3, r0, #1
    4f0a:	d1b3      	bne.n	4e74 <_printf_i+0x18c>
    4f0c:	2001      	movs	r0, #1
    4f0e:	4240      	negs	r0, r0
    4f10:	b00b      	add	sp, #44	; 0x2c
    4f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f14:	0000544a 	.word	0x0000544a
    4f18:	00005439 	.word	0x00005439

00004f1c <_sbrk_r>:
    4f1c:	2300      	movs	r3, #0
    4f1e:	b570      	push	{r4, r5, r6, lr}
    4f20:	4c06      	ldr	r4, [pc, #24]	; (4f3c <_sbrk_r+0x20>)
    4f22:	0005      	movs	r5, r0
    4f24:	0008      	movs	r0, r1
    4f26:	6023      	str	r3, [r4, #0]
    4f28:	f7fe ff78 	bl	3e1c <_sbrk>
    4f2c:	1c43      	adds	r3, r0, #1
    4f2e:	d103      	bne.n	4f38 <_sbrk_r+0x1c>
    4f30:	6823      	ldr	r3, [r4, #0]
    4f32:	2b00      	cmp	r3, #0
    4f34:	d000      	beq.n	4f38 <_sbrk_r+0x1c>
    4f36:	602b      	str	r3, [r5, #0]
    4f38:	bd70      	pop	{r4, r5, r6, pc}
    4f3a:	46c0      	nop			; (mov r8, r8)
    4f3c:	200007e8 	.word	0x200007e8

00004f40 <__sread>:
    4f40:	b570      	push	{r4, r5, r6, lr}
    4f42:	000c      	movs	r4, r1
    4f44:	250e      	movs	r5, #14
    4f46:	5f49      	ldrsh	r1, [r1, r5]
    4f48:	f000 f97e 	bl	5248 <_read_r>
    4f4c:	2800      	cmp	r0, #0
    4f4e:	db03      	blt.n	4f58 <__sread+0x18>
    4f50:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4f52:	181b      	adds	r3, r3, r0
    4f54:	6563      	str	r3, [r4, #84]	; 0x54
    4f56:	bd70      	pop	{r4, r5, r6, pc}
    4f58:	89a3      	ldrh	r3, [r4, #12]
    4f5a:	4a02      	ldr	r2, [pc, #8]	; (4f64 <__sread+0x24>)
    4f5c:	4013      	ands	r3, r2
    4f5e:	81a3      	strh	r3, [r4, #12]
    4f60:	e7f9      	b.n	4f56 <__sread+0x16>
    4f62:	46c0      	nop			; (mov r8, r8)
    4f64:	ffffefff 	.word	0xffffefff

00004f68 <__swrite>:
    4f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f6a:	001f      	movs	r7, r3
    4f6c:	898b      	ldrh	r3, [r1, #12]
    4f6e:	0005      	movs	r5, r0
    4f70:	000c      	movs	r4, r1
    4f72:	0016      	movs	r6, r2
    4f74:	05db      	lsls	r3, r3, #23
    4f76:	d505      	bpl.n	4f84 <__swrite+0x1c>
    4f78:	230e      	movs	r3, #14
    4f7a:	5ec9      	ldrsh	r1, [r1, r3]
    4f7c:	2200      	movs	r2, #0
    4f7e:	2302      	movs	r3, #2
    4f80:	f000 f940 	bl	5204 <_lseek_r>
    4f84:	89a3      	ldrh	r3, [r4, #12]
    4f86:	4a05      	ldr	r2, [pc, #20]	; (4f9c <__swrite+0x34>)
    4f88:	0028      	movs	r0, r5
    4f8a:	4013      	ands	r3, r2
    4f8c:	81a3      	strh	r3, [r4, #12]
    4f8e:	0032      	movs	r2, r6
    4f90:	230e      	movs	r3, #14
    4f92:	5ee1      	ldrsh	r1, [r4, r3]
    4f94:	003b      	movs	r3, r7
    4f96:	f000 f875 	bl	5084 <_write_r>
    4f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f9c:	ffffefff 	.word	0xffffefff

00004fa0 <__sseek>:
    4fa0:	b570      	push	{r4, r5, r6, lr}
    4fa2:	000c      	movs	r4, r1
    4fa4:	250e      	movs	r5, #14
    4fa6:	5f49      	ldrsh	r1, [r1, r5]
    4fa8:	f000 f92c 	bl	5204 <_lseek_r>
    4fac:	89a3      	ldrh	r3, [r4, #12]
    4fae:	1c42      	adds	r2, r0, #1
    4fb0:	d103      	bne.n	4fba <__sseek+0x1a>
    4fb2:	4a05      	ldr	r2, [pc, #20]	; (4fc8 <__sseek+0x28>)
    4fb4:	4013      	ands	r3, r2
    4fb6:	81a3      	strh	r3, [r4, #12]
    4fb8:	bd70      	pop	{r4, r5, r6, pc}
    4fba:	2280      	movs	r2, #128	; 0x80
    4fbc:	0152      	lsls	r2, r2, #5
    4fbe:	4313      	orrs	r3, r2
    4fc0:	81a3      	strh	r3, [r4, #12]
    4fc2:	6560      	str	r0, [r4, #84]	; 0x54
    4fc4:	e7f8      	b.n	4fb8 <__sseek+0x18>
    4fc6:	46c0      	nop			; (mov r8, r8)
    4fc8:	ffffefff 	.word	0xffffefff

00004fcc <__sclose>:
    4fcc:	b510      	push	{r4, lr}
    4fce:	230e      	movs	r3, #14
    4fd0:	5ec9      	ldrsh	r1, [r1, r3]
    4fd2:	f000 f8e1 	bl	5198 <_close_r>
    4fd6:	bd10      	pop	{r4, pc}

00004fd8 <__swbuf_r>:
    4fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4fda:	0005      	movs	r5, r0
    4fdc:	000e      	movs	r6, r1
    4fde:	0014      	movs	r4, r2
    4fe0:	2800      	cmp	r0, #0
    4fe2:	d004      	beq.n	4fee <__swbuf_r+0x16>
    4fe4:	6983      	ldr	r3, [r0, #24]
    4fe6:	2b00      	cmp	r3, #0
    4fe8:	d101      	bne.n	4fee <__swbuf_r+0x16>
    4fea:	f7ff fb17 	bl	461c <__sinit>
    4fee:	4b22      	ldr	r3, [pc, #136]	; (5078 <__swbuf_r+0xa0>)
    4ff0:	429c      	cmp	r4, r3
    4ff2:	d12d      	bne.n	5050 <__swbuf_r+0x78>
    4ff4:	686c      	ldr	r4, [r5, #4]
    4ff6:	69a3      	ldr	r3, [r4, #24]
    4ff8:	60a3      	str	r3, [r4, #8]
    4ffa:	89a3      	ldrh	r3, [r4, #12]
    4ffc:	071b      	lsls	r3, r3, #28
    4ffe:	d531      	bpl.n	5064 <__swbuf_r+0x8c>
    5000:	6923      	ldr	r3, [r4, #16]
    5002:	2b00      	cmp	r3, #0
    5004:	d02e      	beq.n	5064 <__swbuf_r+0x8c>
    5006:	6823      	ldr	r3, [r4, #0]
    5008:	6922      	ldr	r2, [r4, #16]
    500a:	b2f7      	uxtb	r7, r6
    500c:	1a98      	subs	r0, r3, r2
    500e:	6963      	ldr	r3, [r4, #20]
    5010:	b2f6      	uxtb	r6, r6
    5012:	4298      	cmp	r0, r3
    5014:	db05      	blt.n	5022 <__swbuf_r+0x4a>
    5016:	0021      	movs	r1, r4
    5018:	0028      	movs	r0, r5
    501a:	f7ff fa91 	bl	4540 <_fflush_r>
    501e:	2800      	cmp	r0, #0
    5020:	d126      	bne.n	5070 <__swbuf_r+0x98>
    5022:	68a3      	ldr	r3, [r4, #8]
    5024:	3001      	adds	r0, #1
    5026:	3b01      	subs	r3, #1
    5028:	60a3      	str	r3, [r4, #8]
    502a:	6823      	ldr	r3, [r4, #0]
    502c:	1c5a      	adds	r2, r3, #1
    502e:	6022      	str	r2, [r4, #0]
    5030:	701f      	strb	r7, [r3, #0]
    5032:	6963      	ldr	r3, [r4, #20]
    5034:	4298      	cmp	r0, r3
    5036:	d004      	beq.n	5042 <__swbuf_r+0x6a>
    5038:	89a3      	ldrh	r3, [r4, #12]
    503a:	07db      	lsls	r3, r3, #31
    503c:	d51a      	bpl.n	5074 <__swbuf_r+0x9c>
    503e:	2e0a      	cmp	r6, #10
    5040:	d118      	bne.n	5074 <__swbuf_r+0x9c>
    5042:	0021      	movs	r1, r4
    5044:	0028      	movs	r0, r5
    5046:	f7ff fa7b 	bl	4540 <_fflush_r>
    504a:	2800      	cmp	r0, #0
    504c:	d012      	beq.n	5074 <__swbuf_r+0x9c>
    504e:	e00f      	b.n	5070 <__swbuf_r+0x98>
    5050:	4b0a      	ldr	r3, [pc, #40]	; (507c <__swbuf_r+0xa4>)
    5052:	429c      	cmp	r4, r3
    5054:	d101      	bne.n	505a <__swbuf_r+0x82>
    5056:	68ac      	ldr	r4, [r5, #8]
    5058:	e7cd      	b.n	4ff6 <__swbuf_r+0x1e>
    505a:	4b09      	ldr	r3, [pc, #36]	; (5080 <__swbuf_r+0xa8>)
    505c:	429c      	cmp	r4, r3
    505e:	d1ca      	bne.n	4ff6 <__swbuf_r+0x1e>
    5060:	68ec      	ldr	r4, [r5, #12]
    5062:	e7c8      	b.n	4ff6 <__swbuf_r+0x1e>
    5064:	0021      	movs	r1, r4
    5066:	0028      	movs	r0, r5
    5068:	f000 f820 	bl	50ac <__swsetup_r>
    506c:	2800      	cmp	r0, #0
    506e:	d0ca      	beq.n	5006 <__swbuf_r+0x2e>
    5070:	2601      	movs	r6, #1
    5072:	4276      	negs	r6, r6
    5074:	0030      	movs	r0, r6
    5076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5078:	000053e8 	.word	0x000053e8
    507c:	00005408 	.word	0x00005408
    5080:	000053c8 	.word	0x000053c8

00005084 <_write_r>:
    5084:	b570      	push	{r4, r5, r6, lr}
    5086:	0005      	movs	r5, r0
    5088:	0008      	movs	r0, r1
    508a:	0011      	movs	r1, r2
    508c:	2200      	movs	r2, #0
    508e:	4c06      	ldr	r4, [pc, #24]	; (50a8 <_write_r+0x24>)
    5090:	6022      	str	r2, [r4, #0]
    5092:	001a      	movs	r2, r3
    5094:	f7fd fb4e 	bl	2734 <_write>
    5098:	1c43      	adds	r3, r0, #1
    509a:	d103      	bne.n	50a4 <_write_r+0x20>
    509c:	6823      	ldr	r3, [r4, #0]
    509e:	2b00      	cmp	r3, #0
    50a0:	d000      	beq.n	50a4 <_write_r+0x20>
    50a2:	602b      	str	r3, [r5, #0]
    50a4:	bd70      	pop	{r4, r5, r6, pc}
    50a6:	46c0      	nop			; (mov r8, r8)
    50a8:	200007e8 	.word	0x200007e8

000050ac <__swsetup_r>:
    50ac:	4b36      	ldr	r3, [pc, #216]	; (5188 <__swsetup_r+0xdc>)
    50ae:	b570      	push	{r4, r5, r6, lr}
    50b0:	681d      	ldr	r5, [r3, #0]
    50b2:	0006      	movs	r6, r0
    50b4:	000c      	movs	r4, r1
    50b6:	2d00      	cmp	r5, #0
    50b8:	d005      	beq.n	50c6 <__swsetup_r+0x1a>
    50ba:	69ab      	ldr	r3, [r5, #24]
    50bc:	2b00      	cmp	r3, #0
    50be:	d102      	bne.n	50c6 <__swsetup_r+0x1a>
    50c0:	0028      	movs	r0, r5
    50c2:	f7ff faab 	bl	461c <__sinit>
    50c6:	4b31      	ldr	r3, [pc, #196]	; (518c <__swsetup_r+0xe0>)
    50c8:	429c      	cmp	r4, r3
    50ca:	d10f      	bne.n	50ec <__swsetup_r+0x40>
    50cc:	686c      	ldr	r4, [r5, #4]
    50ce:	230c      	movs	r3, #12
    50d0:	5ee2      	ldrsh	r2, [r4, r3]
    50d2:	b293      	uxth	r3, r2
    50d4:	0719      	lsls	r1, r3, #28
    50d6:	d42d      	bmi.n	5134 <__swsetup_r+0x88>
    50d8:	06d9      	lsls	r1, r3, #27
    50da:	d411      	bmi.n	5100 <__swsetup_r+0x54>
    50dc:	2309      	movs	r3, #9
    50de:	2001      	movs	r0, #1
    50e0:	6033      	str	r3, [r6, #0]
    50e2:	3337      	adds	r3, #55	; 0x37
    50e4:	4313      	orrs	r3, r2
    50e6:	81a3      	strh	r3, [r4, #12]
    50e8:	4240      	negs	r0, r0
    50ea:	bd70      	pop	{r4, r5, r6, pc}
    50ec:	4b28      	ldr	r3, [pc, #160]	; (5190 <__swsetup_r+0xe4>)
    50ee:	429c      	cmp	r4, r3
    50f0:	d101      	bne.n	50f6 <__swsetup_r+0x4a>
    50f2:	68ac      	ldr	r4, [r5, #8]
    50f4:	e7eb      	b.n	50ce <__swsetup_r+0x22>
    50f6:	4b27      	ldr	r3, [pc, #156]	; (5194 <__swsetup_r+0xe8>)
    50f8:	429c      	cmp	r4, r3
    50fa:	d1e8      	bne.n	50ce <__swsetup_r+0x22>
    50fc:	68ec      	ldr	r4, [r5, #12]
    50fe:	e7e6      	b.n	50ce <__swsetup_r+0x22>
    5100:	075b      	lsls	r3, r3, #29
    5102:	d513      	bpl.n	512c <__swsetup_r+0x80>
    5104:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5106:	2900      	cmp	r1, #0
    5108:	d008      	beq.n	511c <__swsetup_r+0x70>
    510a:	0023      	movs	r3, r4
    510c:	3344      	adds	r3, #68	; 0x44
    510e:	4299      	cmp	r1, r3
    5110:	d002      	beq.n	5118 <__swsetup_r+0x6c>
    5112:	0030      	movs	r0, r6
    5114:	f7ff fb8e 	bl	4834 <_free_r>
    5118:	2300      	movs	r3, #0
    511a:	6363      	str	r3, [r4, #52]	; 0x34
    511c:	2224      	movs	r2, #36	; 0x24
    511e:	89a3      	ldrh	r3, [r4, #12]
    5120:	4393      	bics	r3, r2
    5122:	81a3      	strh	r3, [r4, #12]
    5124:	2300      	movs	r3, #0
    5126:	6063      	str	r3, [r4, #4]
    5128:	6923      	ldr	r3, [r4, #16]
    512a:	6023      	str	r3, [r4, #0]
    512c:	2308      	movs	r3, #8
    512e:	89a2      	ldrh	r2, [r4, #12]
    5130:	4313      	orrs	r3, r2
    5132:	81a3      	strh	r3, [r4, #12]
    5134:	6923      	ldr	r3, [r4, #16]
    5136:	2b00      	cmp	r3, #0
    5138:	d10b      	bne.n	5152 <__swsetup_r+0xa6>
    513a:	21a0      	movs	r1, #160	; 0xa0
    513c:	2280      	movs	r2, #128	; 0x80
    513e:	89a3      	ldrh	r3, [r4, #12]
    5140:	0089      	lsls	r1, r1, #2
    5142:	0092      	lsls	r2, r2, #2
    5144:	400b      	ands	r3, r1
    5146:	4293      	cmp	r3, r2
    5148:	d003      	beq.n	5152 <__swsetup_r+0xa6>
    514a:	0021      	movs	r1, r4
    514c:	0030      	movs	r0, r6
    514e:	f7ff fb23 	bl	4798 <__smakebuf_r>
    5152:	2301      	movs	r3, #1
    5154:	89a2      	ldrh	r2, [r4, #12]
    5156:	4013      	ands	r3, r2
    5158:	d011      	beq.n	517e <__swsetup_r+0xd2>
    515a:	2300      	movs	r3, #0
    515c:	60a3      	str	r3, [r4, #8]
    515e:	6963      	ldr	r3, [r4, #20]
    5160:	425b      	negs	r3, r3
    5162:	61a3      	str	r3, [r4, #24]
    5164:	2000      	movs	r0, #0
    5166:	6923      	ldr	r3, [r4, #16]
    5168:	4283      	cmp	r3, r0
    516a:	d1be      	bne.n	50ea <__swsetup_r+0x3e>
    516c:	230c      	movs	r3, #12
    516e:	5ee2      	ldrsh	r2, [r4, r3]
    5170:	0613      	lsls	r3, r2, #24
    5172:	d5ba      	bpl.n	50ea <__swsetup_r+0x3e>
    5174:	2340      	movs	r3, #64	; 0x40
    5176:	4313      	orrs	r3, r2
    5178:	81a3      	strh	r3, [r4, #12]
    517a:	3801      	subs	r0, #1
    517c:	e7b5      	b.n	50ea <__swsetup_r+0x3e>
    517e:	0792      	lsls	r2, r2, #30
    5180:	d400      	bmi.n	5184 <__swsetup_r+0xd8>
    5182:	6963      	ldr	r3, [r4, #20]
    5184:	60a3      	str	r3, [r4, #8]
    5186:	e7ed      	b.n	5164 <__swsetup_r+0xb8>
    5188:	200000a4 	.word	0x200000a4
    518c:	000053e8 	.word	0x000053e8
    5190:	00005408 	.word	0x00005408
    5194:	000053c8 	.word	0x000053c8

00005198 <_close_r>:
    5198:	2300      	movs	r3, #0
    519a:	b570      	push	{r4, r5, r6, lr}
    519c:	4c06      	ldr	r4, [pc, #24]	; (51b8 <_close_r+0x20>)
    519e:	0005      	movs	r5, r0
    51a0:	0008      	movs	r0, r1
    51a2:	6023      	str	r3, [r4, #0]
    51a4:	f7fe fe4c 	bl	3e40 <_close>
    51a8:	1c43      	adds	r3, r0, #1
    51aa:	d103      	bne.n	51b4 <_close_r+0x1c>
    51ac:	6823      	ldr	r3, [r4, #0]
    51ae:	2b00      	cmp	r3, #0
    51b0:	d000      	beq.n	51b4 <_close_r+0x1c>
    51b2:	602b      	str	r3, [r5, #0]
    51b4:	bd70      	pop	{r4, r5, r6, pc}
    51b6:	46c0      	nop			; (mov r8, r8)
    51b8:	200007e8 	.word	0x200007e8

000051bc <_fstat_r>:
    51bc:	2300      	movs	r3, #0
    51be:	b570      	push	{r4, r5, r6, lr}
    51c0:	4c06      	ldr	r4, [pc, #24]	; (51dc <_fstat_r+0x20>)
    51c2:	0005      	movs	r5, r0
    51c4:	0008      	movs	r0, r1
    51c6:	0011      	movs	r1, r2
    51c8:	6023      	str	r3, [r4, #0]
    51ca:	f7fe fe3c 	bl	3e46 <_fstat>
    51ce:	1c43      	adds	r3, r0, #1
    51d0:	d103      	bne.n	51da <_fstat_r+0x1e>
    51d2:	6823      	ldr	r3, [r4, #0]
    51d4:	2b00      	cmp	r3, #0
    51d6:	d000      	beq.n	51da <_fstat_r+0x1e>
    51d8:	602b      	str	r3, [r5, #0]
    51da:	bd70      	pop	{r4, r5, r6, pc}
    51dc:	200007e8 	.word	0x200007e8

000051e0 <_isatty_r>:
    51e0:	2300      	movs	r3, #0
    51e2:	b570      	push	{r4, r5, r6, lr}
    51e4:	4c06      	ldr	r4, [pc, #24]	; (5200 <_isatty_r+0x20>)
    51e6:	0005      	movs	r5, r0
    51e8:	0008      	movs	r0, r1
    51ea:	6023      	str	r3, [r4, #0]
    51ec:	f7fe fe30 	bl	3e50 <_isatty>
    51f0:	1c43      	adds	r3, r0, #1
    51f2:	d103      	bne.n	51fc <_isatty_r+0x1c>
    51f4:	6823      	ldr	r3, [r4, #0]
    51f6:	2b00      	cmp	r3, #0
    51f8:	d000      	beq.n	51fc <_isatty_r+0x1c>
    51fa:	602b      	str	r3, [r5, #0]
    51fc:	bd70      	pop	{r4, r5, r6, pc}
    51fe:	46c0      	nop			; (mov r8, r8)
    5200:	200007e8 	.word	0x200007e8

00005204 <_lseek_r>:
    5204:	b570      	push	{r4, r5, r6, lr}
    5206:	0005      	movs	r5, r0
    5208:	0008      	movs	r0, r1
    520a:	0011      	movs	r1, r2
    520c:	2200      	movs	r2, #0
    520e:	4c06      	ldr	r4, [pc, #24]	; (5228 <_lseek_r+0x24>)
    5210:	6022      	str	r2, [r4, #0]
    5212:	001a      	movs	r2, r3
    5214:	f7fe fe1e 	bl	3e54 <_lseek>
    5218:	1c43      	adds	r3, r0, #1
    521a:	d103      	bne.n	5224 <_lseek_r+0x20>
    521c:	6823      	ldr	r3, [r4, #0]
    521e:	2b00      	cmp	r3, #0
    5220:	d000      	beq.n	5224 <_lseek_r+0x20>
    5222:	602b      	str	r3, [r5, #0]
    5224:	bd70      	pop	{r4, r5, r6, pc}
    5226:	46c0      	nop			; (mov r8, r8)
    5228:	200007e8 	.word	0x200007e8

0000522c <memchr>:
    522c:	b2c9      	uxtb	r1, r1
    522e:	1882      	adds	r2, r0, r2
    5230:	4290      	cmp	r0, r2
    5232:	d101      	bne.n	5238 <memchr+0xc>
    5234:	2000      	movs	r0, #0
    5236:	4770      	bx	lr
    5238:	7803      	ldrb	r3, [r0, #0]
    523a:	428b      	cmp	r3, r1
    523c:	d0fb      	beq.n	5236 <memchr+0xa>
    523e:	3001      	adds	r0, #1
    5240:	e7f6      	b.n	5230 <memchr+0x4>

00005242 <__malloc_lock>:
    5242:	4770      	bx	lr

00005244 <__malloc_unlock>:
    5244:	4770      	bx	lr
	...

00005248 <_read_r>:
    5248:	b570      	push	{r4, r5, r6, lr}
    524a:	0005      	movs	r5, r0
    524c:	0008      	movs	r0, r1
    524e:	0011      	movs	r1, r2
    5250:	2200      	movs	r2, #0
    5252:	4c06      	ldr	r4, [pc, #24]	; (526c <_read_r+0x24>)
    5254:	6022      	str	r2, [r4, #0]
    5256:	001a      	movs	r2, r3
    5258:	f7fd fa4a 	bl	26f0 <_read>
    525c:	1c43      	adds	r3, r0, #1
    525e:	d103      	bne.n	5268 <_read_r+0x20>
    5260:	6823      	ldr	r3, [r4, #0]
    5262:	2b00      	cmp	r3, #0
    5264:	d000      	beq.n	5268 <_read_r+0x20>
    5266:	602b      	str	r3, [r5, #0]
    5268:	bd70      	pop	{r4, r5, r6, pc}
    526a:	46c0      	nop			; (mov r8, r8)
    526c:	200007e8 	.word	0x200007e8
    5270:	3a627375 	.word	0x3a627375
    5274:	61747320 	.word	0x61747320
    5278:	2e2e7472 	.word	0x2e2e7472
    527c:	000d0a2e 	.word	0x000d0a2e
    5280:	3a627375 	.word	0x3a627375
    5284:	73657220 	.word	0x73657220
    5288:	6e696d75 	.word	0x6e696d75
    528c:	2e2e2e67 	.word	0x2e2e2e67
    5290:	00000d0a 	.word	0x00000d0a
    5294:	3a627375 	.word	0x3a627375
    5298:	73757320 	.word	0x73757320
    529c:	646e6570 	.word	0x646e6570
    52a0:	2e676e69 	.word	0x2e676e69
    52a4:	0d0a2e2e 	.word	0x0d0a2e2e
    52a8:	00000000 	.word	0x00000000

000052ac <_tcc_intflag>:
    52ac:	00000001 00000002 00000004 00000008     ................
    52bc:	00001000 00002000 00004000 00008000     ..... ...@......
    52cc:	00010000 00020000 00040000 00080000     ................
    52dc:	00001720 0000172e 000017c8 00001868      ...........h...
    52ec:	000018cc                                ....

000052f0 <_usb_device_irq_bits>:
    52f0:	00080004 00800070 01000001 00000200     ....p...........

00005300 <_usb_endpoint_irq_bits>:
    5300:	60100c03 69726553 63206c61 6f736e6f     ...`Serial conso
    5310:	6920656c 2074696e 0a212121 0000000d     le init !!!.....
    5320:	0d0a7325 00000000 3a697073 6e657320     %s......spi: sen
    5330:	676e6964 70206120 656b6361 666f2074     ding a packet of
    5340:	6e656c20 3a687467 0a642520 0000000d      length: %d.....
    5350:	3a697073 63617020 2074656b 746e6573     spi: packet sent
    5360:	00000d0a 42000800 42000c00 42001000     .......B...B...B
    5370:	42001400 42001800 42001c00 000036aa     ...B...B...B.6..
    5380:	000036a6 000036a6 0000370c 0000370c     .6...6...7...7..
    5390:	000036be 000036b0 000036c4 000036fa     .6...6...6...6..
    53a0:	00003814 000037f4 000037f4 00003880     .8...7...7...8..
    53b0:	00003806 00003822 000037f8 00003830     .8.."8...7..08..
    53c0:	00003870                                p8..

000053c4 <_global_impure_ptr>:
    53c4:	200000a8                                ... 

000053c8 <__sf_fake_stderr>:
	...

000053e8 <__sf_fake_stdin>:
	...

00005408 <__sf_fake_stdout>:
	...
    5428:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    5438:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    5448:	31300046 35343332 39383736 64636261     F.0123456789abcd
    5458:	00006665                                ef..

0000545c <_init>:
    545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    545e:	46c0      	nop			; (mov r8, r8)
    5460:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5462:	bc08      	pop	{r3}
    5464:	469e      	mov	lr, r3
    5466:	4770      	bx	lr

00005468 <__init_array_start>:
    5468:	000000dd 	.word	0x000000dd

0000546c <_fini>:
    546c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    546e:	46c0      	nop			; (mov r8, r8)
    5470:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5472:	bc08      	pop	{r3}
    5474:	469e      	mov	lr, r3
    5476:	4770      	bx	lr

00005478 <__fini_array_start>:
    5478:	000000b5 	.word	0x000000b5
